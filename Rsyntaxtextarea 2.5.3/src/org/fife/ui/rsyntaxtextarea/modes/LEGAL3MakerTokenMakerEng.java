/* The following code was generated by JFlex 1.4.1 on 11/08/15 17:20 */

/*
 * Generated on 8/11/15 5:20 PM
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Arquivo de sintaxe da linguagem LEGAL 3 Maker.
 */

public class LEGAL3MakerTokenMakerEng extends AbstractJFlexCTokenMaker {
  /** This character denotes the end of file */
  public static final int YYEOF = -1;
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\71\1\31\1\15"+
    "\1\20\1\1\1\33\1\31\1\7\2\30\1\33\1\27\1\31\1\27"+
    "\1\25\1\34\1\4\1\16\1\51\1\53\1\54\1\63\1\6\1\6"+
    "\1\3\1\3\1\46\1\31\1\72\1\33\1\72\1\31\1\32\1\50"+
    "\1\52\1\55\1\5\1\26\1\42\1\56\1\35\1\44\1\70\1\67"+
    "\1\45\1\60\1\61\1\57\1\40\1\1\1\65\1\41\1\36\1\12"+
    "\1\64\1\47\1\24\1\66\1\1\1\30\1\11\1\30\1\17\1\2"+
    "\1\0\1\50\1\14\1\55\1\5\1\26\1\43\1\56\1\73\1\44"+
    "\1\70\1\67\1\45\1\60\1\62\1\57\1\40\1\1\1\13\1\41"+
    "\1\37\1\12\1\64\1\74\1\24\1\66\1\1\1\22\1\17\1\23"+
    "\1\31\101\0\20\1\1\0\6\1\1\0\6\1\1\0\7\1\1\0"+
    "\11\1\1\0\6\1\1\0\6\1\1\0\1\1\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\3\1\4\1\5\2\1\1\3"+
    "\1\6\1\7\1\10\1\11\1\12\1\1\1\3\1\13"+
    "\3\1\2\3\3\1\3\3\1\1\1\3\1\1\1\3"+
    "\1\1\1\3\1\14\1\15\1\16\7\14\1\17\6\14"+
    "\1\0\1\20\1\0\2\20\3\1\1\3\1\4\1\21"+
    "\1\0\1\4\11\1\2\6\1\22\1\23\15\1\1\3"+
    "\40\1\3\14\2\0\1\14\2\0\3\14\2\0\1\14"+
    "\3\0\1\23\1\0\1\24\5\1\1\4\1\25\2\4"+
    "\1\21\1\4\13\1\1\6\1\26\1\6\44\1\1\3"+
    "\1\1\3\14\2\0\1\14\2\0\3\14\2\0\1\14"+
    "\3\0\1\1\1\3\1\4\5\1\1\6\3\1\2\3"+
    "\32\1\2\14\1\0\1\14\1\27\1\0\2\14\1\0"+
    "\1\14\1\30\2\0\2\1\1\4\3\1\1\6\1\1"+
    "\1\0\10\1\1\31\6\1\1\3\1\1\1\14\2\0"+
    "\1\14\3\0\1\1\1\4\1\1\1\6\1\1\1\0"+
    "\6\1\1\0\1\3\1\1\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\267\0\u0225\0\u0262\0\u029f\0\u02dc\0\267\0\u0319"+
    "\0\267\0\267\0\u0356\0\u0393\0\267\0\u03d0\0\u040d\0\u044a"+
    "\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632"+
    "\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\364\0\u07a0\0\267"+
    "\0\267\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b"+
    "\0\267\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6"+
    "\0\u0b33\0\u0356\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\267\0\u0d1b\0\u0d58\0\u0ca1\0\u0d95\0\u0dd2\0\u0e0f"+
    "\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\267"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2"+
    "\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572"+
    "\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a"+
    "\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942"+
    "\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12"+
    "\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa"+
    "\0\u1f37\0\u1f74\0\u0bad\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5"+
    "\0\u20e2\0\267\0\u211f\0\u215c\0\u0d1b\0\u2199\0\u21d6\0\u2213"+
    "\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb"+
    "\0\u2438\0\u2475\0\267\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6"+
    "\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e"+
    "\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976"+
    "\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e"+
    "\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46"+
    "\0\u2381\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1"+
    "\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9"+
    "\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1"+
    "\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u2808"+
    "\0\u34a9\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654"+
    "\0\u3691\0\u36ce\0\u370b\0\u3748\0\u3785\0\u37c2\0\u37ff\0\u383c"+
    "\0\u3879\0\u38b6\0\u38f3\0\u3930\0\u396d\0\u39aa\0\u39e7\0\u3a24"+
    "\0\u3a61\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c"+
    "\0\u3c49\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4"+
    "\0\u3e31\0\u3e6e\0\u3eab\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f\0\u3fdc"+
    "\0\u4019\0\u4056\0\u4093\0\u40d0\0\u410d\0\u414a\0\u4187\0\u41c4"+
    "\0\u4201\0\364\0\u423e\0\u427b\0\u42b8\0\u42f5\0\u4332\0\u436f"+
    "\0\u3523\0\u43ac\0\u43e9\0\u4426\0\u3c0c\0\u4463\0\u44a0\0\u3d7a"+
    "\0\u44dd\0\u451a\0\u4557\0\u4594\0\u45d1\0\u460e\0\u464b\0\u4688"+
    "\0\u46c5\0\u4702\0\u473f\0\u477c\0\u47b9\0\u47f6\0\267\0\u4833"+
    "\0\u460e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\6\1\11\1\12"+
    "\1\4\1\13\1\14\1\15\1\16\1\6\1\4\1\17"+
    "\1\20\1\21\1\22\1\5\1\23\1\24\1\25\1\22"+
    "\2\4\2\25\1\26\2\27\1\30\1\31\2\32\1\33"+
    "\1\34\1\4\1\35\1\36\1\6\1\15\2\6\1\37"+
    "\1\40\1\41\1\42\2\43\1\6\1\44\1\14\1\45"+
    "\1\46\1\5\1\20\1\25\1\26\1\35\10\47\1\50"+
    "\12\47\1\51\11\47\1\52\4\47\1\53\1\54\3\47"+
    "\1\55\23\47\1\56\1\57\10\60\1\61\24\60\1\62"+
    "\4\60\1\63\1\64\3\60\1\65\23\60\1\66\1\67"+
    "\76\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\22\5\2\0"+
    "\2\5\3\71\2\6\1\71\1\6\2\0\4\71\1\0"+
    "\1\6\1\0\1\71\3\0\1\71\1\72\1\73\3\0"+
    "\1\71\2\0\11\71\1\0\2\71\1\6\1\71\2\6"+
    "\6\71\1\6\5\71\2\0\5\71\2\6\1\71\1\6"+
    "\2\0\4\71\1\0\1\6\1\0\1\71\3\0\1\74"+
    "\1\72\1\73\3\0\1\71\2\0\11\71\1\0\2\71"+
    "\1\6\1\71\2\6\6\71\1\6\5\71\2\0\2\71"+
    "\1\0\6\5\2\0\1\70\2\5\1\46\1\0\1\5"+
    "\5\0\1\5\1\0\1\75\6\0\7\5\1\76\1\5"+
    "\1\0\1\5\1\77\1\100\1\46\2\100\14\5\2\0"+
    "\2\5\7\101\1\102\1\103\1\104\63\101\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\4\5\1\105\4\5\1\0\12\5\2\106"+
    "\6\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\46\1\0\1\107\6\0\7\5"+
    "\1\110\1\5\1\0\1\5\1\111\20\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\2\5\1\46\1\0\1\5"+
    "\5\0\1\5\1\0\1\112\6\0\1\5\2\113\5\5"+
    "\1\114\1\0\1\5\1\115\1\100\1\46\2\100\14\5"+
    "\2\0\2\5\10\16\1\116\1\117\3\16\1\120\57\16"+
    "\21\0\1\20\47\0\1\20\6\0\2\121\1\0\1\121"+
    "\7\0\1\121\32\0\1\121\1\0\2\121\6\0\1\121"+
    "\12\0\6\5\2\0\1\70\2\5\1\46\1\0\1\5"+
    "\5\0\1\122\1\0\1\5\6\0\4\5\1\123\3\5"+
    "\1\124\1\0\2\5\1\100\1\46\2\100\4\5\2\125"+
    "\1\5\1\126\4\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\7\5\1\127\1\5\1\0\1\5\1\130\20\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\1\131\1\132"+
    "\1\5\1\0\1\5\5\0\1\46\1\0\1\133\6\0"+
    "\1\134\6\5\1\135\1\5\1\0\10\5\1\46\5\5"+
    "\1\132\3\5\2\0\1\134\1\5\1\0\2\5\2\46"+
    "\1\5\1\46\2\0\1\70\1\136\2\5\1\0\1\137"+
    "\5\0\1\5\1\0\1\5\6\0\10\5\1\140\1\0"+
    "\1\141\1\142\1\46\1\5\2\46\6\5\1\46\5\5"+
    "\2\0\1\5\1\141\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\46\5\0\1\5\1\0\1\143\6\0\1\144"+
    "\2\145\1\146\4\5\1\147\1\0\1\5\1\150\1\46"+
    "\1\5\2\46\14\5\2\0\1\144\1\5\1\0\6\5"+
    "\2\0\1\70\1\5\1\151\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\1\5\1\152"+
    "\1\46\1\5\2\46\2\5\1\153\5\5\1\151\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\5\5\2\46"+
    "\2\5\1\0\12\5\2\154\6\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\3\5\1\0\1\46\5\0\1\46"+
    "\1\0\1\155\6\0\7\5\1\156\1\5\1\0\2\5"+
    "\1\46\1\5\1\46\3\5\1\157\11\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\1\160\10\5\1\0\1\5"+
    "\1\161\20\5\2\0\1\160\1\5\1\0\3\5\1\46"+
    "\2\5\2\0\1\70\2\5\1\46\1\0\1\46\5\0"+
    "\1\5\1\0\1\5\6\0\10\5\1\162\1\0\2\5"+
    "\1\100\1\46\2\100\1\163\3\5\2\164\1\46\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\10\5\1\165"+
    "\1\0\2\5\1\46\1\5\2\46\2\5\1\166\1\46"+
    "\10\5\2\0\2\5\1\0\6\5\2\0\1\70\1\5"+
    "\1\167\1\46\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\2\5\1\100\1\46\2\100\10\5"+
    "\1\167\3\5\2\0\2\5\1\0\4\5\1\150\1\5"+
    "\2\0\1\70\1\170\1\46\1\171\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\1\141\4\5\2\46\2\5"+
    "\1\0\3\5\1\171\12\5\1\46\3\5\2\0\1\141"+
    "\1\5\1\0\4\5\1\46\1\5\2\0\1\70\1\172"+
    "\2\5\1\0\1\5\5\0\1\5\1\0\1\46\6\0"+
    "\7\5\1\173\1\5\1\0\10\5\1\174\11\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\10\5"+
    "\1\175\11\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\1\5\1\176\20\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\177\6\0\11\5\1\0\22\5\2\0\2\5"+
    "\10\47\1\0\12\47\1\0\17\47\1\0\27\47\2\0"+
    "\10\47\1\0\12\47\1\0\12\47\2\200\3\47\1\0"+
    "\27\47\2\0\10\47\1\0\12\47\1\0\12\47\2\201"+
    "\3\47\1\0\1\202\26\47\40\0\2\203\4\0\1\204"+
    "\30\0\10\47\1\0\12\47\1\0\17\47\1\0\3\47"+
    "\1\205\23\47\1\0\1\206\36\0\2\207\104\0\1\206"+
    "\24\0\1\206\10\60\1\0\32\60\1\0\27\60\2\0"+
    "\10\60\1\0\25\60\2\210\3\60\1\0\27\60\2\0"+
    "\10\60\1\0\25\60\2\211\3\60\1\0\1\212\26\60"+
    "\40\0\2\213\4\0\1\214\30\0\10\60\1\0\32\60"+
    "\1\0\3\60\1\215\23\60\1\0\1\216\36\0\2\217"+
    "\104\0\1\216\24\0\1\216\12\0\1\220\62\0\7\71"+
    "\2\0\4\71\1\0\1\71\1\0\1\71\3\0\1\71"+
    "\1\0\1\71\3\0\1\71\2\0\11\71\1\0\22\71"+
    "\2\0\5\71\2\221\1\71\1\221\2\0\4\71\1\0"+
    "\1\221\1\0\1\71\3\0\1\71\1\0\1\71\1\222"+
    "\2\0\1\71\2\0\11\71\1\0\2\71\1\221\1\71"+
    "\2\221\6\71\1\221\5\71\2\0\5\71\4\223\2\0"+
    "\3\71\1\223\1\0\1\223\1\0\1\71\3\0\1\71"+
    "\1\0\1\223\3\0\1\71\2\0\5\71\2\223\2\71"+
    "\1\0\1\71\6\223\5\71\1\223\5\71\2\0\2\71"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\5\5\2\224\2\5\1\0"+
    "\1\5\1\225\20\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\4\5\1\226\4\5\1\0\22\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\1\5\1\227\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\1\5\2\230"+
    "\6\5\1\0\16\5\1\227\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\2\5\1\46\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\3\5\1\46"+
    "\16\5\2\0\2\5\7\231\1\232\1\0\64\231\7\0"+
    "\1\232\65\0\4\231\1\233\1\231\1\234\1\235\1\0"+
    "\1\101\1\236\3\101\1\233\20\231\1\101\3\231\1\101"+
    "\5\231\1\233\1\231\1\233\1\234\5\231\1\101\1\234"+
    "\11\231\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\1\5\2\237\6\5"+
    "\1\0\22\5\2\0\2\5\1\0\4\5\1\46\1\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\3\5\1\240\5\5\1\0\6\5\1\241"+
    "\13\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\7\5\1\242\12\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\12\5\2\243\6\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\1\5\2\244\6\5"+
    "\1\0\7\5\1\146\12\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\245\6\0\11\5\1\0\22\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\1\246\2\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\1\5\1\247"+
    "\20\5\2\0\2\5\1\0\6\5\2\0\1\70\1\250"+
    "\2\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\6\5\1\251\13\5\2\0\2\5\11\116"+
    "\1\252\3\116\1\253\63\116\1\16\1\116\2\16\1\0"+
    "\1\16\1\254\4\16\20\116\1\16\3\116\1\16\5\116"+
    "\1\16\1\116\2\16\5\116\2\16\11\116\3\71\2\121"+
    "\1\71\1\121\2\0\4\71\1\0\1\121\1\0\1\71"+
    "\3\0\1\71\1\0\1\73\3\0\1\71\2\0\11\71"+
    "\1\0\2\71\1\121\1\71\2\121\6\71\1\121\5\71"+
    "\2\0\2\71\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\3\5\1\255"+
    "\5\5\1\0\22\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\6\5\1\256\13\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\4\5\1\246\4\5\1\0"+
    "\22\5\2\0\2\5\1\0\4\5\1\46\1\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\1\5\1\257\20\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\260\6\0\11\5\1\0\22\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\7\5"+
    "\1\261\12\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\3\5\1\262\5\5\1\0\22\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\1\5\1\263\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\16\5"+
    "\1\263\3\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\1\246\2\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\22\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\1\5\1\264\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\16\5\1\264"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\173\6\0\11\5"+
    "\1\0\22\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\11\5\1\265\10\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\10\5\1\266\1\0\22\5\2\0"+
    "\2\5\1\0\3\5\1\46\2\5\2\0\1\70\3\5"+
    "\1\0\1\46\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\2\5\1\46\1\5\2\46\6\5\1\46\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\1\5\1\267\20\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\11\5\1\46\10\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\1\5\1\270\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\16\5\1\270\3\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\1\5\1\271\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\16\5\1\271\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\10\5\1\272\11\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\10\5\1\273\11\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\7\5\1\173\1\5\1\0"+
    "\22\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\10\5\1\157\11\5\2\0\2\5\1\0\4\5"+
    "\1\46\1\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\22\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\10\5"+
    "\1\141\11\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\4\5\1\272\3\5\1\124\1\0\22\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\1\5\1\274\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\10\5\1\275"+
    "\1\0\16\5\1\274\3\5\2\0\2\5\1\0\4\5"+
    "\1\276\1\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\1\5\2\277\6\5\1\0"+
    "\6\5\1\300\6\5\1\301\4\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\5\5\2\272\2\5\1\0\1\5"+
    "\1\302\20\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\7\5\1\242\2\5\2\246\6\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\1\46"+
    "\21\5\2\0\1\5\1\46\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\7\5\1\303\1\5\1\0\22\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\1\5\1\304\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\7\5\1\272\1\5"+
    "\1\0\16\5\1\304\3\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\1\305\1\306\20\5\2\0"+
    "\1\5\1\305\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\1\5\2\307"+
    "\6\5\1\0\22\5\2\0\2\5\1\0\4\5\1\46"+
    "\1\5\2\0\1\70\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\1\5\1\310\20\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\10\5\1\311\11\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\10\5\1\312\1\0\12\5\2\313\6\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\134\6\0\11\5\1\0\22\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\1\5\2\314"+
    "\6\5\1\0\22\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\4\5\1\315\4\5\1\0\21\5\1\316\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\1\5\2\246\6\5"+
    "\1\0\22\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\12\5\2\46\6\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\1\5\2\317\6\5\1\0\22\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\1\5\1\320"+
    "\1\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\1\5\2\321\6\5\1\0\12\5\2\246\2\5\1\320"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\70\1\5"+
    "\1\322\1\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\16\5\1\322\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\10\5\1\275\1\0\22\5"+
    "\2\0\2\5\10\47\1\0\12\47\1\0\12\47\2\323"+
    "\3\47\1\0\27\47\2\0\10\47\1\0\12\47\1\0"+
    "\14\47\1\324\2\47\1\0\27\47\2\0\10\47\1\0"+
    "\12\47\1\0\17\47\1\0\1\47\1\325\25\47\42\0"+
    "\1\326\101\0\1\327\27\0\10\47\1\0\12\47\1\0"+
    "\17\47\1\0\3\47\1\330\23\47\1\0\1\331\47\0"+
    "\1\331\24\0\1\331\36\0\2\332\35\0\10\60\1\0"+
    "\25\60\2\333\3\60\1\0\27\60\2\0\10\60\1\0"+
    "\27\60\1\334\2\60\1\0\27\60\2\0\10\60\1\0"+
    "\32\60\1\0\1\60\1\335\25\60\42\0\1\336\101\0"+
    "\1\337\27\0\10\60\1\0\32\60\1\0\3\60\1\340"+
    "\23\60\1\0\1\341\47\0\1\341\24\0\1\341\36\0"+
    "\2\342\40\0\4\343\5\0\1\343\1\0\1\343\7\0"+
    "\1\343\13\0\2\343\4\0\6\343\5\0\1\343\11\0"+
    "\3\71\2\221\1\71\1\221\2\0\4\71\1\0\1\221"+
    "\1\0\1\71\3\0\1\71\1\0\1\71\3\0\1\71"+
    "\2\0\11\71\1\0\2\71\1\221\1\71\2\221\6\71"+
    "\1\221\5\71\2\0\2\71\3\0\2\221\1\0\1\221"+
    "\7\0\1\221\32\0\1\221\1\0\2\221\6\0\1\221"+
    "\12\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\7\5\1\344\1\5\1\0"+
    "\22\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\6\5\1\163\13\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\1\5\1\257\20\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\20\5"+
    "\1\46\1\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\1\5\1\345\20\5\2\0\2\5\7\231"+
    "\1\102\1\0\70\231\1\234\1\231\1\234\1\232\1\0"+
    "\5\231\1\234\32\231\1\234\1\231\2\234\6\231\1\234"+
    "\15\231\1\101\1\231\1\101\1\232\1\0\5\231\1\101"+
    "\32\231\1\101\1\231\2\101\6\231\1\101\14\231\4\346"+
    "\1\102\1\0\3\231\1\346\1\231\1\346\7\231\1\346"+
    "\13\231\2\346\4\231\6\346\5\231\1\346\11\231\1\0"+
    "\6\5\2\0\1\70\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\7\5\1\347\1\5\1\0\22\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\350\6\0\11\5\1\0"+
    "\22\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\351\6\0\11\5"+
    "\1\0\22\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\1\272\10\5\1\0\22\5\2\0\1\272\1\5\1\0"+
    "\4\5\1\151\1\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\22\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\1\167\21\5\2\0\1\5\1\167\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\12\5\2\352\6\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\46\6\0\11\5\1\0\22\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\6\5"+
    "\1\227\13\5\2\0\2\5\1\0\4\5\1\353\1\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\22\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\20\5\1\274\1\5"+
    "\2\0\2\5\10\116\1\0\67\116\4\354\2\116\1\252"+
    "\2\116\1\354\1\253\1\354\7\116\1\354\13\116\2\354"+
    "\4\116\6\354\5\116\1\354\11\116\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\10\5\1\355\1\0\22\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\1\5\1\356\20\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\2\5\1\357"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\3\5\1\357\16\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\12\5\2\360\6\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\1\46\10\5\1\0"+
    "\22\5\2\0\1\46\1\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\3\5\1\267\5\5\1\0\22\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\12\5\2\361\6\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\11\5\1\362\10\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\363"+
    "\6\0\11\5\1\0\22\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\4\5\1\364\3\5\1\365\1\0\22\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\17\5\1\46\2\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\7\5\1\366\1\5\1\0\22\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\7\5\1\367\1\5\1\0"+
    "\15\5\1\370\4\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\1\5\2\46\6\5\1\0\22\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\3\5\1\345\5\5\1\0"+
    "\22\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\1\371\21\5\2\0\1\5\1\371\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\10\5\1\147\1\0\22\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\372\6\0\11\5\1\0\22\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\373\6\0\11\5\1\0\22\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\10\5\1\374"+
    "\1\0\22\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\375\6\0"+
    "\11\5\1\0\22\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\1\5\1\376\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\16\5\1\376\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\1\5\2\246"+
    "\5\5\1\246\1\0\22\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\12\5\2\377\6\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\1\5"+
    "\1\u0100\20\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\1\5\1\141\1\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\16\5\1\141\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\7\5\1\u0101\1\5"+
    "\1\0\22\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\10\5\1\u0102\1\0\22\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\6\5\1\u0103\13\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\10\5\1\u0104\1\0"+
    "\10\5\1\u0105\11\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\5\5\2\u0106\2\5\1\0\22\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\3\5\1\u0107\5\5\1\0"+
    "\22\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\1\5"+
    "\2\u0108\6\5\1\0\22\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\u0109\6\0\11\5\1\0\22\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\10\5\1\u010a\11\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\11\5\1\367\10\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\7\5\1\u010b\1\5\1\0\22\5\2\0\2\5"+
    "\10\47\1\0\12\47\1\0\14\47\1\u010c\2\47\1\0"+
    "\27\47\2\0\10\47\1\0\12\47\1\0\17\47\1\0"+
    "\2\47\1\u010d\24\47\2\0\10\47\1\0\12\47\1\0"+
    "\2\47\1\324\14\47\1\0\27\47\50\0\1\u010e\54\0"+
    "\1\326\46\0\10\47\1\0\12\47\1\0\1\47\1\u010f"+
    "\15\47\1\0\27\47\27\0\1\u0110\107\0\1\u0111\34\0"+
    "\10\60\1\0\27\60\1\u0112\2\60\1\0\27\60\2\0"+
    "\10\60\1\0\32\60\1\0\2\60\1\u0113\24\60\2\0"+
    "\10\60\1\0\15\60\1\334\14\60\1\0\27\60\50\0"+
    "\1\u0114\54\0\1\336\46\0\10\60\1\0\14\60\1\u0115"+
    "\15\60\1\0\27\60\27\0\1\u0116\107\0\1\u0117\37\0"+
    "\4\u0118\5\0\1\u0118\1\0\1\u0118\7\0\1\u0118\13\0"+
    "\2\u0118\4\0\6\u0118\5\0\1\u0118\12\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\12\5\2\u0119\6\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\2\5\1\u011a\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\3\5"+
    "\1\u011a\16\5\2\0\2\5\3\231\4\u011b\1\102\1\0"+
    "\3\231\1\u011b\1\231\1\u011b\7\231\1\u011b\13\231\2\u011b"+
    "\4\231\6\u011b\5\231\1\u011b\11\231\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\10\5\1\46\1\0\22\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\1\5\1\272\20\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\7\5\1\u011c"+
    "\1\5\1\0\22\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\1\5\2\u011d\6\5\1\0\22\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\1\5\1\u011e\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\16\5\1\u011e\3\5\2\0\2\5\3\116\4\u011f\2\116"+
    "\1\252\2\116\1\u011f\1\253\1\u011f\7\116\1\u011f\13\116"+
    "\2\u011f\4\116\6\u011f\5\116\1\u011f\11\116\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\10\5\1\u0120\11\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\3\5\1\246\5\5"+
    "\1\0\22\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\10\5\1\246\1\0\22\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\22\5\1\u0121\1\0\2\5"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\7\5\1\u0122\1\5\1\0"+
    "\22\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\4\5"+
    "\1\46\4\5\1\0\22\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\146\6\0\11\5\1\0\22\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\1\u0123\2\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\22\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\1\5\2\267\6\5"+
    "\1\0\22\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\1\5\1\347\20\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\10\5\1\u0124\11\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\1\5\1\u0125\20\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\5\5\2\u0126\2\5\1\0\22\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\1\5\1\u0127\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\16\5\1\u0127\3\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\1\u0128\2\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\22\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\1\5\1\u0129\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\16\5"+
    "\1\u0129\3\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\12\5\2\u012a\6\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\7\5\1\u012b\1\5\1\0\22\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\17\5\1\363\2\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\15\5\1\u011e\4\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\10\5\1\u012c"+
    "\11\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\20\5\1\u012d\1\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\u012e\6\0\11\5\1\0\22\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\1\5\1\46\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\16\5"+
    "\1\46\3\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\7\5\1\u012c\1\5\1\0\22\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\1\u012f\2\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\22\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\1\5"+
    "\1\u0130\20\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\6\5\1\272\13\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\1\5\1\u0131\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\16\5"+
    "\1\u0131\3\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\1\5\1\u0132\20\5\2\0\2\5\10\47"+
    "\1\0\12\47\1\0\15\47\1\324\1\47\1\0\2\47"+
    "\1\u010d\24\47\2\0\10\47\1\0\12\47\1\0\10\47"+
    "\1\u0133\6\47\1\0\27\47\36\0\1\u0134\40\0\1\47"+
    "\7\u010f\1\0\1\47\3\u010f\1\47\1\u010f\1\47\1\u010f"+
    "\2\47\1\0\17\u010f\1\u0110\25\u010f\2\47\2\u0110\1\0"+
    "\1\u0110\1\u0135\4\u0110\1\u0135\2\0\3\u0110\1\0\1\u0110"+
    "\1\0\1\u0135\3\0\1\u0110\1\u0135\1\u0110\5\u0135\12\u0110"+
    "\1\u0135\22\u0110\2\0\2\u0110\41\0\1\326\4\0\1\u010e"+
    "\26\0\10\60\1\0\30\60\1\334\1\60\1\0\2\60"+
    "\1\u0113\24\60\2\0\10\60\1\0\23\60\1\u0136\6\60"+
    "\1\0\27\60\36\0\1\u0137\40\0\1\60\7\u0115\1\0"+
    "\1\60\3\u0115\1\60\1\u0115\1\60\1\u0115\3\60\17\u0115"+
    "\1\u0116\25\u0115\2\60\2\u0116\1\0\1\u0116\1\u0138\4\u0116"+
    "\1\u0138\2\0\3\u0116\1\0\1\u0116\1\0\1\u0138\3\0"+
    "\1\u0116\1\u0138\1\u0116\5\u0138\12\u0116\1\u0138\22\u0116\2\0"+
    "\2\u0116\41\0\1\336\4\0\1\u0114\31\0\4\u0139\5\0"+
    "\1\u0139\1\0\1\u0139\7\0\1\u0139\13\0\2\u0139\4\0"+
    "\6\u0139\5\0\1\u0139\12\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\u012a\6\0\11\5"+
    "\1\0\22\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\7\5\1\u013a\1\5\1\0\22\5\2\0\2\5\3\231"+
    "\4\u013b\1\102\1\0\3\231\1\u013b\1\231\1\u013b\7\231"+
    "\1\u013b\13\231\2\u013b\4\231\6\u013b\5\231\1\u013b\11\231"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\15\5\1\u013c"+
    "\4\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\u0105\6\0\11\5"+
    "\1\0\22\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\1\5\1\172\20\5\2\0\2\5\3\116"+
    "\4\u013d\2\116\1\252\2\116\1\u013d\1\253\1\u013d\7\116"+
    "\1\u013d\13\116\2\u013d\4\116\6\u013d\5\116\1\u013d\11\116"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\4\5\1\u013e\4\5\1\0"+
    "\22\5\2\0\2\5\57\0\1\u013f\16\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\12\5\2\367\6\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\3\5\1\46\5\5\1\0"+
    "\22\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\46\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\2\5\1\46\17\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\1\5\1\150\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\16\5\1\150"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\7\5"+
    "\1\u0140\1\5\1\0\22\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\15\5\1\367\4\5\2\0"+
    "\2\5\1\0\4\5\1\246\1\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\22\5\2\0\2\5\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\1\5\2\u013c\6\5\1\0\22\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\70\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\12\5\2\u012c\6\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\7\5\1\46\12\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\3\5\1\u0141\5\5\1\0\22\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\6\5\1\u0142"+
    "\13\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\1\5"+
    "\2\u0143\6\5\1\0\22\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\6\5\1\357\13\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\70\2\5\1\u0144\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\3\5\1\u0144\16\5\2\0\2\5\10\47\1\0\12\47"+
    "\1\0\10\47\1\u010f\6\47\1\0\27\47\36\0\1\u0110"+
    "\40\0\10\60\1\0\23\60\1\u0115\6\60\1\0\27\60"+
    "\36\0\1\u0116\43\0\4\5\5\0\1\5\1\0\1\5"+
    "\7\0\1\5\13\0\2\5\4\0\6\5\5\0\1\5"+
    "\12\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\1\5\2\363\6\5\1\0"+
    "\22\5\2\0\2\5\3\231\4\101\1\102\1\0\3\231"+
    "\1\101\1\231\1\101\7\231\1\101\13\231\2\101\4\231"+
    "\6\101\5\231\1\101\11\231\1\0\6\5\2\0\1\70"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\150\6\0"+
    "\11\5\1\0\22\5\2\0\2\5\3\116\4\16\2\116"+
    "\1\252\2\116\1\16\1\253\1\16\7\116\1\16\13\116"+
    "\2\16\4\116\6\16\5\116\1\16\11\116\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\7\5\1\u0145\1\5\1\0\22\5\2\0"+
    "\2\5\42\0\2\u0146\15\0\2\u0147\13\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\12\5\2\u0148\6\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\70\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\10\5\1\347"+
    "\11\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\1\5"+
    "\2\u0149\6\5\1\0\22\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\70\3\5\1\0\1\46\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\2\5\1\46\1\5\2\46"+
    "\14\5\2\0\2\5\1\0\6\5\2\0\1\70\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\10\5"+
    "\1\u0119\1\0\22\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\70\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\10\5\1\173\11\5\2\0\2\5"+
    "\42\0\2\u0147\32\0\6\5\2\0\1\70\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\7\5\1\172"+
    "\1\5\1\0\22\5\2\0\2\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18544];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };
  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\5\1\1\11\4\1\1\11\1\1\2\11"+
    "\2\1\1\11\22\1\2\11\7\1\1\11\6\1\1\0"+
    "\1\1\1\0\7\1\1\11\1\0\14\1\1\11\62\1"+
    "\2\0\1\1\2\0\3\1\2\0\1\1\3\0\1\1"+
    "\1\0\7\1\1\11\20\1\1\11\52\1\2\0\1\1"+
    "\2\0\3\1\2\0\1\1\3\0\52\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\2\0\10\1\1\0\22\1"+
    "\2\0\1\1\3\0\5\1\1\0\6\1\1\0\1\11"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;
  /** the current state of the DFA */
  private int zzState;
  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;
  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  /** the current text position in the buffer */
  private int zzCurrentPos;
  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;
  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;
  /** number of newlines encountered up to the start of the matched text */
  private int yyline;
  /** the number of characters up to the start of the matched text */
  private int yychar;
  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;
  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;
  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;
  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public LEGAL3MakerTokenMakerEng() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LEGAL3MakerTokenMakerEng(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LEGAL3MakerTokenMakerEng(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }
    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */
    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }
  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }
  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }
  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }
  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }
  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }
    throw new Error(message);
  } 
  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);
    zzMarkedPos -= number;
  }
  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;
    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;
    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    while (true) {
      zzMarkedPosL = zzMarkedPos;
      zzAction = -1;
      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }
        }
      }
      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 26: break;
        case 21: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 27: break;
        case 14: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1-1, Token.COMMENT_MULTILINE);
          }
        case 28: break;
        case 8: 
          { addToken(Token.WHITESPACE);
          }
        case 29: break;
        case 20: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 30: break;
        case 22: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 31: break;
        case 19: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 32: break;
        case 3: 
          { addToken(Token.RESERVED_WORD);
          }
        case 33: break;
        case 10: 
          { addToken(Token.SEPARATOR);
          }
        case 34: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 35: break;
        case 15: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 36: break;
        case 4: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 37: break;
        case 6: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 38: break;
        case 25: 
          { addToken(Token.DATA_TYPE);
          }
        case 39: break;
        case 17: 
          { addToken(Token.ERROR_CHAR);
          }
        case 40: break;
        case 18: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 41: break;
        case 24: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 42: break;
        case 23: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 43: break;
        case 16: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 44: break;
        case 7: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 45: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 46: break;
        case 11: 
          { addToken(Token.OPERATOR);
          }
        case 47: break;
        case 9: 
          { start = zzMarkedPos-1; yybegin(MLC);
          }
        case 48: break;
        case 12: 
          { 
          }
        case 49: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 50: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 330: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 331: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 332: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }
  
	public boolean getShouldIndentNextLineAfter(Token t) {
		if (t!=null) {
			if (t.length()==1) {
				char ch = t.getTextArray()[t.getTextOffset()];
				return ch=='[';
			}
			if (t.length()>1) {
				return t.getLexeme().equalsIgnoreCase("begin");
			}
		}
		return false;
	}
}