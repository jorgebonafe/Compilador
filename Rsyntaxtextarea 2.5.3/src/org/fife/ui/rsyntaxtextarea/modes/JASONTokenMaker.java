/* The following code was generated by JFlex 1.4.1 on 12/03/16 19:55 */

/*
 * Generated on 3/12/16 7:55 PM
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Arquivo de sintaxe da linguagem JASON.
 */

public class JASONTokenMaker extends AbstractJFlexCTokenMaker {
  /** This character denotes the end of file */
  public static final int YYEOF = -1;
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\10\1\0\1\20\1\16\22\0\1\20\1\30\1\15"+
    "\1\17\1\1\1\32\1\30\1\7\2\27\1\32\1\26\1\30\1\26"+
    "\1\24\1\33\1\4\3\6\4\6\2\3\1\45\1\30\1\63\1\32"+
    "\1\63\1\30\1\31\1\47\1\5\1\54\1\56\1\25\1\41\1\57"+
    "\1\34\1\43\2\1\1\44\1\60\1\53\1\55\1\37\1\1\1\50"+
    "\1\40\1\35\1\12\1\61\1\46\1\23\1\52\1\62\1\27\1\11"+
    "\1\27\1\16\1\2\1\0\1\47\1\14\1\54\1\56\1\25\1\42"+
    "\1\57\1\64\1\43\2\1\1\44\1\60\1\13\1\55\1\37\1\1"+
    "\1\51\1\40\1\36\1\12\1\61\1\65\1\23\1\52\1\62\1\21"+
    "\1\16\1\22\1\30\101\0\20\1\1\0\6\1\1\0\6\1\1\0"+
    "\7\1\1\0\11\1\1\0\6\1\1\0\6\1\1\0\1\1\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\2\1\1\11\13\1\1\12\1\13"+
    "\1\14\7\12\1\15\6\12\1\0\1\16\1\0\2\16"+
    "\3\1\2\4\1\17\1\20\14\1\1\21\10\1\3\12"+
    "\2\0\1\12\2\0\3\12\2\0\1\12\3\0\1\20"+
    "\1\0\1\22\3\1\1\4\1\23\1\4\1\21\20\1"+
    "\1\21\3\12\2\0\1\12\2\0\3\12\2\0\1\12"+
    "\3\0\1\1\1\4\16\1\2\12\1\0\1\12\1\24"+
    "\1\0\2\12\1\0\1\12\1\25\2\0\1\1\1\4"+
    "\11\1\1\12\2\0\1\12\3\0\1\1\1\4\3\1"+
    "\1\26\2\1\1\21\4\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\242\0\u01b0\0\u01e6\0\242\0\u021c\0\242\0\242\0\u0252"+
    "\0\u0288\0\242\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc"+
    "\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\242\0\242"+
    "\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\242"+
    "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a"+
    "\0\u0252\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\242\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e"+
    "\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\330\0\u0ca8"+
    "\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8"+
    "\0\u11ee\0\u1224\0\u08a6\0\u125a\0\u1290\0\u12c6\0\u12fc\0\242"+
    "\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac"+
    "\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c"+
    "\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc"+
    "\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c"+
    "\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c"+
    "\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc"+
    "\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c"+
    "\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c"+
    "\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u1f02\0\u23a6"+
    "\0\u23dc\0\u2046\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520"+
    "\0\330\0\u2556\0\u258c\0\u1ba2\0\u25c2\0\u25f8\0\u262e\0\u2664";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\6\1\4\1\11"+
    "\1\4\1\12\1\5\1\10\1\13\1\4\1\14\1\15"+
    "\1\16\1\17\1\5\1\20\1\21\1\22\1\17\2\4"+
    "\2\22\1\5\2\23\1\24\1\25\2\26\1\27\1\5"+
    "\1\4\1\30\1\31\2\32\2\5\1\33\1\5\1\34"+
    "\2\5\1\35\1\5\1\22\1\5\1\30\10\36\1\37"+
    "\11\36\1\40\11\36\1\41\4\36\1\42\1\43\3\36"+
    "\1\44\15\36\1\45\1\46\10\47\1\50\23\47\1\51"+
    "\4\47\1\52\1\53\3\47\1\54\15\47\1\55\1\56"+
    "\67\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\15\5\1\0\2\5\3\60"+
    "\2\6\1\60\1\6\2\0\4\60\2\0\1\60\3\0"+
    "\1\60\1\61\1\62\3\0\1\60\2\0\11\60\1\0"+
    "\15\60\1\0\5\60\2\6\1\60\1\6\2\0\4\60"+
    "\2\0\1\60\3\0\1\63\1\61\1\62\3\0\1\60"+
    "\2\0\11\60\1\0\15\60\1\0\2\60\1\0\6\5"+
    "\2\0\1\57\3\5\6\0\1\5\1\0\1\64\6\0"+
    "\11\5\1\0\7\5\1\65\5\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\57\1\5\1\66\1\5\6\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\5\5\1\66\7\5"+
    "\1\0\2\5\10\13\1\67\1\70\3\13\1\71\50\13"+
    "\20\0\1\15\50\0\2\72\1\0\1\72\60\0\6\5"+
    "\2\0\1\57\1\5\1\73\1\5\6\0\1\5\1\0"+
    "\1\5\6\0\10\5\1\74\1\0\5\5\1\73\7\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\57\3\5\6\0"+
    "\1\5\1\0\1\5\6\0\1\75\10\5\1\0\2\5"+
    "\2\76\1\77\10\5\1\0\1\75\1\5\1\0\6\5"+
    "\2\0\1\57\3\5\6\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\1\5\1\100\2\101\11\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\102\6\0\1\5\2\103\6\5\1\0\15\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\57\1\104\2\5\6\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\1\5\1\105"+
    "\13\5\1\0\2\5\1\0\6\5\2\0\1\57\1\5"+
    "\1\106\1\5\6\0\1\5\1\0\1\5\6\0\5\5"+
    "\2\107\2\5\1\0\5\5\1\106\7\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\5\6\0\1\110\10\5\1\0\2\5\2\111\11\5"+
    "\1\0\1\110\1\5\1\0\6\5\2\0\1\57\3\5"+
    "\6\0\1\5\1\0\1\5\6\0\11\5\1\0\2\5"+
    "\2\112\11\5\1\0\2\5\1\0\6\5\2\0\1\57"+
    "\3\5\6\0\1\5\1\0\1\113\6\0\11\5\1\0"+
    "\15\5\1\0\2\5\1\0\6\5\2\0\1\57\3\5"+
    "\6\0\1\5\1\0\1\5\6\0\11\5\1\0\1\5"+
    "\1\114\13\5\1\0\2\5\1\0\6\5\2\0\1\57"+
    "\3\5\6\0\1\5\1\0\1\115\6\0\11\5\1\0"+
    "\7\5\1\107\5\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\57\3\5\6\0\1\5\1\0\1\116\6\0\11\5"+
    "\1\0\1\5\1\117\13\5\1\0\2\5\10\36\1\0"+
    "\11\36\1\0\17\36\1\0\21\36\2\0\10\36\1\0"+
    "\11\36\1\0\12\36\2\120\3\36\1\0\21\36\2\0"+
    "\10\36\1\0\11\36\1\0\12\36\2\121\3\36\1\0"+
    "\1\122\20\36\37\0\2\123\4\0\1\124\22\0\10\36"+
    "\1\0\11\36\1\0\17\36\1\0\3\36\1\125\15\36"+
    "\1\0\1\126\35\0\2\127\75\0\1\126\16\0\1\126"+
    "\10\47\1\0\31\47\1\0\21\47\2\0\10\47\1\0"+
    "\24\47\2\130\3\47\1\0\21\47\2\0\10\47\1\0"+
    "\24\47\2\131\3\47\1\0\1\132\20\47\37\0\2\133"+
    "\4\0\1\134\22\0\10\47\1\0\31\47\1\0\3\47"+
    "\1\135\15\47\1\0\1\136\35\0\2\137\75\0\1\136"+
    "\16\0\1\136\12\0\1\140\53\0\7\60\2\0\4\60"+
    "\2\0\1\60\3\0\1\60\1\0\1\60\3\0\1\60"+
    "\2\0\11\60\1\0\15\60\1\0\5\60\2\141\1\60"+
    "\1\141\2\0\4\60\2\0\1\60\3\0\1\60\1\0"+
    "\1\60\1\142\2\0\1\60\2\0\11\60\1\0\15\60"+
    "\1\0\5\60\4\143\2\0\3\60\1\143\2\0\1\60"+
    "\3\0\1\60\1\0\1\143\3\0\1\60\2\0\5\60"+
    "\2\143\2\60\1\0\1\60\1\143\4\60\1\143\1\60"+
    "\1\143\4\60\1\0\2\60\1\0\6\5\2\0\1\57"+
    "\3\5\6\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\11\5\1\144\3\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\57\3\5\6\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\7\5\1\145\5\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\57\3\5\6\0\1\5\1\0\1\5\6\0"+
    "\1\5\2\146\6\5\1\0\15\5\1\0\2\5\11\67"+
    "\1\147\3\67\1\150\54\67\1\13\1\67\2\13\1\0"+
    "\1\13\1\151\3\13\20\67\1\13\3\67\1\13\6\67"+
    "\1\13\14\67\3\60\2\72\1\60\1\72\2\0\4\60"+
    "\2\0\1\60\3\0\1\60\1\0\1\62\3\0\1\60"+
    "\2\0\11\60\1\0\15\60\1\0\2\60\1\0\6\5"+
    "\2\0\1\57\3\5\6\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\10\5\1\152\4\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\57\3\5\6\0\1\5\1\0\1\5"+
    "\6\0\4\5\1\153\4\5\1\0\15\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\154\6\0\11\5\1\0\15\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\57\1\153\2\5\6\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\15\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\57\3\5\6\0\1\5\1\0\1\5"+
    "\6\0\3\5\1\155\5\5\1\0\15\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\2\5\2\156\11\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\57\3\5\6\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\7\5\1\157\5\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\57\3\5\6\0"+
    "\1\5\1\0\1\5\6\0\1\5\2\107\6\5\1\0"+
    "\15\5\1\0\2\5\1\0\6\5\2\0\1\57\3\5"+
    "\6\0\1\5\1\0\1\5\6\0\11\5\1\0\2\5"+
    "\2\160\11\5\1\0\2\5\1\0\6\5\2\0\1\57"+
    "\1\5\1\161\1\5\6\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\5\5\1\161\7\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\57\3\5\6\0\1\5\1\0\1\5"+
    "\6\0\10\5\1\74\1\0\15\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\57\3\5\6\0\1\5\1\0\1\5"+
    "\6\0\1\5\2\162\6\5\1\0\15\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\5\6\0\7\5\1\163\1\5\1\0\15\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\57\3\5\6\0\1\5"+
    "\1\0\1\5\6\0\7\5\1\164\1\5\1\0\15\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\57\3\5\6\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\2\5\2\165"+
    "\11\5\1\0\2\5\1\0\6\5\2\0\1\57\3\5"+
    "\6\0\1\5\1\0\1\5\6\0\1\5\2\166\6\5"+
    "\1\0\1\5\1\167\4\5\1\170\6\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\5\6\0\10\5\1\171\1\0\15\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\5\6\0\5\5\2\172\2\5\1\0\15\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\57\3\5\6\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\14\5\1\155\1\0"+
    "\2\5\1\0\6\5\2\0\1\57\3\5\6\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\2\5\2\173\11\5"+
    "\1\0\2\5\10\36\1\0\11\36\1\0\12\36\2\174"+
    "\3\36\1\0\21\36\2\0\10\36\1\0\11\36\1\0"+
    "\14\36\1\175\2\36\1\0\21\36\2\0\10\36\1\0"+
    "\11\36\1\0\17\36\1\0\1\36\1\176\17\36\41\0"+
    "\1\177\72\0\1\200\21\0\10\36\1\0\11\36\1\0"+
    "\17\36\1\0\3\36\1\201\15\36\1\0\1\202\46\0"+
    "\1\202\16\0\1\202\35\0\2\203\27\0\10\47\1\0"+
    "\24\47\2\204\3\47\1\0\21\47\2\0\10\47\1\0"+
    "\26\47\1\205\2\47\1\0\21\47\2\0\10\47\1\0"+
    "\31\47\1\0\1\47\1\206\17\47\41\0\1\207\72\0"+
    "\1\210\21\0\10\47\1\0\31\47\1\0\3\47\1\211"+
    "\15\47\1\0\1\212\46\0\1\212\16\0\1\212\35\0"+
    "\2\213\32\0\4\214\5\0\1\214\10\0\1\214\13\0"+
    "\2\214\4\0\1\214\4\0\1\214\1\0\1\214\7\0"+
    "\3\60\2\141\1\60\1\141\2\0\4\60\2\0\1\60"+
    "\3\0\1\60\1\0\1\60\3\0\1\60\2\0\11\60"+
    "\1\0\15\60\1\0\2\60\3\0\2\141\1\0\1\141"+
    "\60\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\5\6\0\7\5\1\154\1\5\1\0\15\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\57\3\5\6\0\1\5"+
    "\1\0\1\5\6\0\10\5\1\215\1\0\15\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\57\3\5\6\0\1\5"+
    "\1\0\1\5\6\0\7\5\1\171\1\5\1\0\15\5"+
    "\1\0\2\5\10\67\1\0\60\67\4\216\2\67\1\147"+
    "\2\67\1\216\1\150\7\67\1\216\13\67\2\216\4\67"+
    "\1\216\4\67\1\216\1\67\1\216\7\67\1\0\6\5"+
    "\2\0\1\57\1\12\2\5\6\0\1\5\1\0\1\5"+
    "\6\0\7\5\1\217\1\5\1\0\1\220\14\5\1\0"+
    "\1\5\1\220\1\0\6\5\2\0\1\57\3\5\6\0"+
    "\1\5\1\0\1\107\6\0\11\5\1\0\15\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\57\1\5\1\107\1\5"+
    "\6\0\1\5\1\0\1\5\6\0\11\5\1\0\5\5"+
    "\1\107\7\5\1\0\2\5\1\0\6\5\2\0\1\57"+
    "\3\5\6\0\1\5\1\0\1\221\6\0\11\5\1\0"+
    "\15\5\1\0\2\5\1\0\6\5\2\0\1\57\3\5"+
    "\6\0\1\5\1\0\1\5\6\0\11\5\1\0\1\5"+
    "\1\222\13\5\1\0\2\5\1\0\6\5\2\0\1\57"+
    "\3\5\6\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\6\5\1\223\2\5\1\224\3\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\57\3\5\6\0\1\5\1\0\1\5"+
    "\6\0\7\5\1\225\1\5\1\0\15\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\6\5\1\226\6\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\57\3\5\6\0\1\5"+
    "\1\0\1\227\6\0\11\5\1\0\15\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\5\6\0\10\5\1\153\1\0\15\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\5\6\0\1\5\2\153\6\5\1\0\15\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\57\3\5\6\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\1\5\1\230\13\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\57\1\231\2\5"+
    "\6\0\1\5\1\0\1\5\6\0\11\5\1\0\15\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\57\3\5\6\0"+
    "\1\5\1\0\1\5\6\0\10\5\1\107\1\0\10\5"+
    "\1\107\4\5\1\0\2\5\1\0\6\5\2\0\1\57"+
    "\3\5\6\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\7\5\1\232\5\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\57\3\5\6\0\1\5\1\0\1\5\6\0\10\5"+
    "\1\107\1\0\15\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\57\3\5\6\0\1\5\1\0\1\5\6\0\7\5"+
    "\1\233\1\5\1\0\15\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\57\3\5\6\0\1\5\1\0\1\5\6\0"+
    "\7\5\1\234\1\5\1\0\15\5\1\0\2\5\10\36"+
    "\1\0\11\36\1\0\14\36\1\235\2\36\1\0\21\36"+
    "\2\0\10\36\1\0\11\36\1\0\17\36\1\0\2\36"+
    "\1\236\16\36\2\0\10\36\1\0\11\36\1\0\2\36"+
    "\1\175\14\36\1\0\21\36\47\0\1\237\45\0\1\177"+
    "\40\0\10\36\1\0\11\36\1\0\1\36\1\240\15\36"+
    "\1\0\21\36\26\0\1\241\100\0\1\242\26\0\10\47"+
    "\1\0\26\47\1\243\2\47\1\0\21\47\2\0\10\47"+
    "\1\0\31\47\1\0\2\47\1\244\16\47\2\0\10\47"+
    "\1\0\14\47\1\205\14\47\1\0\21\47\47\0\1\245"+
    "\45\0\1\207\40\0\10\47\1\0\13\47\1\246\15\47"+
    "\1\0\21\47\26\0\1\247\100\0\1\250\31\0\4\251"+
    "\5\0\1\251\10\0\1\251\13\0\2\251\4\0\1\251"+
    "\4\0\1\251\1\0\1\251\10\0\6\5\2\0\1\57"+
    "\3\5\6\0\1\5\1\0\1\252\6\0\11\5\1\0"+
    "\15\5\1\0\2\5\3\67\4\253\2\67\1\147\2\67"+
    "\1\253\1\150\7\67\1\253\13\67\2\253\4\67\1\253"+
    "\4\67\1\253\1\67\1\253\7\67\1\0\6\5\2\0"+
    "\1\57\3\5\6\0\1\5\1\0\1\5\6\0\5\5"+
    "\2\107\2\5\1\0\15\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\57\3\5\6\0\1\5\1\0\1\5\6\0"+
    "\1\110\10\5\1\0\15\5\1\0\1\110\1\5\1\0"+
    "\6\5\2\0\1\57\3\5\6\0\1\5\1\0\1\5"+
    "\6\0\4\5\1\107\4\5\1\0\15\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\12\5\1\254\2\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\57\3\5\6\0\1\5"+
    "\1\0\1\255\6\0\11\5\1\0\15\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\2\5\2\256\11\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\57\1\5\1\257\1\5"+
    "\6\0\1\5\1\0\1\5\6\0\11\5\1\0\5\5"+
    "\1\257\7\5\1\0\2\5\1\0\6\5\2\0\1\57"+
    "\3\5\6\0\1\5\1\0\1\5\6\0\1\5\2\260"+
    "\6\5\1\0\15\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\57\3\5\6\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\11\5\1\261\3\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\57\3\5\6\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\4\5\1\107\10\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\57\3\5\6\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\2\5\2\262\11\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\2\5\2\263\11\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\57\1\5\1\153\1\5"+
    "\6\0\1\5\1\0\1\5\6\0\11\5\1\0\5\5"+
    "\1\153\7\5\1\0\2\5\1\0\6\5\2\0\1\57"+
    "\3\5\6\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\1\5\1\264\13\5\1\0\2\5\10\36\1\0\11\36"+
    "\1\0\15\36\1\175\1\36\1\0\2\36\1\236\16\36"+
    "\2\0\10\36\1\0\11\36\1\0\10\36\1\265\6\36"+
    "\1\0\21\36\35\0\1\266\32\0\1\36\7\240\1\0"+
    "\1\36\3\240\2\36\1\240\2\36\1\0\17\240\1\241"+
    "\20\240\1\36\2\241\1\0\1\241\1\267\4\241\1\267"+
    "\2\0\3\241\2\0\1\267\3\0\1\241\1\267\1\241"+
    "\5\267\12\241\1\267\15\241\1\0\2\241\40\0\1\177"+
    "\4\0\1\237\20\0\10\47\1\0\27\47\1\205\1\47"+
    "\1\0\2\47\1\244\16\47\2\0\10\47\1\0\22\47"+
    "\1\270\6\47\1\0\21\47\35\0\1\271\32\0\1\47"+
    "\7\246\1\0\1\47\3\246\2\47\1\246\3\47\17\246"+
    "\1\247\20\246\1\47\2\247\1\0\1\247\1\272\4\247"+
    "\1\272\2\0\3\247\2\0\1\272\3\0\1\247\1\272"+
    "\1\247\5\272\12\247\1\272\15\247\1\0\2\247\40\0"+
    "\1\207\4\0\1\245\23\0\4\273\5\0\1\273\10\0"+
    "\1\273\13\0\2\273\4\0\1\273\4\0\1\273\1\0"+
    "\1\273\10\0\6\5\2\0\1\57\3\5\6\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\1\5\1\274\13\5"+
    "\1\0\2\5\3\67\4\275\2\67\1\147\2\67\1\275"+
    "\1\150\7\67\1\275\13\67\2\275\4\67\1\275\4\67"+
    "\1\275\1\67\1\275\7\67\1\0\6\5\2\0\1\57"+
    "\3\5\6\0\1\5\1\0\1\276\6\0\11\5\1\0"+
    "\15\5\1\0\2\5\1\0\6\5\2\0\1\57\3\5"+
    "\6\0\1\5\1\0\1\5\6\0\11\5\1\0\10\5"+
    "\1\277\4\5\1\0\2\5\1\0\6\5\2\0\1\57"+
    "\3\5\6\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\1\5\1\300\13\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\57\3\5\6\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\11\5\1\301\3\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\57\3\5\6\0\1\5\1\0\1\5\6\0"+
    "\7\5\1\302\1\5\1\0\15\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\57\3\5\6\0\1\5\1\0\1\303"+
    "\6\0\11\5\1\0\15\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\57\1\5\1\304\1\5\6\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\5\5\1\304\7\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\57\3\5\6\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\10\5\1\107\4\5"+
    "\1\0\2\5\1\0\4\5\1\305\1\5\2\0\1\57"+
    "\2\5\1\305\6\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\15\5\1\0\2\5\10\36\1\0\11\36\1\0"+
    "\10\36\1\240\6\36\1\0\21\36\35\0\1\241\32\0"+
    "\10\47\1\0\22\47\1\246\6\47\1\0\21\47\35\0"+
    "\1\247\35\0\4\5\5\0\1\5\10\0\1\5\13\0"+
    "\2\5\4\0\1\5\4\0\1\5\1\0\1\5\10\0"+
    "\6\5\2\0\1\57\1\5\1\301\1\5\6\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\5\5\1\301\7\5"+
    "\1\0\2\5\3\67\4\13\2\67\1\147\2\67\1\13"+
    "\1\150\7\67\1\13\13\67\2\13\4\67\1\13\4\67"+
    "\1\13\1\67\1\13\7\67\1\0\6\5\2\0\1\57"+
    "\3\5\6\0\1\5\1\0\1\5\6\0\1\5\2\306"+
    "\6\5\1\0\15\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\57\1\307\2\5\6\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\15\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\57\3\5\6\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\12\5\1\107\2\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\57\3\5\6\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\7\5\1\154\5\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\57\3\5\6\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\2\5\2\107\11\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\5\6\0\10\5\1\155\1\0\15\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\310\6\0\11\5\1\0\15\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\57\3\5\6\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\2\5\2\153\11\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\57\3\5\6\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\2\5\2\221\11\5\1\0"+
    "\2\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9882];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };
  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\2\1\1\11\1\1\2\11"+
    "\2\1\1\11\14\1\2\11\7\1\1\11\6\1\1\0"+
    "\1\1\1\0\7\1\1\11\31\1\2\0\1\1\2\0"+
    "\3\1\2\0\1\1\3\0\1\1\1\0\5\1\1\11"+
    "\26\1\2\0\1\1\2\0\3\1\2\0\1\1\3\0"+
    "\22\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0"+
    "\14\1\2\0\1\1\3\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;
  /** the current state of the DFA */
  private int zzState;
  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;
  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  /** the current text position in the buffer */
  private int zzCurrentPos;
  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;
  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;
  /** number of newlines encountered up to the start of the matched text */
  private int yyline;
  /** the number of characters up to the start of the matched text */
  private int yychar;
  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;
  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;
  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;
  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public JASONTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JASONTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JASONTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */
    if (zzReader != null)
      zzReader.close();
  }
  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }
  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }
  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }
  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }
  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }
  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }
    throw new Error(message);
  } 
  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);
    zzMarkedPos -= number;
  }
  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;
    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;
    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    while (true) {
      zzMarkedPosL = zzMarkedPos;
      zzAction = -1;
      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }
        }
      }
      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 23: break;
        case 12: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1-1, Token.COMMENT_MULTILINE);
          }
        case 24: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 25: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 26: break;
        case 19: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 27: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 28: break;
        case 17: 
          { addToken(Token.RESERVED_WORD);
          }
        case 29: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 30: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 31: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 32: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 33: break;
        case 22: 
          { addToken(Token.DATA_TYPE);
          }
        case 34: break;
        case 15: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 35: break;
        case 21: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 36: break;
        case 20: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 37: break;
        case 14: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 38: break;
        case 5: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 39: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 40: break;
        case 9: 
          { addToken(Token.OPERATOR);
          }
        case 41: break;
        case 7: 
          { start = zzMarkedPos-1; yybegin(MLC);
          }
        case 42: break;
        case 10: 
          { 
          }
        case 43: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 201: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 202: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 203: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }
  

	public boolean getShouldIndentNextLineAfter(Token t) {
		if (t!=null) {
			if (t.length()==1) {
				char ch = t.getTextArray()[t.getTextOffset()];
				return ch=='[';
			}
			if (t.length()>1) {
				return t.getLexeme().equalsIgnoreCase("begin");
			}
		}
		return false;
	}
}