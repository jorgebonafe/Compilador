/* The following code was generated by JFlex 1.4.1 on 16/10/14 16:11 */

/*
 * Generated on 10/16/14 4:11 PM
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Arquivo de sintaxe da linguagem LEGAL.
 */

public class LEGALALPHA2012TokenMaker extends AbstractJFlexCTokenMaker {
  /** This character denotes the end of file */
  public static final int YYEOF = -1;
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\63\1\31\1\15"+
    "\1\20\1\1\1\31\1\31\1\7\2\30\1\77\1\27\1\31\1\27"+
    "\1\25\1\33\1\4\1\66\1\16\1\16\1\67\1\74\1\74\1\6"+
    "\1\75\1\3\1\45\1\31\1\100\1\77\1\100\1\31\1\32\1\47"+
    "\1\5\1\54\1\53\1\26\1\41\1\56\1\34\1\43\1\72\1\73"+
    "\1\44\1\62\1\52\1\60\1\37\1\57\1\50\1\40\1\35\1\12"+
    "\1\55\1\46\1\24\1\1\1\70\1\30\1\11\1\30\1\17\1\2"+
    "\1\0\1\47\1\14\1\54\1\53\1\26\1\42\1\56\1\101\1\43"+
    "\1\72\1\73\1\44\1\62\1\13\1\60\1\37\1\57\1\51\1\40"+
    "\1\36\1\12\1\55\1\102\1\24\1\1\1\70\1\22\1\17\1\23"+
    "\1\31\102\0\1\64\1\0\1\61\5\0\1\65\3\0\1\76\5\0"+
    "\1\71\15\0\1\64\1\0\1\61\5\0\1\65\3\0\1\76\5\0"+
    "\1\71\uff0c\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\2\1\1\11\3\1\1\12\6\1"+
    "\2\12\2\1\2\12\1\13\1\14\1\15\7\13\1\16"+
    "\6\13\1\0\1\17\1\0\2\17\3\1\2\4\1\20"+
    "\1\21\12\1\2\12\7\1\1\12\4\1\1\12\10\1"+
    "\1\0\11\1\1\12\1\1\3\13\2\0\1\13\2\0"+
    "\3\13\2\0\1\13\3\0\1\21\1\0\1\22\3\1"+
    "\1\4\1\23\1\4\20\1\1\12\1\1\1\0\1\12"+
    "\5\1\1\12\5\1\1\12\7\1\1\0\14\1\3\13"+
    "\2\0\1\13\2\0\3\13\2\0\1\13\3\0\3\1"+
    "\1\4\1\0\7\1\1\0\1\1\2\0\10\1\1\0"+
    "\11\1\2\13\1\0\1\13\1\24\1\0\2\13\1\0"+
    "\1\13\1\25\2\0\1\1\1\4\4\1\1\0\1\1"+
    "\2\0\5\1\1\0\3\1\2\0\1\1\1\12\1\13"+
    "\2\0\1\13\3\0\1\1\1\4\3\0\6\1\2\0"+
    "\1\1\2\0\3\1\4\0\1\1\1\26\1\0\1\1"+
    "\1\0\1\1\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\311\0\u0218\0\u025b\0\311\0\u029e\0\311\0\311\0\u02e1"+
    "\0\u0324\0\311\0\u0367\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6"+
    "\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce"+
    "\0\u0711\0\u010c\0\u0754\0\311\0\311\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\311\0\u096c\0\u09af\0\u09f2"+
    "\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u02e1\0\u0b84\0\u0bc7"+
    "\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\311\0\u0d59\0\u0d9c"+
    "\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4"+
    "\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc"+
    "\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4"+
    "\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc"+
    "\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814"+
    "\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c"+
    "\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44"+
    "\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u0bc7"+
    "\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\311\0\u1f68\0\u1fab\0\u1fee"+
    "\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206"+
    "\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e"+
    "\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\311"+
    "\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b"+
    "\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23"+
    "\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b"+
    "\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53"+
    "\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b"+
    "\0\u30ae\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283"+
    "\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b"+
    "\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3"+
    "\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb"+
    "\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3"+
    "\0\u3b26\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb"+
    "\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13"+
    "\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u412b"+
    "\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u42bd\0\u4300\0\u4343"+
    "\0\u2b72\0\u4386\0\u43c9\0\u3b69\0\u440c\0\u444f\0\u3cfb\0\u4492"+
    "\0\u44d5\0\u4518\0\u455b\0\u459e\0\u45e1\0\u4624\0\u4667\0\u46aa"+
    "\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u483c\0\u487f\0\u48c2"+
    "\0\u4905\0\u4948\0\u498b\0\u49ce\0\u4a11\0\u4a54\0\u4a97\0\u4ada"+
    "\0\311\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\6\1\4\1\11"+
    "\1\4\1\5\1\12\1\10\1\13\1\6\1\4\1\14"+
    "\1\15\1\16\1\17\1\5\1\20\1\21\1\22\1\17"+
    "\2\4\1\22\1\23\2\24\1\25\1\26\2\27\1\30"+
    "\1\31\1\4\1\5\1\32\2\33\1\12\1\34\1\35"+
    "\1\36\1\37\1\5\1\40\1\4\1\41\1\15\2\4"+
    "\2\6\1\5\1\4\1\5\1\42\2\6\1\4\2\22"+
    "\1\23\1\5\10\43\1\44\12\43\1\45\10\43\1\46"+
    "\4\43\1\47\1\50\3\43\1\51\32\43\1\52\1\53"+
    "\10\54\1\55\23\54\1\56\4\54\1\57\1\60\3\54"+
    "\1\61\32\54\1\62\1\63\104\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\13\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\3\65\2\6\1\65\1\6\2\0"+
    "\4\65\1\0\1\6\1\0\1\65\3\0\1\65\1\66"+
    "\1\67\3\0\1\65\1\0\11\65\1\0\15\65\1\0"+
    "\2\65\2\6\4\65\2\6\1\65\2\0\5\65\2\6"+
    "\1\65\1\6\2\0\4\65\1\0\1\6\1\0\1\65"+
    "\3\0\1\70\1\66\1\67\3\0\1\65\1\0\11\65"+
    "\1\0\15\65\1\0\2\65\2\6\4\65\2\6\1\65"+
    "\2\0\2\65\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\1\5\2\71"+
    "\6\5\1\0\2\5\2\72\7\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\11\5\1\0\12\5\1\73\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\10\13\1\74\1\75"+
    "\3\13\1\76\65\13\21\0\1\15\41\0\1\15\22\0"+
    "\2\77\1\0\1\77\7\0\1\77\47\0\2\77\4\0"+
    "\2\77\6\0\6\5\2\0\1\64\1\5\1\100\1\5"+
    "\1\0\1\5\5\0\1\101\1\0\1\5\5\0\4\5"+
    "\1\102\4\5\1\0\4\5\1\100\2\5\1\103\3\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\1\5\1\104"+
    "\11\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\7\5\1\105\1\5"+
    "\1\0\2\5\2\106\7\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\42\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\1\5\1\107\2\110\6\5\1\111\1\0"+
    "\1\5\3\0\2\42\1\5\1\0\2\5\1\42\1\5"+
    "\3\0\2\5\1\0\5\5\1\42\2\0\1\64\3\5"+
    "\1\0\1\42\5\0\1\5\1\0\1\112\5\0\7\5"+
    "\1\113\1\5\1\0\1\5\1\114\10\5\1\115\1\0"+
    "\1\5\3\0\2\42\1\5\1\0\2\5\2\42\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\1\116\2\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\117\5\0\7\5\1\120"+
    "\1\5\1\0\1\5\1\121\2\122\7\5\1\0\1\5"+
    "\1\0\1\123\1\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\1\5\1\124\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\4\5\1\124\6\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\1\125"+
    "\2\5\1\0\1\42\5\0\1\42\1\0\1\126\5\0"+
    "\7\5\1\127\1\5\1\0\13\5\1\0\1\5\1\0"+
    "\1\130\1\0\2\42\1\5\1\0\2\5\1\42\1\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\1\5\2\131"+
    "\1\132\4\5\1\133\1\0\6\5\1\134\1\135\3\5"+
    "\1\0\1\136\3\0\2\5\1\137\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\140\5\0\11\5\1\0\13\5"+
    "\1\0\1\5\1\0\1\141\1\130\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\4\5\1\42\1\5\2\0\1\64"+
    "\2\5\1\42\1\0\1\5\5\0\1\5\1\0\1\142"+
    "\5\0\7\5\1\143\1\5\1\0\13\5\1\0\1\5"+
    "\3\0\3\5\1\123\4\5\3\0\2\5\1\0\6\5"+
    "\2\0\1\64\1\144\2\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\10\5\1\145\1\0\12\5\1\146"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\147\5\0\11\5\1\0\1\5\1\150"+
    "\11\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\7\5\1\105\1\5"+
    "\1\0\13\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\4\5\1\151\1\5\2\0\1\64"+
    "\2\5\1\151\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\1\152\10\5\1\0\13\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\1\152\1\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\42\5\0\7\5\1\153\1\5\1\0\5\5\1\42"+
    "\4\5\1\154\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\10\43\1\0\12\43\1\0\16\43\1\0"+
    "\36\43\2\0\10\43\1\0\12\43\1\0\11\43\2\155"+
    "\3\43\1\0\36\43\2\0\10\43\1\0\12\43\1\0"+
    "\11\43\2\156\3\43\1\0\1\157\35\43\37\0\2\160"+
    "\4\0\1\161\37\0\10\43\1\0\12\43\1\0\16\43"+
    "\1\0\3\43\1\162\32\43\1\0\1\163\35\0\2\164"+
    "\112\0\1\163\33\0\1\163\10\54\1\0\31\54\1\0"+
    "\36\54\2\0\10\54\1\0\24\54\2\165\3\54\1\0"+
    "\36\54\2\0\10\54\1\0\24\54\2\166\3\54\1\0"+
    "\1\167\35\54\37\0\2\170\4\0\1\171\37\0\10\54"+
    "\1\0\31\54\1\0\3\54\1\172\32\54\1\0\1\173"+
    "\35\0\2\174\112\0\1\173\33\0\1\173\12\0\1\175"+
    "\70\0\7\65\2\0\4\65\1\0\1\65\1\0\1\65"+
    "\3\0\1\65\1\0\1\65\3\0\1\65\1\0\11\65"+
    "\1\0\15\65\1\0\13\65\2\0\5\65\2\176\1\65"+
    "\1\176\2\0\4\65\1\0\1\176\1\0\1\65\3\0"+
    "\1\65\1\0\1\65\1\177\2\0\1\65\1\0\11\65"+
    "\1\0\15\65\1\0\2\65\2\176\4\65\2\176\1\65"+
    "\2\0\5\65\4\200\2\0\3\65\1\200\1\0\1\200"+
    "\1\0\1\65\3\0\1\65\1\0\1\200\3\0\1\65"+
    "\1\0\5\65\2\200\2\65\1\0\1\65\1\200\3\65"+
    "\2\200\6\65\1\0\2\65\2\200\4\65\2\200\1\65"+
    "\2\0\2\65\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\201\5\0\11\5\1\0"+
    "\13\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\1\5"+
    "\1\202\11\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\2\5\2\203\7\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\11\74\1\204\3\74\1\205\71\74"+
    "\1\13\1\74\2\13\1\0\1\13\1\206\4\13\17\74"+
    "\1\13\3\74\1\13\6\74\1\13\14\74\2\13\4\74"+
    "\1\13\6\74\3\65\2\77\1\65\1\77\2\0\4\65"+
    "\1\0\1\77\1\0\1\65\3\0\1\65\1\0\1\67"+
    "\3\0\1\65\1\0\11\65\1\0\15\65\1\0\2\65"+
    "\2\77\4\65\2\77\1\65\2\0\2\65\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\1\5\2\207\6\5\1\0\7\5\1\210"+
    "\1\5\1\211\1\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\3\5"+
    "\1\212\5\5\1\0\13\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\3\5\1\213\5\5\1\0\6\5\1\214\2\5\1\215"+
    "\1\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\216\5\0\11\5\1\0\13\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\4\5\1\217\1\5\2\0\1\64\2\5\1\217"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\13\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\2\5\2\220\7\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\7\5"+
    "\1\221\1\5\1\0\13\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\2\5\2\222\7\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\223"+
    "\5\0\11\5\1\0\13\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\2\5\2\224\7\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\1\5\1\207\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\2\5\2\225\1\207"+
    "\6\5\1\0\1\226\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\4\5\1\42\1\5\2\0\1\64\2\5"+
    "\1\42\1\0\1\227\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\10\5\1\230\2\5\1\0\1\5\3\0"+
    "\1\5\1\227\1\5\1\0\4\5\3\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\13\5\1\0\1\5"+
    "\3\0\3\5\1\0\4\5\1\231\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\10\5\1\232\1\0\13\5\1\0"+
    "\1\42\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\13\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\230\3\5\3\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\10\5\1\233\1\0\13\5\1\0"+
    "\1\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\13\5\1\0\1\234"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\7\5\1\235\1\236\1\0\13\5\1\0"+
    "\1\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\237\5\0\11\5\1\0\13\5\1\0\1\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\16\0\1\240"+
    "\65\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\1\5\2\241\6\5\1\0"+
    "\5\5\1\242\1\5\1\243\3\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\11\5\1\0\13\5\1\0\1\5\3\0\2\5"+
    "\1\42\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\1\5\1\244\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\4\5\1\244\6\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\10\5\1\245"+
    "\2\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\5\0\1\240\6\0\1\240\1\0\1\246\65\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\7\5\1\247\1\5\1\0\13\5"+
    "\1\0\1\5\2\0\1\240\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\1\5"+
    "\1\127\2\134\7\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\1\5\1\250\11\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\251\5\0"+
    "\11\5\1\0\13\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\7\5"+
    "\1\236\1\5\1\0\13\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\1\5\1\252\11\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\1\253\2\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\13\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\3\5\1\254\5\5\1\0\6\5\1\255\4\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\37\0\1\256\44\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\4\5\1\257"+
    "\4\5\1\0\13\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\2\5\2\260\7\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\2\5\2\261\7\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\11\5\1\0\1\5\1\262\11\5\1\0\1\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\10\5\1\263\1\0\2\5\2\42\7\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\2\5\2\264"+
    "\7\5\1\0\1\5\3\0\2\5\1\265\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\2\5\2\266\7\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\4\5"+
    "\1\267\4\5\1\0\2\5\2\270\7\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\271\3\5\3\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\13\5\1\0\1\42"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\4\5"+
    "\1\42\1\5\2\0\1\64\1\5\2\42\1\0\1\227"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\4\5"+
    "\1\42\6\5\1\0\1\5\3\0\1\5\1\227\1\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\1\5\2\272\6\5\1\0\13\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\10\43\1\0\12\43"+
    "\1\0\11\43\2\273\3\43\1\0\36\43\2\0\10\43"+
    "\1\0\12\43\1\0\13\43\1\274\2\43\1\0\36\43"+
    "\2\0\10\43\1\0\12\43\1\0\16\43\1\0\1\43"+
    "\1\275\34\43\41\0\1\276\107\0\1\277\36\0\10\43"+
    "\1\0\12\43\1\0\16\43\1\0\3\43\1\300\32\43"+
    "\1\0\1\301\46\0\1\301\33\0\1\301\35\0\2\302"+
    "\44\0\10\54\1\0\24\54\2\303\3\54\1\0\36\54"+
    "\2\0\10\54\1\0\26\54\1\304\2\54\1\0\36\54"+
    "\2\0\10\54\1\0\31\54\1\0\1\54\1\305\34\54"+
    "\41\0\1\306\107\0\1\307\36\0\10\54\1\0\31\54"+
    "\1\0\3\54\1\310\32\54\1\0\1\311\46\0\1\311"+
    "\33\0\1\311\35\0\2\312\47\0\4\313\5\0\1\313"+
    "\1\0\1\313\7\0\1\313\12\0\2\313\4\0\1\313"+
    "\3\0\2\313\11\0\2\313\4\0\2\313\5\0\3\65"+
    "\2\176\1\65\1\176\2\0\4\65\1\0\1\176\1\0"+
    "\1\65\3\0\1\65\1\0\1\65\3\0\1\65\1\0"+
    "\11\65\1\0\15\65\1\0\2\65\2\176\4\65\2\176"+
    "\1\65\2\0\2\65\3\0\2\176\1\0\1\176\7\0"+
    "\1\176\47\0\2\176\4\0\2\176\6\0\6\5\2\0"+
    "\1\64\1\5\1\314\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\4\5\1\314\6\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\1\5\1\315\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\4\5\1\315\6\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\13\5\1\0\1\316\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\10\74\1\0\75\74\4\317\2\74\1\204"+
    "\2\74\1\317\1\205\1\317\7\74\1\317\12\74\2\317"+
    "\4\74\1\317\3\74\2\317\11\74\2\317\4\74\2\317"+
    "\5\74\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\13\5"+
    "\1\320\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\7\5\1\222\1\5\1\0"+
    "\13\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\1\321\2\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\13\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\10\5\1\322\1\0"+
    "\13\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\107\5\0\11\5\1\0\13\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\1\262\2\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\13\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\1\323\2\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\13\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\1\5\1\324\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\4\5\1\324\6\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\7\5"+
    "\1\325\1\5\1\0\13\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\12\5\1\42\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\4\5\1\326\4\5\1\0\13\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\42"+
    "\5\0\11\5\1\0\13\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\1\5\2\230\6\5\1\0\13\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\1\5\2\327\6\5\1\0\13\5\1\0\1\5"+
    "\1\330\2\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\7\5\1\331\3\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\3\5\1\107\5\5\1\0"+
    "\13\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\4\5\1\42\1\5\2\0\1\64\2\5"+
    "\1\42\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\13\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\1\5\1\42\11\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\53\0\1\332\30\0\4\5"+
    "\1\42\1\5\2\0\1\64\2\5\1\42\1\0\1\227"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\13\5"+
    "\1\0\1\5\3\0\1\5\1\227\1\5\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\7\5\1\125"+
    "\1\5\1\0\13\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\13\5\1\0\1\5\1\333\2\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\230\1\0\1\5\5\0\11\5"+
    "\1\0\13\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\4\5\1\220"+
    "\4\5\1\0\13\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\1\5"+
    "\1\326\1\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\11\5\1\0\4\5\1\326\6\5\1\0\1\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\334\5\0\11\5\1\0\13\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\335"+
    "\5\0\11\5\1\0\13\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\336\5\0"+
    "\11\5\1\0\13\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\1\5"+
    "\2\337\6\5\1\0\13\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\1\222\2\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\11\5\1\0\13\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\5\0\1\240\6\0\1\240"+
    "\67\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\7\5\1\222"+
    "\3\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\2\5"+
    "\2\340\7\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\1\5\1\341"+
    "\1\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\4\5\1\341\6\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\11\5\1\0\2\5\2\342\7\5\1\0\1\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\10\5\1\42\1\0\13\5\1\0\1\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\7\5\1\223\1\5\1\0\13\5\1\0"+
    "\1\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\343\5\0\11\5\1\0\13\5\1\0\1\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\43\0\1\344"+
    "\40\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\10\5\1\345\1\0\1\5"+
    "\1\104\11\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\254\5\0\11\5\1\0"+
    "\13\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\7\5"+
    "\1\230\3\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\2\5\2\230\7\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\346\5\0\11\5"+
    "\1\0\13\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\5\5\1\347\5\5\1\0\1\350\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\351\5\0\11\5"+
    "\1\0\13\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\7\5\1\352"+
    "\1\5\1\0\13\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\1\5"+
    "\2\353\6\5\1\0\13\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\7\5\1\354\1\5\1\0\13\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\324"+
    "\5\0\11\5\1\0\13\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\12\5\1\355\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\10\43\1\0\12\43\1\0"+
    "\13\43\1\356\2\43\1\0\36\43\2\0\10\43\1\0"+
    "\12\43\1\0\16\43\1\0\2\43\1\357\33\43\2\0"+
    "\10\43\1\0\12\43\1\0\2\43\1\274\13\43\1\0"+
    "\36\43\47\0\1\360\63\0\1\276\54\0\10\43\1\0"+
    "\12\43\1\0\1\43\1\361\14\43\1\0\36\43\27\0"+
    "\1\362\114\0\1\363\43\0\10\54\1\0\26\54\1\364"+
    "\2\54\1\0\36\54\2\0\10\54\1\0\31\54\1\0"+
    "\2\54\1\365\33\54\2\0\10\54\1\0\15\54\1\304"+
    "\13\54\1\0\36\54\47\0\1\366\63\0\1\306\54\0"+
    "\10\54\1\0\14\54\1\367\14\54\1\0\36\54\27\0"+
    "\1\370\114\0\1\371\46\0\4\372\5\0\1\372\1\0"+
    "\1\372\7\0\1\372\12\0\2\372\4\0\1\372\3\0"+
    "\2\372\11\0\2\372\4\0\2\372\6\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\1\5\2\373\6\5\1\0\13\5\1\0\1\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\6\5\1\230\4\5\1\0"+
    "\1\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\1\5\1\253\11\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\3\74\4\374\2\74\1\204\2\74\1\374\1\205\1\374"+
    "\7\74\1\374\12\74\2\374\4\74\1\374\3\74\2\374"+
    "\11\74\2\374\4\74\2\374\5\74\60\0\1\240\23\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\1\5\1\216\11\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\12\5\1\375"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\376\5\0\11\5\1\0\13\5\1\0"+
    "\1\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\1\5\2\220\6\5\1\0\13\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\10\5\1\377\1\0\13\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\1\5\2\222\6\5\1\0"+
    "\13\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\1\5"+
    "\1\u0100\11\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\41\0\2\u0101\41\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\12\5\1\u0102\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\47\0\1\u0103\106\0\1\u0104"+
    "\30\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\2\5\2\u0105"+
    "\7\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\1\5\2\u0106\6\5"+
    "\1\0\13\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\2\5\2\u0107\7\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\1\5\1\42\10\5\1\42\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\11\5\1\0\13\5\1\0\1\222\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\5\5\1\230\5\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\u0108"+
    "\5\0\11\5\1\0\13\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\4\5\1\u0109\1\5"+
    "\2\0\1\64\2\5\1\u0109\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\13\5\1\0\1\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\53\0\1\u010a"+
    "\30\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\7\5\1\127\1\5\1\0"+
    "\13\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\1\5\2\u010b\6\5"+
    "\1\0\13\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\42\5\0\11\5\1\0"+
    "\1\5\1\u010c\11\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\u010d\5\0\11\5"+
    "\1\0\13\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\4\5\1\42"+
    "\4\5\1\0\13\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\13\5\1\0\1\5\1\0\1\u010e\1\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\13\5\1\0\1\5\1\0\1\u010f\1\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\11\5\1\0\10\5\1\u0110\2\5\1\0\1\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\2\5\2\u0111\7\5\1\0"+
    "\1\5\3\0\3\5\1\0\4\5\3\0\2\5\10\43"+
    "\1\0\12\43\1\0\14\43\1\274\1\43\1\0\2\43"+
    "\1\357\33\43\2\0\10\43\1\0\12\43\1\0\7\43"+
    "\1\u0112\6\43\1\0\36\43\35\0\1\u0113\47\0\1\43"+
    "\7\361\1\0\1\43\3\361\1\43\1\361\1\43\1\361"+
    "\2\43\1\0\16\361\1\362\16\361\1\43\1\361\3\43"+
    "\3\361\1\43\4\361\1\43\1\361\1\43\2\362\1\0"+
    "\1\362\1\u0114\4\362\1\u0114\2\0\3\362\1\0\1\362"+
    "\1\0\1\u0114\3\0\1\362\1\u0114\1\362\4\u0114\12\362"+
    "\1\u0114\13\362\1\0\1\362\3\0\3\362\1\0\4\362"+
    "\1\0\1\u0114\1\0\2\362\40\0\1\276\4\0\1\360"+
    "\35\0\10\54\1\0\27\54\1\304\1\54\1\0\2\54"+
    "\1\365\33\54\2\0\10\54\1\0\22\54\1\u0115\6\54"+
    "\1\0\36\54\35\0\1\u0116\47\0\1\54\7\367\1\0"+
    "\1\54\3\367\1\54\1\367\1\54\1\367\3\54\16\367"+
    "\1\370\16\367\1\54\1\367\3\54\3\367\1\54\4\367"+
    "\1\54\1\367\1\54\2\370\1\0\1\370\1\u0117\4\370"+
    "\1\u0117\2\0\3\370\1\0\1\370\1\0\1\u0117\3\0"+
    "\1\370\1\u0117\1\370\4\u0117\12\370\1\u0117\13\370\1\0"+
    "\1\370\3\0\3\370\1\0\4\370\1\0\1\u0117\1\0"+
    "\2\370\40\0\1\306\4\0\1\366\40\0\4\u0118\5\0"+
    "\1\u0118\1\0\1\u0118\7\0\1\u0118\12\0\2\u0118\4\0"+
    "\1\u0118\3\0\2\u0118\11\0\2\u0118\4\0\2\u0118\6\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\u0119\5\0\11\5\1\0\13\5\1\0\1\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\3\74\4\u011a"+
    "\2\74\1\204\2\74\1\u011a\1\205\1\u011a\7\74\1\u011a"+
    "\12\74\2\u011a\4\74\1\u011a\3\74\2\u011a\11\74\2\u011a"+
    "\4\74\2\u011a\5\74\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\4\5"+
    "\1\207\4\5\1\0\13\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\2\5\2\341\7\5\1\0\1\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\7\5\1\326\1\5\1\0\13\5\1\0\1\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\13\5\1\0\1\5\1\u011b"+
    "\2\0\3\5\1\0\4\5\3\0\2\5\47\0\1\u011c"+
    "\34\0\6\5\2\0\1\64\3\5\1\0\1\42\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\13\5\1\0"+
    "\1\5\3\0\2\42\1\5\1\0\4\5\3\0\2\5"+
    "\6\0\1\240\7\0\1\240\47\0\2\240\4\0\2\240"+
    "\54\0\1\u011d\34\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\7\5\1\u011e\3\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\u011f\5\0\11\5"+
    "\1\0\13\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\1\5\2\u0120"+
    "\6\5\1\0\13\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\10\5"+
    "\1\230\1\0\13\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\u0121\5\0\11\5"+
    "\1\0\1\5\1\42\11\5\1\0\1\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\47\0\1\240\10\0\1\240"+
    "\23\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\1\5\1\u0119"+
    "\11\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\5\5"+
    "\1\u0122\5\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\10\5\1\u0123"+
    "\1\0\13\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\55\0\1\u0124\101\0\1\u0125\27\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\1\5\1\u0126\11\5\1\0"+
    "\1\5\3\0\3\5\1\0\4\5\3\0\2\5\10\43"+
    "\1\0\12\43\1\0\7\43\1\361\6\43\1\0\36\43"+
    "\35\0\1\362\47\0\10\54\1\0\22\54\1\367\6\54"+
    "\1\0\36\54\35\0\1\370\52\0\4\5\5\0\1\5"+
    "\1\0\1\5\7\0\1\5\12\0\2\5\4\0\1\5"+
    "\3\0\2\5\11\0\2\5\4\0\2\5\6\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\2\5\2\42\7\5\1\0"+
    "\1\5\3\0\3\5\1\0\4\5\3\0\2\5\3\74"+
    "\4\13\2\74\1\204\2\74\1\13\1\205\1\13\7\74"+
    "\1\13\12\74\2\13\4\74\1\13\3\74\2\13\11\74"+
    "\2\13\4\74\2\13\5\74\16\0\1\240\47\0\2\240"+
    "\4\0\1\240\63\0\1\u0127\110\0\1\u0128\20\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\1\5\1\u0129\11\5\1\0"+
    "\1\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\2\5\2\u012a\7\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\7\5\1\u012b\1\5\1\0"+
    "\13\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\1\42\2\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\13\5\1\0\1\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\37\5\0\11\5\1\0\13\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\1\230\10\5\1\0\13\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\1\230"+
    "\1\5\26\0\1\u012c\66\0\1\u012d\71\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\11\5\1\0\5\5\1\337\5\5\1\0\1\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\60\0\1\u012e"+
    "\76\0\1\u012f\27\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\10\5\1\220"+
    "\1\0\13\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\13\5\1\0\1\u0130\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\5\5"+
    "\1\220\5\5\1\0\1\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\44\0\1\u0131\102\0\1\320\106\0\2\240"+
    "\111\0\1\u0132\23\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\7\5\1\u0133"+
    "\1\5\1\0\13\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\44\0\1\u0134\37\0\6\5\2\0"+
    "\1\64\1\5\1\u0135\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\4\5\1\u0135\6\5"+
    "\1\0\1\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\26\0\1\u0136\55\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\1\5\1\341\11\5\1\0\1\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\35\0\2\u0137\113\0\1\240\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19631];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };
  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\2\1\1\11\1\1\2\11"+
    "\2\1\1\11\21\1\2\11\7\1\1\11\6\1\1\0"+
    "\1\1\1\0\7\1\1\11\42\1\1\0\16\1\2\0"+
    "\1\1\2\0\3\1\2\0\1\1\3\0\1\1\1\0"+
    "\5\1\1\11\23\1\1\0\6\1\1\11\15\1\1\0"+
    "\17\1\2\0\1\1\2\0\3\1\2\0\1\1\3\0"+
    "\4\1\1\0\7\1\1\0\1\1\2\0\10\1\1\0"+
    "\13\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0"+
    "\6\1\1\0\1\1\2\0\5\1\1\0\3\1\2\0"+
    "\3\1\2\0\1\1\3\0\2\1\3\0\6\1\2\0"+
    "\1\1\2\0\3\1\4\0\1\1\1\11\1\0\1\1"+
    "\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;
  /** the current state of the DFA */
  private int zzState;
  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;
  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  /** the current text position in the buffer */
  private int zzCurrentPos;
  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;
  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;
  /** number of newlines encountered up to the start of the matched text */
  private int yyline;
  /** the number of characters up to the start of the matched text */
  private int yychar;
  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;
  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;
  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;
  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public LEGALALPHA2012TokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LEGALALPHA2012TokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LEGALALPHA2012TokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */
    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }
  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }
  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }
  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }
  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }
  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }
    throw new Error(message);
  } 
  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);
    zzMarkedPos -= number;
  }
  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;
    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;
    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    while (true) {
      zzMarkedPosL = zzMarkedPos;
      zzAction = -1;
      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }
        }
      }
      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 23: break;
        case 13: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1-1, Token.COMMENT_MULTILINE);
          }
        case 24: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 25: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 26: break;
        case 19: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 27: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 28: break;
        case 10: 
          { addToken(Token.RESERVED_WORD);
          }
        case 29: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 30: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 31: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 32: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 33: break;
        case 22: 
          { addToken(Token.DATA_TYPE);
          }
        case 34: break;
        case 16: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 35: break;
        case 21: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 36: break;
        case 20: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 37: break;
        case 15: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 38: break;
        case 5: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 39: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 40: break;
        case 9: 
          { addToken(Token.OPERATOR);
          }
        case 41: break;
        case 7: 
          { start = zzMarkedPos-1; yybegin(MLC);
          }
        case 42: break;
        case 11: 
          { 
          }
        case 43: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 312: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 313: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 314: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }
  
  public boolean getShouldIndentNextLineAfter(Token t) {
		if (t!=null) {
			if (t.length()==1) {
				char ch = t.getTextArray()[t.getTextOffset()];
				return ch=='[';
			}
			if (t.length()>1) {
				return t.getLexeme().equalsIgnoreCase("por favor");
			}
		}
		return false;
	}
}