/* The following code was generated by JFlex 1.4.1 on 16/10/14 16:13 */

/*
 * Generated on 10/16/14 4:13 PM
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Arquivo de sintaxe da linguagem LEGAL.
 */

public class LEGALALPHA2012TokenMakerEng extends AbstractJFlexCTokenMaker {
  /** This character denotes the end of file */
  public static final int YYEOF = -1;
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\64\1\31\1\15"+
    "\1\20\1\1\1\31\1\31\1\7\2\30\1\70\1\27\1\31\1\27"+
    "\1\25\1\33\1\4\1\16\1\50\1\50\1\50\1\65\1\65\1\6"+
    "\1\67\1\3\1\45\1\31\1\71\1\70\1\71\1\31\1\32\1\47"+
    "\1\51\1\52\1\5\1\26\1\41\1\53\1\34\1\43\1\66\1\63"+
    "\1\44\1\55\1\56\1\54\1\37\1\1\1\61\1\40\1\35\1\12"+
    "\1\60\1\46\1\24\1\62\1\1\1\30\1\11\1\30\1\17\1\2"+
    "\1\0\1\47\1\14\1\52\1\5\1\26\1\42\1\53\1\72\1\43"+
    "\1\66\1\63\1\44\1\55\1\57\1\54\1\37\1\1\1\13\1\40"+
    "\1\36\1\12\1\60\1\73\1\24\1\62\1\1\1\22\1\17\1\23"+
    "\1\31\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\3\1\4\2\1\1\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\1\1\3\1\12\3\1"+
    "\2\3\3\1\3\3\1\1\1\3\1\1\1\3\1\1"+
    "\1\3\1\13\1\14\1\15\7\13\1\16\6\13\1\0"+
    "\1\17\1\0\2\17\3\1\1\3\6\1\2\5\1\20"+
    "\1\21\45\1\3\13\2\0\1\13\2\0\3\13\2\0"+
    "\1\13\3\0\1\21\1\0\1\22\13\1\1\5\1\23"+
    "\1\5\43\1\3\13\2\0\1\13\2\0\3\13\2\0"+
    "\1\13\3\0\4\1\1\5\2\1\1\0\1\1\1\3"+
    "\22\1\2\13\1\0\1\13\1\24\1\0\2\13\1\0"+
    "\1\13\1\25\2\0\2\1\1\5\2\1\2\0\1\1"+
    "\1\0\11\1\1\3\1\1\1\13\2\0\1\13\3\0"+
    "\1\1\1\5\2\1\3\0\1\3\6\1\1\3\1\1"+
    "\4\0\2\1\3\0\1\26\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\264\0\u01e0\0\u021c\0\u0258\0\u0294\0\264\0\u02d0\0\264"+
    "\0\264\0\u030c\0\u0348\0\264\0\u0384\0\u03c0\0\u03fc\0\u0438"+
    "\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618"+
    "\0\u0654\0\u0690\0\u06cc\0\u0708\0\360\0\u0744\0\264\0\264"+
    "\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\264"+
    "\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8"+
    "\0\u030c\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\264"+
    "\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0"+
    "\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0"+
    "\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0"+
    "\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590"+
    "\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770"+
    "\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950"+
    "\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30"+
    "\0\u1b6c\0\u0b40\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\264\0\u1e78"+
    "\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058"+
    "\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238"+
    "\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418"+
    "\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8"+
    "\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8"+
    "\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8"+
    "\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98"+
    "\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78"+
    "\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58"+
    "\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138"+
    "\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318"+
    "\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8"+
    "\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8"+
    "\0\u3714\0\u3750\0\u378c\0\u37c8\0\u3804\0\u3840\0\u387c\0\u2d78"+
    "\0\u38b8\0\u38f4\0\u3930\0\u3264\0\u396c\0\u39a8\0\u33cc\0\u39e4"+
    "\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\264"+
    "\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0\0\u1284\0\u3d2c"+
    "\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c"+
    "\0\u3f48\0\360\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u40b0"+
    "\0\u40ec\0\u4128\0\u4164\0\u41a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\6\1\4\1\11"+
    "\1\4\1\12\1\13\1\14\1\15\1\6\1\4\1\16"+
    "\1\17\1\20\1\21\1\5\1\22\1\23\1\24\1\21"+
    "\2\4\1\24\1\25\2\26\1\27\1\30\2\31\1\32"+
    "\1\33\1\4\1\34\1\35\1\6\1\14\1\36\1\37"+
    "\1\40\1\41\2\42\1\43\1\13\1\44\1\45\1\17"+
    "\1\6\1\5\1\6\2\24\1\25\1\34\10\46\1\47"+
    "\12\46\1\50\10\46\1\51\4\46\1\52\1\53\3\46"+
    "\1\54\23\46\1\55\1\56\10\57\1\60\23\57\1\61"+
    "\4\57\1\62\1\63\3\57\1\64\23\57\1\65\1\66"+
    "\75\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\16\5\1\0"+
    "\3\5\2\0\2\5\3\70\2\6\1\70\1\6\2\0"+
    "\4\70\1\0\1\6\1\0\1\70\3\0\1\70\1\71"+
    "\1\72\3\0\1\70\1\0\11\70\1\0\2\70\1\6"+
    "\13\70\1\0\1\6\1\70\1\6\2\0\5\70\2\6"+
    "\1\70\1\6\2\0\4\70\1\0\1\6\1\0\1\70"+
    "\3\0\1\73\1\71\1\72\3\0\1\70\1\0\11\70"+
    "\1\0\2\70\1\6\13\70\1\0\1\6\1\70\1\6"+
    "\2\0\2\70\1\0\6\5\2\0\1\67\2\5\1\45"+
    "\1\0\1\5\5\0\1\5\1\0\1\74\5\0\7\5"+
    "\1\75\1\5\1\0\1\5\1\76\1\77\1\45\12\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\10\5\2\100\4\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\101\5\0\7\5\1\102\1\5"+
    "\1\0\16\5\1\0\3\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\67\2\5\1\45\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\1\5\2\103\5\5\1\104\1\0"+
    "\1\5\1\105\1\77\1\45\12\5\1\0\3\5\2\0"+
    "\2\5\10\15\1\106\1\107\3\15\1\110\56\15\21\0"+
    "\1\17\42\0\1\17\12\0\2\111\1\0\1\111\7\0"+
    "\1\111\31\0\1\111\14\0\1\111\1\0\1\111\5\0"+
    "\6\5\2\0\1\67\2\5\1\45\1\0\1\5\5\0"+
    "\1\112\1\0\1\5\5\0\4\5\1\113\3\5\1\114"+
    "\1\0\2\5\1\77\1\45\4\5\2\115\1\116\3\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\1\5\1\117\14\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\1\120\1\121\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\1\122"+
    "\6\5\1\123\1\5\1\0\13\5\1\121\2\5\1\0"+
    "\3\5\2\0\1\122\1\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\45\5\0\1\5\1\0\1\5\5\0"+
    "\10\5\1\124\1\0\2\5\1\45\3\5\1\125\7\5"+
    "\1\0\1\45\2\5\2\0\2\5\1\0\5\5\1\45"+
    "\2\0\1\67\3\5\1\0\1\45\5\0\1\5\1\0"+
    "\1\126\5\0\1\127\2\130\1\131\4\5\1\132\1\0"+
    "\1\5\1\133\1\45\13\5\1\0\1\45\1\5\1\45"+
    "\2\0\1\127\1\5\1\0\6\5\2\0\1\67\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\1\5\1\134\1\45\3\5\1\135\7\5\1\0"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\67\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\5\5"+
    "\2\45\2\5\1\0\10\5\2\136\4\5\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\45\5\0\1\45\1\0\1\137\5\0\7\5\1\140"+
    "\1\5\1\0\2\5\1\45\13\5\1\0\1\45\2\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\1\141\10\5"+
    "\1\0\1\5\1\142\14\5\1\0\3\5\2\0\1\141"+
    "\1\5\1\0\6\5\2\0\1\67\2\5\1\45\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\10\5\1\143"+
    "\1\0\2\5\1\77\1\45\1\144\11\5\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\2\5\1\45\3\5\1\145\7\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\1\5\1\146\1\45"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\2\5\1\77\1\45\7\5\1\146\2\5\1\0"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\67\1\147"+
    "\1\5\1\150\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\1\151\10\5\1\0\3\5\1\150\12\5\1\0"+
    "\3\5\2\0\1\151\1\5\1\0\4\5\1\45\1\5"+
    "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\45\5\0\7\5\1\152\1\5\1\0\6\5\1\153"+
    "\7\5\1\0\3\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\11\5\1\0\6\5\1\154\7\5\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\1\5\1\155\14\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\156\5\0\11\5\1\0\16\5\1\0\3\5"+
    "\2\0\2\5\10\46\1\0\12\46\1\0\16\46\1\0"+
    "\27\46\2\0\10\46\1\0\12\46\1\0\11\46\2\157"+
    "\3\46\1\0\27\46\2\0\10\46\1\0\12\46\1\0"+
    "\11\46\2\160\3\46\1\0\1\161\26\46\37\0\2\162"+
    "\4\0\1\163\30\0\10\46\1\0\12\46\1\0\16\46"+
    "\1\0\3\46\1\164\23\46\1\0\1\165\35\0\2\166"+
    "\103\0\1\165\24\0\1\165\10\57\1\0\31\57\1\0"+
    "\27\57\2\0\10\57\1\0\24\57\2\167\3\57\1\0"+
    "\27\57\2\0\10\57\1\0\24\57\2\170\3\57\1\0"+
    "\1\171\26\57\37\0\2\172\4\0\1\173\30\0\10\57"+
    "\1\0\31\57\1\0\3\57\1\174\23\57\1\0\1\175"+
    "\35\0\2\176\103\0\1\175\24\0\1\175\12\0\1\177"+
    "\61\0\7\70\2\0\4\70\1\0\1\70\1\0\1\70"+
    "\3\0\1\70\1\0\1\70\3\0\1\70\1\0\11\70"+
    "\1\0\16\70\1\0\3\70\2\0\5\70\2\200\1\70"+
    "\1\200\2\0\4\70\1\0\1\200\1\0\1\70\3\0"+
    "\1\70\1\0\1\70\1\201\2\0\1\70\1\0\11\70"+
    "\1\0\2\70\1\200\13\70\1\0\1\200\1\70\1\200"+
    "\2\0\5\70\4\202\2\0\3\70\1\202\1\0\1\202"+
    "\1\0\1\70\3\0\1\70\1\0\1\202\3\0\1\70"+
    "\1\0\5\70\2\202\2\70\1\0\1\70\4\202\11\70"+
    "\1\0\1\202\1\70\1\202\2\0\2\70\1\0\6\5"+
    "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\1\5\1\203\14\5\1\0"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\67\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\4\5"+
    "\1\204\4\5\1\0\16\5\1\0\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\67\1\5\1\205\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\13\5\1\205\2\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\2\5\1\45\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\3\5\1\45"+
    "\12\5\1\0\3\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\1\5\2\206\6\5\1\0\16\5\1\0\3\5"+
    "\2\0\2\5\1\0\4\5\1\45\1\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\3\5\1\207\5\5\1\0\4\5\1\210\11\5\1\0"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\67\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\5\5\1\211\10\5\1\0\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\212\5\0\11\5\1\0\16\5\1\0"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\67\1\213"+
    "\2\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\1\5\1\214\14\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\4\5"+
    "\1\215\11\5\1\0\3\5\2\0\2\5\11\106\1\216"+
    "\3\106\1\217\62\106\1\15\1\106\2\15\1\0\1\15"+
    "\1\220\4\15\17\106\1\15\3\106\1\15\5\106\1\15"+
    "\6\106\1\15\5\106\1\15\6\106\3\70\2\111\1\70"+
    "\1\111\2\0\4\70\1\0\1\111\1\0\1\70\3\0"+
    "\1\70\1\0\1\72\3\0\1\70\1\0\11\70\1\0"+
    "\2\70\1\111\13\70\1\0\1\111\1\70\1\111\2\0"+
    "\2\70\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\3\5\1\221\5\5"+
    "\1\0\16\5\1\0\3\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\4\5\1\222\11\5\1\0"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\67\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\4\5"+
    "\1\213\4\5\1\0\16\5\1\0\3\5\2\0\2\5"+
    "\1\0\4\5\1\223\1\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\1\5\1\224\14\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\225\5\0\11\5\1\0\16\5\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\3\5\1\226"+
    "\5\5\1\0\16\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\1\5\1\227\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\13\5"+
    "\1\227\2\5\1\0\3\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\67\1\213\2\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\16\5\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\152\5\0\11\5\1\0"+
    "\1\5\1\230\14\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\7\5\1\231\6\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\232\5\0"+
    "\11\5\1\0\1\5\1\233\14\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\1\5\1\234\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\13\5\1\234\2\5\1\0\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\67\1\5\1\235\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\10\5\2\133\1\5\1\235\2\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\6\5"+
    "\1\236\7\5\1\0\3\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\6\5\1\237\7\5\1\0"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\67\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\7\5"+
    "\1\152\1\5\1\0\16\5\1\0\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\6\5\1\240"+
    "\7\5\1\0\3\5\2\0\2\5\1\0\4\5\1\45"+
    "\1\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\16\5\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\4\5\1\236"+
    "\3\5\1\114\1\0\16\5\1\0\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\67\1\5\1\241\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\10\5\1\242"+
    "\1\0\13\5\1\241\2\5\1\0\3\5\2\0\2\5"+
    "\1\0\4\5\1\243\1\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\1\5\2\244"+
    "\6\5\1\0\12\5\1\245\3\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\5\5\2\236\2\5"+
    "\1\0\1\5\1\246\14\5\1\0\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\5\5\1\211"+
    "\2\5\2\213\4\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\7\5\1\247\1\5\1\0\16\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\1\5\1\250\1\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\7\5\1\236\1\5\1\0\13\5\1\250"+
    "\2\5\1\0\3\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\11\5\1\0\1\251\1\252\14\5\1\0\3\5"+
    "\2\0\1\5\1\251\1\0\6\5\2\0\1\67\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\1\5"+
    "\2\253\6\5\1\0\16\5\1\0\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\10\5\1\254\1\0\16\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\255\5\0"+
    "\11\5\1\0\16\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\1\5\2\256\6\5\1\0\16\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\4\5\1\257\4\5\1\0\16\5\1\0\1\5\1\260"+
    "\1\5\2\0\2\5\1\0\6\5\2\0\1\67\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\7\5\1\45\6\5\1\0\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\10\5\2\45"+
    "\4\5\1\0\3\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\1\5\2\261\6\5\1\0\16\5\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\1\5\1\262"+
    "\1\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\13\5\1\262\2\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\1\5\1\263\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\13\5\1\263\2\5\1\0\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\10\5\1\242\1\0\16\5"+
    "\1\0\3\5\2\0\2\5\10\46\1\0\12\46\1\0"+
    "\11\46\2\264\3\46\1\0\27\46\2\0\10\46\1\0"+
    "\12\46\1\0\13\46\1\265\2\46\1\0\27\46\2\0"+
    "\10\46\1\0\12\46\1\0\16\46\1\0\1\46\1\266"+
    "\25\46\41\0\1\267\100\0\1\270\27\0\10\46\1\0"+
    "\12\46\1\0\16\46\1\0\3\46\1\271\23\46\1\0"+
    "\1\272\46\0\1\272\24\0\1\272\35\0\2\273\35\0"+
    "\10\57\1\0\24\57\2\274\3\57\1\0\27\57\2\0"+
    "\10\57\1\0\26\57\1\275\2\57\1\0\27\57\2\0"+
    "\10\57\1\0\31\57\1\0\1\57\1\276\25\57\41\0"+
    "\1\277\100\0\1\300\27\0\10\57\1\0\31\57\1\0"+
    "\3\57\1\301\23\57\1\0\1\302\46\0\1\302\24\0"+
    "\1\302\35\0\2\303\40\0\4\304\5\0\1\304\1\0"+
    "\1\304\7\0\1\304\12\0\2\304\4\0\4\304\12\0"+
    "\1\304\1\0\1\304\4\0\3\70\2\200\1\70\1\200"+
    "\2\0\4\70\1\0\1\200\1\0\1\70\3\0\1\70"+
    "\1\0\1\70\3\0\1\70\1\0\11\70\1\0\2\70"+
    "\1\200\13\70\1\0\1\200\1\70\1\200\2\0\2\70"+
    "\3\0\2\200\1\0\1\200\7\0\1\200\31\0\1\200"+
    "\14\0\1\200\1\0\1\200\5\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\4\5\1\144\11\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\1\5"+
    "\1\224\14\5\1\0\3\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\15\5\1\45\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\7\5\1\305"+
    "\1\5\1\0\16\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\306\5\0\11\5\1\0\16\5\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\307\5\0\11\5\1\0"+
    "\16\5\1\0\3\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\1\236\10\5\1\0\16\5\1\0\3\5\2\0"+
    "\1\236\1\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\10\5\2\310\4\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\45\5\0\11\5\1\0\16\5\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\4\5\1\205\11\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\15\5\1\241\1\0"+
    "\3\5\2\0\2\5\10\106\1\0\66\106\4\311\2\106"+
    "\1\216\2\106\1\311\1\217\1\311\7\106\1\311\12\106"+
    "\2\311\4\106\4\311\12\106\1\311\1\106\1\311\4\106"+
    "\1\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\10\5\1\312\1\0\16\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\1\5\1\313\14\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\16\5"+
    "\1\314\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\2\5\1\315\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\11\5\1\0\3\5\1\315\12\5\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\10\5\2\236\4\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\3\5\1\233\5\5\1\0\16\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\10\5\2\316\4\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\10\5"+
    "\2\317\4\5\1\0\3\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\320\5\0\11\5\1\0\16\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\1\5"+
    "\1\114\14\5\1\0\3\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\14\5\1\45\1\5\1\0"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\67\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\1\5"+
    "\2\321\6\5\1\0\16\5\1\0\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\12\5\1\322"+
    "\3\5\1\0\3\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\1\5\2\45\6\5\1\0\16\5\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\3\5\1\45"+
    "\5\5\1\0\16\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\1\45\15\5\1\0"+
    "\3\5\2\0\1\5\1\45\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\1\323\15\5\1\0\3\5\2\0\1\5"+
    "\1\323\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\10\5\1\132\1\0"+
    "\16\5\1\0\3\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\324"+
    "\5\0\11\5\1\0\16\5\1\0\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\325\5\0\11\5\1\0\16\5\1\0"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\67\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\326\5\0\11\5"+
    "\1\0\16\5\1\0\3\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\67\1\5\1\152\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\13\5\1\152"+
    "\2\5\1\0\3\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\1\5\2\213\5\5\1\213\1\0\16\5\1\0"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\67\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\10\5\2\327\4\5\1\0\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\1\5\1\330"+
    "\14\5\1\0\3\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\67\1\5\1\151\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\13\5\1\151\2\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\7\5\1\331\1\5\1\0\16\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\10\5\1\260\1\0"+
    "\6\5\1\332\7\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\152\5\0\11\5\1\0\16\5\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\3\5\1\333"+
    "\5\5\1\0\16\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\1\5\2\334\6\5\1\0\16\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\335\5\0"+
    "\11\5\1\0\16\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\6\5\1\336\7\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\7\5\1\337\6\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\7\5\1\340\1\5"+
    "\1\0\16\5\1\0\3\5\2\0\2\5\10\46\1\0"+
    "\12\46\1\0\13\46\1\341\2\46\1\0\27\46\2\0"+
    "\10\46\1\0\12\46\1\0\16\46\1\0\2\46\1\342"+
    "\24\46\2\0\10\46\1\0\12\46\1\0\2\46\1\265"+
    "\13\46\1\0\27\46\47\0\1\343\54\0\1\267\45\0"+
    "\10\46\1\0\12\46\1\0\1\46\1\344\14\46\1\0"+
    "\27\46\27\0\1\345\105\0\1\346\34\0\10\57\1\0"+
    "\26\57\1\347\2\57\1\0\27\57\2\0\10\57\1\0"+
    "\31\57\1\0\2\57\1\350\24\57\2\0\10\57\1\0"+
    "\15\57\1\275\13\57\1\0\27\57\47\0\1\351\54\0"+
    "\1\277\45\0\10\57\1\0\14\57\1\352\14\57\1\0"+
    "\27\57\27\0\1\353\105\0\1\354\37\0\4\355\5\0"+
    "\1\355\1\0\1\355\7\0\1\355\12\0\2\355\4\0"+
    "\4\355\12\0\1\355\1\0\1\355\5\0\6\5\2\0"+
    "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\10\5\1\45\1\0\16\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\1\5"+
    "\1\236\14\5\1\0\3\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\7\5\1\356\1\5\1\0\16\5\1\0"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\67\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\1\5"+
    "\2\357\6\5\1\0\16\5\1\0\3\5\2\0\2\5"+
    "\3\106\4\360\2\106\1\216\2\106\1\360\1\217\1\360"+
    "\7\106\1\360\12\106\2\360\4\106\4\360\12\106\1\360"+
    "\1\106\1\360\4\106\1\0\6\5\2\0\1\67\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\6\5\1\361\7\5\1\0\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\3\5\1\362\5\5\1\0"+
    "\16\5\1\0\3\5\2\0\2\5\54\0\1\363\20\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\10\5\1\213\1\0\16\5\1\0"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\67\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\16\5\1\364\3\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\15\5\1\365\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\4\5\1\45"+
    "\4\5\1\0\16\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\16\5\1\366\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\6\5\1\367\7\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\1\5\1\370\14\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\5\5\2\371\2\5\1\0\16\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\1\5\1\372\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\13\5\1\372\2\5\1\0\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\67\1\5\1\373\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\13\5\1\373\2\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\7\5\1\374\1\5\1\0\16\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\14\5\1\320\1\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\12\5"+
    "\1\375\3\5\1\0\3\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\67\1\5\1\45\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\11\5\1\0\13\5\1\45"+
    "\2\5\1\0\3\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\67\1\376\2\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\16\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\1\5"+
    "\1\377\14\5\1\0\3\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\4\5\1\236\11\5\1\0"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\67\1\5"+
    "\1\u0100\1\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\11\5\1\0\13\5\1\u0100\2\5\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\1\5\1\305\14\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\1\5\1\u0101\14\5"+
    "\1\0\3\5\2\0\2\5\10\46\1\0\12\46\1\0"+
    "\14\46\1\265\1\46\1\0\2\46\1\342\24\46\2\0"+
    "\10\46\1\0\12\46\1\0\7\46\1\u0102\6\46\1\0"+
    "\27\46\35\0\1\u0103\40\0\1\46\7\344\1\0\1\46"+
    "\3\344\1\46\1\344\1\46\1\344\2\46\1\0\16\344"+
    "\1\345\21\344\1\46\4\344\1\46\2\345\1\0\1\345"+
    "\1\u0104\4\345\1\u0104\2\0\3\345\1\0\1\345\1\0"+
    "\1\u0104\3\0\1\345\1\u0104\1\345\4\u0104\12\345\1\u0104"+
    "\16\345\1\0\3\345\1\u0104\1\0\2\345\40\0\1\267"+
    "\4\0\1\343\26\0\10\57\1\0\27\57\1\275\1\57"+
    "\1\0\2\57\1\350\24\57\2\0\10\57\1\0\22\57"+
    "\1\u0105\6\57\1\0\27\57\35\0\1\u0106\40\0\1\57"+
    "\7\352\1\0\1\57\3\352\1\57\1\352\1\57\1\352"+
    "\3\57\16\352\1\353\21\352\1\57\4\352\1\57\2\353"+
    "\1\0\1\353\1\u0107\4\353\1\u0107\2\0\3\353\1\0"+
    "\1\353\1\0\1\u0107\3\0\1\353\1\u0107\1\353\4\u0107"+
    "\12\353\1\u0107\16\353\1\0\3\353\1\u0107\1\0\2\353"+
    "\40\0\1\277\4\0\1\351\31\0\4\u0108\5\0\1\u0108"+
    "\1\0\1\u0108\7\0\1\u0108\12\0\2\u0108\4\0\4\u0108"+
    "\12\0\1\u0108\1\0\1\u0108\5\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\12\5\1\u0109\3\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\332\5\0\11\5\1\0\16\5"+
    "\1\0\3\5\2\0\2\5\3\106\4\u010a\2\106\1\216"+
    "\2\106\1\u010a\1\217\1\u010a\7\106\1\u010a\12\106\2\u010a"+
    "\4\106\4\u010a\12\106\1\u010a\1\106\1\u010a\4\106\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\4\5\1\u010b\4\5\1\0\16\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\u010c\5\0"+
    "\11\5\1\0\16\5\1\0\3\5\2\0\2\5\41\0"+
    "\2\u010d\105\0\1\u010e\20\0\6\5\2\0\1\67\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\16\5\1\u010f\3\5\2\0\2\5\16\0\1\u0110"+
    "\31\0\1\u0110\14\0\1\u0110\7\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\45\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\2\5\1\45\13\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\1\5\1\133\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\5\0\11\5"+
    "\1\0\13\5\1\133\2\5\1\0\3\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\67\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\5\0\7\5\1\u0111\1\5\1\0"+
    "\16\5\1\0\3\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\67\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\5\0\11\5\1\0\12\5\1\337\3\5\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\1\5\2\u0112"+
    "\6\5\1\0\16\5\1\0\3\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\10\5\2\u0113\4\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\1\5\1\u0114\14\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\1\5\2\u0115\6\5"+
    "\1\0\16\5\1\0\3\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\11\5\1\0\4\5\1\315\11\5\1\0"+
    "\3\5\2\0\2\5\1\0\6\5\2\0\1\67\2\5"+
    "\1\u0116\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\3\5\1\u0116\12\5\1\0\3\5\2\0"+
    "\2\5\10\46\1\0\12\46\1\0\7\46\1\344\6\46"+
    "\1\0\27\46\35\0\1\345\40\0\10\57\1\0\22\57"+
    "\1\352\6\57\1\0\27\57\35\0\1\353\43\0\4\5"+
    "\5\0\1\5\1\0\1\5\7\0\1\5\12\0\2\5"+
    "\4\0\4\5\12\0\1\5\1\0\1\5\5\0\6\5"+
    "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\u0117\5\0\11\5\1\0\16\5\1\0\3\5\2\0"+
    "\2\5\3\106\4\15\2\106\1\216\2\106\1\15\1\217"+
    "\1\15\7\106\1\15\12\106\2\15\4\106\4\15\12\106"+
    "\1\15\1\106\1\15\4\106\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\7\5\1\u0118\1\5\1\0\16\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\11\5\1\0\16\5"+
    "\1\u0119\3\5\2\0\2\5\64\0\1\u011a\50\0\2\u011b"+
    "\13\0\2\u0110\76\0\1\u011c\12\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\10\5\2\u011d\4\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\133\5\0\11\5\1\0\16\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\5\0"+
    "\11\5\1\0\5\5\1\45\10\5\1\0\3\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\67\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\5\0\1\5\2\213\6\5"+
    "\1\0\16\5\1\0\3\5\2\0\2\5\1\0\5\5"+
    "\1\45\2\0\1\67\3\5\1\0\1\45\5\0\1\5"+
    "\1\0\1\5\5\0\11\5\1\0\2\5\1\45\13\5"+
    "\1\0\1\45\1\5\1\45\2\0\2\5\1\0\6\5"+
    "\2\0\1\67\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\5\0\10\5\1\u011e\1\0\16\5\1\0\3\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\67\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\5\0\11\5\1\0"+
    "\6\5\1\152\7\5\1\0\3\5\2\0\2\5\41\0"+
    "\2\u011f\103\0\1\u0120\62\0\2\u0110\105\0\1\u0121\20\0"+
    "\6\5\2\0\1\67\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\5\0\7\5\1\u0114\1\5\1\0\16\5"+
    "\1\0\3\5\2\0\2\5\1\0\6\5\2\0\1\67"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\u0122\5\0"+
    "\11\5\1\0\16\5\1\0\3\5\2\0\2\5\13\0"+
    "\1\u0123\45\0\1\u0123\66\0\1\u0124\31\0\1\u0110\135\0"+
    "\1\u0125\63\0\1\u0126\104\0\1\u0110\62\0\1\u0127\55\0"+
    "\1\u0128\117\0\1\u0129\56\0\2\u012a\100\0\1\u012b\104\0"+
    "\1\u012c\75\0\2\u0110\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16860];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };
  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\4\1\1\11\1\1\2\11"+
    "\2\1\1\11\22\1\2\11\7\1\1\11\6\1\1\0"+
    "\1\1\1\0\16\1\1\11\51\1\2\0\1\1\2\0"+
    "\3\1\2\0\1\1\3\0\1\1\1\0\15\1\1\11"+
    "\47\1\2\0\1\1\2\0\3\1\2\0\1\1\3\0"+
    "\7\1\1\0\26\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\2\0\5\1\2\0\1\1\1\0\14\1\2\0"+
    "\1\1\3\0\4\1\3\0\1\11\10\1\4\0\2\1"+
    "\3\0\1\1\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;
  /** the current state of the DFA */
  private int zzState;
  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;
  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  /** the current text position in the buffer */
  private int zzCurrentPos;
  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;
  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;
  /** number of newlines encountered up to the start of the matched text */
  private int yyline;
  /** the number of characters up to the start of the matched text */
  private int yychar;
  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;
  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;
  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;
  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public LEGALALPHA2012TokenMakerEng() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LEGALALPHA2012TokenMakerEng(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LEGALALPHA2012TokenMakerEng(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }
   
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */
    if (zzReader != null)
      zzReader.close();
  }
  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }
  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }
  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }
  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }
  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }
  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }
    throw new Error(message);
  } 
  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);
    zzMarkedPos -= number;
  }
  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;
    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;
    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    while (true) {
      zzMarkedPosL = zzMarkedPos;
      zzAction = -1;
      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }
        }
      }
      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 23: break;
        case 13: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1-1, Token.COMMENT_MULTILINE);
          }
        case 24: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 25: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 26: break;
        case 19: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 27: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 28: break;
        case 3: 
          { addToken(Token.RESERVED_WORD);
          }
        case 29: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 30: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 31: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 32: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 33: break;
        case 22: 
          { addToken(Token.DATA_TYPE);
          }
        case 34: break;
        case 16: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 35: break;
        case 21: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 36: break;
        case 20: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 37: break;
        case 15: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 38: break;
        case 6: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 39: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 40: break;
        case 10: 
          { addToken(Token.OPERATOR);
          }
        case 41: break;
        case 8: 
          { start = zzMarkedPos-1; yybegin(MLC);
          }
        case 42: break;
        case 11: 
          { 
          }
        case 43: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 301: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 302: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 303: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }
  
	public boolean getShouldIndentNextLineAfter(Token t) {
		if (t!=null) {
			if (t.length()==1) {
				char ch = t.getTextArray()[t.getTextOffset()];
				return ch=='[';
			}
			if (t.length()>1) {
				return t.getLexeme().equalsIgnoreCase("please");
			}
		}
		return false;
	}
}