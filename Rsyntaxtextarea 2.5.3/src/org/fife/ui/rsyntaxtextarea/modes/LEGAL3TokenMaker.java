/* The following code was generated by JFlex 1.4.1 on 11/08/15 17:20 */

/*
 * Generated on 8/11/15 5:20 PM
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Arquivo de sintaxe da linguagem LEGAL.
 */

public class LEGAL3TokenMaker extends AbstractJFlexCTokenMaker {
  /** This character denotes the end of file */
  public static final int YYEOF = -1;
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\21\1\31\1\15"+
    "\1\20\1\1\1\33\1\31\1\7\2\30\1\33\1\27\1\31\1\27"+
    "\1\25\1\34\1\4\1\66\1\16\1\16\1\67\1\74\1\74\1\6"+
    "\1\75\1\3\1\46\1\31\1\77\1\33\1\77\1\31\1\32\1\51"+
    "\1\5\1\50\1\55\1\26\1\42\1\56\1\35\1\44\1\72\1\73"+
    "\1\45\1\63\1\57\1\61\1\40\1\60\1\52\1\41\1\36\1\12"+
    "\1\54\1\47\1\24\1\1\1\70\1\30\1\11\1\30\1\17\1\2"+
    "\1\0\1\51\1\14\1\50\1\55\1\26\1\43\1\56\1\100\1\44"+
    "\1\72\1\73\1\45\1\63\1\13\1\61\1\40\1\60\1\53\1\41"+
    "\1\37\1\12\1\54\1\101\1\24\1\1\1\70\1\22\1\17\1\23"+
    "\1\31\101\0\1\1\1\64\1\1\1\62\5\1\1\65\3\1\1\76"+
    "\2\1\1\0\2\1\1\71\3\1\1\0\6\1\1\0\2\1\1\64"+
    "\1\1\1\62\2\1\1\0\2\1\1\65\3\1\1\76\2\1\1\0"+
    "\2\1\1\71\3\1\1\0\6\1\1\0\1\1\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\1\1\11\1\12\3\1\1\11"+
    "\3\1\1\11\2\1\1\11\3\1\2\11\1\13\1\14"+
    "\1\15\7\13\1\16\6\13\1\0\1\17\1\0\2\17"+
    "\3\1\2\4\1\20\1\21\13\1\2\11\6\1\1\11"+
    "\4\1\1\11\16\1\1\11\3\1\1\11\1\1\3\13"+
    "\2\0\1\13\2\0\3\13\2\0\1\13\3\0\1\21"+
    "\1\0\1\22\4\1\1\4\1\23\1\4\20\1\1\11"+
    "\1\1\1\11\42\1\3\13\2\0\1\13\2\0\3\13"+
    "\2\0\1\13\3\0\3\1\1\4\36\1\2\13\1\0"+
    "\1\13\1\24\1\0\2\13\1\0\1\13\1\25\2\0"+
    "\1\1\1\4\23\1\1\11\1\13\2\0\1\13\3\0"+
    "\1\4\3\1\1\11\5\1\1\26\10\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\306\0\u0210\0\u0252\0\306\0\u0294\0\306\0\306\0\u02d6"+
    "\0\u0318\0\306\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4"+
    "\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4"+
    "\0\u06f6\0\u0108\0\u0738\0\306\0\306\0\u077a\0\u07bc\0\u07fe"+
    "\0\u0840\0\u0882\0\u08c4\0\u0906\0\306\0\u0948\0\u098a\0\u09cc"+
    "\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u02d6\0\u0b58\0\u0b9a"+
    "\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\306\0\u0d26\0\u0d68"+
    "\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78"+
    "\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188"+
    "\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398"+
    "\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8"+
    "\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8"+
    "\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8"+
    "\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8"+
    "\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u0b9a"+
    "\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\306\0\u1f32\0\u1f74"+
    "\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184"+
    "\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394"+
    "\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4"+
    "\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4"+
    "\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4"+
    "\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4"+
    "\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4"+
    "\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4"+
    "\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204"+
    "\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414"+
    "\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624"+
    "\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u3834"+
    "\0\u3876\0\u38b8\0\u38fa\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u3a44"+
    "\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54"+
    "\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64"+
    "\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0\0\u4032\0\u4074"+
    "\0\u40b6\0\u40f8\0\u413a\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284"+
    "\0\u42c6\0\u2acc\0\u4308\0\u434a\0\u3b4c\0\u438c\0\u43ce\0\u3cd8"+
    "\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518\0\u0ffc\0\u455a\0\u459c"+
    "\0\u45de\0\u4620\0\u4662\0\u0108\0\u46a4\0\u46e6\0\u4728\0\u476a"+
    "\0\u47ac\0\u47ee\0\u4830\0\u4872";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\6\1\4\1\11"+
    "\1\4\1\5\1\12\1\10\1\13\1\6\1\4\1\14"+
    "\1\15\1\16\1\17\1\5\1\20\1\21\1\22\1\17"+
    "\2\4\2\22\1\23\2\24\1\25\1\26\2\27\1\30"+
    "\1\31\1\4\1\5\1\32\1\33\2\34\1\35\1\36"+
    "\1\37\1\12\1\5\1\40\1\5\1\41\2\5\2\6"+
    "\3\5\1\42\2\6\1\5\1\22\1\23\1\5\10\43"+
    "\1\44\12\43\1\45\11\43\1\46\4\43\1\47\1\50"+
    "\3\43\1\51\30\43\1\52\1\53\10\54\1\55\24\54"+
    "\1\56\4\54\1\57\1\60\3\54\1\61\30\54\1\62"+
    "\1\63\103\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\30\5"+
    "\1\0\2\5\3\65\2\6\1\65\1\6\2\0\4\65"+
    "\1\0\1\6\1\0\1\65\3\0\1\65\1\66\1\67"+
    "\3\0\1\65\2\0\11\65\1\0\17\65\2\6\4\65"+
    "\2\6\1\65\1\0\5\65\2\6\1\65\1\6\2\0"+
    "\4\65\1\0\1\6\1\0\1\65\3\0\1\70\1\66"+
    "\1\67\3\0\1\65\2\0\11\65\1\0\17\65\2\6"+
    "\4\65\2\6\1\65\1\0\2\65\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\1\5\2\71\6\5\1\0\3\5\2\72\23\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\12\5\1\73\15\5\1\0\2\5\10\13\1\74\1\75"+
    "\3\13\1\76\64\13\21\0\1\15\63\0\2\77\1\0"+
    "\1\77\7\0\1\77\47\0\2\77\4\0\2\77\5\0"+
    "\6\5\2\0\1\64\1\5\1\100\1\5\1\0\1\5"+
    "\5\0\1\101\1\0\1\5\6\0\4\5\1\102\4\5"+
    "\1\0\5\5\1\103\2\5\1\100\17\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\2\5\1\104"+
    "\25\5\1\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\7\5"+
    "\1\105\1\5\1\0\3\5\2\106\23\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\42\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\1\107\1\5"+
    "\1\110\2\111\5\5\1\112\4\5\2\42\7\5\1\0"+
    "\1\5\1\107\1\0\5\5\1\42\2\0\1\64\3\5"+
    "\1\0\1\42\5\0\1\5\1\0\1\113\6\0\7\5"+
    "\1\114\1\5\1\0\2\5\1\115\7\5\1\116\4\5"+
    "\2\42\4\5\2\42\1\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\1\117\2\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\120\6\0\7\5\1\107\1\5\1\0\2\5"+
    "\1\121\2\122\10\5\1\123\12\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\1\5\1\124\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\10\5"+
    "\1\124\17\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\1\125\2\5\1\0\1\42\5\0\1\42\1\0\1\126"+
    "\6\0\7\5\1\127\1\5\1\0\15\5\1\130\1\5"+
    "\2\42\4\5\1\42\2\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\1\131\2\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\10\5\1\132\1\0\12\5\1\133"+
    "\1\5\1\42\13\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\1\5\2\134\1\135\4\5\1\136\1\0\1\5"+
    "\1\137\3\5\1\140\6\5\1\141\4\5\1\142\6\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\143\6\0\11\5\1\0"+
    "\15\5\1\144\1\130\11\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\145\6\0\11\5\1\0\2\5\1\146\25\5\1\0"+
    "\2\5\1\0\4\5\1\42\1\5\2\0\1\64\2\5"+
    "\1\42\1\0\1\5\5\0\1\5\1\0\1\147\6\0"+
    "\7\5\1\150\1\5\1\0\2\5\1\42\17\5\1\123"+
    "\5\5\1\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\7\5"+
    "\1\105\1\5\1\0\30\5\1\0\2\5\1\0\4\5"+
    "\1\151\1\5\2\0\1\64\1\42\1\5\1\151\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\1\107\10\5"+
    "\1\0\30\5\1\0\1\107\1\5\1\0\6\5\2\0"+
    "\1\64\1\152\2\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\42\6\0\7\5\1\153\1\5\1\0\6\5\1\42"+
    "\3\5\1\154\15\5\1\0\2\5\10\43\1\0\12\43"+
    "\1\0\17\43\1\0\34\43\2\0\10\43\1\0\12\43"+
    "\1\0\12\43\2\155\3\43\1\0\34\43\2\0\10\43"+
    "\1\0\12\43\1\0\12\43\2\156\3\43\1\0\1\157"+
    "\33\43\40\0\2\160\4\0\1\161\35\0\10\43\1\0"+
    "\12\43\1\0\17\43\1\0\3\43\1\162\30\43\1\0"+
    "\1\163\36\0\2\164\111\0\1\163\31\0\1\163\10\54"+
    "\1\0\32\54\1\0\34\54\2\0\10\54\1\0\25\54"+
    "\2\165\3\54\1\0\34\54\2\0\10\54\1\0\25\54"+
    "\2\166\3\54\1\0\1\167\33\54\40\0\2\170\4\0"+
    "\1\171\35\0\10\54\1\0\32\54\1\0\3\54\1\172"+
    "\30\54\1\0\1\173\36\0\2\174\111\0\1\173\31\0"+
    "\1\173\12\0\1\175\67\0\7\65\2\0\4\65\1\0"+
    "\1\65\1\0\1\65\3\0\1\65\1\0\1\65\3\0"+
    "\1\65\2\0\11\65\1\0\30\65\1\0\5\65\2\176"+
    "\1\65\1\176\2\0\4\65\1\0\1\176\1\0\1\65"+
    "\3\0\1\65\1\0\1\65\1\177\2\0\1\65\2\0"+
    "\11\65\1\0\17\65\2\176\4\65\2\176\1\65\1\0"+
    "\5\65\4\200\2\0\3\65\1\200\1\0\1\200\1\0"+
    "\1\65\3\0\1\65\1\0\1\200\3\0\1\65\2\0"+
    "\5\65\2\200\2\65\1\0\1\65\2\200\3\65\1\200"+
    "\10\65\2\200\4\65\2\200\1\65\1\0\2\65\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\201\6\0\11\5\1\0\30\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\2\5\1\202"+
    "\25\5\1\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\1\5"+
    "\2\203\6\5\1\0\3\5\2\204\23\5\1\0\2\5"+
    "\11\74\1\205\3\74\1\206\70\74\1\13\1\74\2\13"+
    "\1\0\1\13\1\207\4\13\20\74\1\13\3\74\1\13"+
    "\7\74\1\13\12\74\2\13\4\74\1\13\5\74\3\65"+
    "\2\77\1\65\1\77\2\0\4\65\1\0\1\77\1\0"+
    "\1\65\3\0\1\65\1\0\1\67\3\0\1\65\2\0"+
    "\11\65\1\0\17\65\2\77\4\65\2\77\1\65\1\0"+
    "\2\65\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\1\5\2\210\6\5"+
    "\1\0\5\5\1\211\3\5\1\212\16\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\3\5\1\213\5\5\1\0"+
    "\30\5\1\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\3\5"+
    "\1\214\5\5\1\0\1\5\1\215\7\5\1\216\16\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\217\6\0\11\5\1\0"+
    "\30\5\1\0\2\5\1\0\4\5\1\220\1\5\2\0"+
    "\1\64\2\5\1\220\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\30\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\3\5\2\221\23\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\7\5\1\222"+
    "\1\5\1\0\30\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\14\5\1\42\13\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\3\5\2\223"+
    "\23\5\1\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\224\6\0\11\5"+
    "\1\0\30\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\3\5\2\42\23\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\1\5\1\225\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\3\5"+
    "\2\226\3\5\1\225\3\5\1\227\13\5\1\0\2\5"+
    "\1\0\4\5\1\42\1\5\2\0\1\64\2\5\1\42"+
    "\1\0\1\230\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\7\5\1\203\10\5\1\230\7\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\27\5\1\231"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\10\5\1\232"+
    "\1\0\14\5\1\42\13\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\23\5\1\203\4\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\10\5\1\233\1\0"+
    "\30\5\1\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\7\5"+
    "\1\234\1\235\1\0\5\5\1\236\22\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\237\6\0\11\5\1\0\30\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\42"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\30\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\1\5\2\240"+
    "\6\5\1\0\1\5\1\241\3\5\1\242\1\243\21\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\21\5\1\42\6\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\1\5\1\244\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\10\5\1\244\17\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\7\5\1\245\20\5\1\0\2\5\1\0\4\5\1\42"+
    "\1\5\2\0\1\64\2\5\1\42\1\0\1\230\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\30\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\3\5"+
    "\2\246\23\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\2\5\1\247\25\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\10\5\1\250\1\0\3\5\2\42"+
    "\23\5\1\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\7\5"+
    "\1\251\1\5\1\0\16\5\1\42\11\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\2\5\1\127"+
    "\2\252\23\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\253\6\0"+
    "\11\5\1\0\2\5\1\254\25\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\255\6\0\11\5\1\0\30\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\7\5\1\235\1\5\1\0"+
    "\30\5\1\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\2\5\1\256\25\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\1\257\2\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\30\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\3\5\1\260\5\5\1\0"+
    "\1\5\1\261\26\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\3\5\1\262\5\5\1\0\30\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\3\5\2\263"+
    "\14\5\1\264\6\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\3\5\2\265\23\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\4\5\1\266\2\267\2\5"+
    "\1\0\30\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\3\5\2\270\23\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\4\5\1\271\4\5\1\0\3\5"+
    "\2\272\16\5\1\273\4\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\6\5\1\221\21\5\1\0"+
    "\2\5\1\0\4\5\1\42\1\5\2\0\1\64\1\5"+
    "\2\42\1\0\1\230\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\10\5\1\42\7\5\1\230\7\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\1\5\2\274\6\5"+
    "\1\0\30\5\1\0\2\5\10\43\1\0\12\43\1\0"+
    "\12\43\2\275\3\43\1\0\34\43\2\0\10\43\1\0"+
    "\12\43\1\0\14\43\1\276\2\43\1\0\34\43\2\0"+
    "\10\43\1\0\12\43\1\0\17\43\1\0\1\43\1\277"+
    "\32\43\42\0\1\300\106\0\1\301\34\0\10\43\1\0"+
    "\12\43\1\0\17\43\1\0\3\43\1\302\30\43\1\0"+
    "\1\303\47\0\1\303\31\0\1\303\36\0\2\304\42\0"+
    "\10\54\1\0\25\54\2\305\3\54\1\0\34\54\2\0"+
    "\10\54\1\0\27\54\1\306\2\54\1\0\34\54\2\0"+
    "\10\54\1\0\32\54\1\0\1\54\1\307\32\54\42\0"+
    "\1\310\106\0\1\311\34\0\10\54\1\0\32\54\1\0"+
    "\3\54\1\312\30\54\1\0\1\313\47\0\1\313\31\0"+
    "\1\313\36\0\2\314\45\0\4\315\5\0\1\315\1\0"+
    "\1\315\7\0\1\315\13\0\2\315\4\0\2\315\3\0"+
    "\1\315\10\0\2\315\4\0\2\315\4\0\3\65\2\176"+
    "\1\65\1\176\2\0\4\65\1\0\1\176\1\0\1\65"+
    "\3\0\1\65\1\0\1\65\3\0\1\65\2\0\11\65"+
    "\1\0\17\65\2\176\4\65\2\176\1\65\1\0\2\65"+
    "\3\0\2\176\1\0\1\176\7\0\1\176\47\0\2\176"+
    "\4\0\2\176\5\0\6\5\2\0\1\64\1\5\1\316"+
    "\1\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\10\5\1\316\17\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\1\5\1\317\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\10\5"+
    "\1\317\17\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\2\5\1\42\25\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\14\5\1\320\13\5"+
    "\1\0\2\5\10\74\1\0\74\74\4\321\2\74\1\205"+
    "\2\74\1\321\1\206\1\321\7\74\1\321\13\74\2\321"+
    "\4\74\2\321\3\74\1\321\10\74\2\321\4\74\2\321"+
    "\4\74\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\3\5"+
    "\2\223\6\5\1\221\14\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\7\5\1\223\1\5\1\0\30\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\1\322\2\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\30\5\1\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\10\5"+
    "\1\323\1\0\30\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\110"+
    "\6\0\11\5\1\0\30\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\1\247\2\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\30\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\1\324\2\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\30\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\1\5\1\325"+
    "\1\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\10\5\1\325\17\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\7\5\1\326\1\5\1\0\30\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\12\5\1\42\15\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\4\5\1\327\4\5\1\0\30\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\42\6\0\11\5\1\0\30\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\1\5\2\203\6\5"+
    "\1\0\30\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\13\5\1\221\14\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\5\5\1\330\22\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\3\5\1\110"+
    "\5\5\1\0\30\5\1\0\2\5\1\0\4\5\1\42"+
    "\1\5\2\0\1\64\2\5\1\42\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\30\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\6\5"+
    "\1\331\21\5\1\0\2\5\1\0\4\5\1\42\1\5"+
    "\2\0\1\64\2\5\1\42\1\0\1\230\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\20\5\1\230\7\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\7\5\1\125"+
    "\1\5\1\0\30\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\203\1\0\1\5"+
    "\6\0\11\5\1\0\30\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\4\5\1\221\4\5\1\0\30\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\12\5"+
    "\1\112\15\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\1\5\1\327\1\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\10\5\1\327\17\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\332\6\0\11\5\1\0\30\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\10\5\1\333"+
    "\1\0\30\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\334\6\0"+
    "\11\5\1\0\30\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\335"+
    "\6\0\11\5\1\0\30\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\1\5\2\336\6\5\1\0\30\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\1\223\2\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\30\5\1\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\5\5\1\203\22\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\3\5\2\203\23\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\337\6\0\11\5\1\0\30\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\5\5\1\223\22\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\340"+
    "\6\0\11\5\1\0\30\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\2\5\1\341\25\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\3\5"+
    "\2\342\23\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\1\5\1\343\1\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\10\5\1\343\17\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\3\5"+
    "\2\344\23\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\10\5\1\42\1\0\30\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\7\5\1\224\1\5\1\0\30\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\345\6\0\11\5\1\0\30\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\7\5\1\346"+
    "\1\5\1\0\30\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\6\5\1\347\5\5\1\350\13\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\351\6\0\11\5\1\0"+
    "\30\5\1\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\7\5"+
    "\1\352\1\5\1\0\30\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\10\5\1\353\1\0\2\5\1\104\25\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\7\5\1\354"+
    "\1\5\1\0\30\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\260"+
    "\6\0\11\5\1\0\30\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\1\5\2\355\6\5\1\0\30\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\7\5\1\356\1\5"+
    "\1\0\30\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\325\6\0"+
    "\11\5\1\0\30\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\12\5\1\357\15\5\1\0\2\5"+
    "\10\43\1\0\12\43\1\0\14\43\1\360\2\43\1\0"+
    "\34\43\2\0\10\43\1\0\12\43\1\0\17\43\1\0"+
    "\2\43\1\361\31\43\2\0\10\43\1\0\12\43\1\0"+
    "\2\43\1\276\14\43\1\0\34\43\50\0\1\362\61\0"+
    "\1\300\53\0\10\43\1\0\12\43\1\0\1\43\1\363"+
    "\15\43\1\0\34\43\27\0\1\364\114\0\1\365\41\0"+
    "\10\54\1\0\27\54\1\366\2\54\1\0\34\54\2\0"+
    "\10\54\1\0\32\54\1\0\2\54\1\367\31\54\2\0"+
    "\10\54\1\0\15\54\1\306\14\54\1\0\34\54\50\0"+
    "\1\370\61\0\1\310\53\0\10\54\1\0\14\54\1\371"+
    "\15\54\1\0\34\54\27\0\1\372\114\0\1\373\44\0"+
    "\4\374\5\0\1\374\1\0\1\374\7\0\1\374\13\0"+
    "\2\374\4\0\2\374\3\0\1\374\10\0\2\374\4\0"+
    "\2\374\5\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\1\5\2\375\6\5"+
    "\1\0\30\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\1\5\1\203\26\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\2\5\1\257\25\5"+
    "\1\0\2\5\3\74\4\376\2\74\1\205\2\74\1\376"+
    "\1\206\1\376\7\74\1\376\13\74\2\376\4\74\2\376"+
    "\3\74\1\376\10\74\2\376\4\74\2\376\4\74\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\2\5\1\217\25\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\12\5\1\377\15\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\u0100"+
    "\6\0\11\5\1\0\30\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\1\5\2\221\6\5\1\0\30\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\10\5\1\u0101\1\0"+
    "\30\5\1\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\1\5"+
    "\2\223\6\5\1\0\30\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\12\5\1\u0102\15\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\2\5"+
    "\1\u0103\25\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\3\5\2\u0104\23\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\1\203\2\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\30\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\3\5"+
    "\2\u0105\23\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\1\5\2\u0106\6\5\1\0\30\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\2\5\1\42\7\5"+
    "\1\42\15\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\1\5\2\u0107\6\5\1\0\30\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\1\5\1\u0108\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\10\5"+
    "\1\u0108\17\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\1\5\2\u0109\6\5\1\0\30\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\14\5\1\223\13\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\6\5\1\203\21\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\u010a"+
    "\6\0\11\5\1\0\30\5\1\0\2\5\1\0\4\5"+
    "\1\u010b\1\5\2\0\1\64\2\5\1\u010b\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\30\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\6\5\1\336\21\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\42"+
    "\6\0\11\5\1\0\2\5\1\u010c\25\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\u010d\6\0\11\5\1\0\30\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\4\5\1\42\4\5"+
    "\1\0\30\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\15\5\1\u010e\12\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\7\5\1\127\1\5\1\0\30\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\1\5\1\u010f"+
    "\1\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\10\5\1\u010f\17\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\15\5\1\u0110\12\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\7\5\1\u0111\20\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\3\5\2\u0112\23\5\1\0\2\5"+
    "\10\43\1\0\12\43\1\0\15\43\1\276\1\43\1\0"+
    "\2\43\1\361\31\43\2\0\10\43\1\0\12\43\1\0"+
    "\10\43\1\u0113\6\43\1\0\34\43\36\0\1\u0114\45\0"+
    "\1\43\7\363\1\0\1\43\3\363\1\43\1\363\1\43"+
    "\1\363\2\43\1\0\17\363\1\364\33\363\1\43\2\364"+
    "\1\0\1\364\1\u0115\4\364\1\u0115\2\0\3\364\1\0"+
    "\1\364\1\0\1\u0115\3\0\1\364\1\u0115\1\364\5\u0115"+
    "\12\364\1\u0115\30\364\1\0\2\364\41\0\1\300\4\0"+
    "\1\362\33\0\10\54\1\0\30\54\1\306\1\54\1\0"+
    "\2\54\1\367\31\54\2\0\10\54\1\0\23\54\1\u0116"+
    "\6\54\1\0\34\54\36\0\1\u0117\45\0\1\54\7\371"+
    "\1\0\1\54\3\371\1\54\1\371\1\54\1\371\3\54"+
    "\17\371\1\372\33\371\1\54\2\372\1\0\1\372\1\u0118"+
    "\4\372\1\u0118\2\0\3\372\1\0\1\372\1\0\1\u0118"+
    "\3\0\1\372\1\u0118\1\372\5\u0118\12\372\1\u0118\30\372"+
    "\1\0\2\372\41\0\1\310\4\0\1\370\36\0\4\u0119"+
    "\5\0\1\u0119\1\0\1\u0119\7\0\1\u0119\13\0\2\u0119"+
    "\4\0\2\u0119\3\0\1\u0119\10\0\2\u0119\4\0\2\u0119"+
    "\5\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\112\6\0\11\5\1\0\30\5\1\0"+
    "\2\5\3\74\4\u011a\2\74\1\205\2\74\1\u011a\1\206"+
    "\1\u011a\7\74\1\u011a\13\74\2\u011a\4\74\2\u011a\3\74"+
    "\1\u011a\10\74\2\u011a\4\74\2\u011a\4\74\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\4\5\1\225\4\5\1\0\30\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\3\5"+
    "\2\343\23\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\7\5\1\327\1\5\1\0\30\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\42\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\17\5\2\42\7\5"+
    "\1\0\2\5\1\0\5\5\1\42\2\0\1\64\3\5"+
    "\1\0\1\42\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\17\5\2\42\4\5\2\42\1\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\5\5\1\u011b"+
    "\22\5\1\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\1\5"+
    "\2\u011c\6\5\1\0\30\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\u011d\6\0\11\5\1\0\30\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\2\5\1\u011e\25\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\6\5\1\u010f\21\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\22\5\1\u011f\5\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\10\5\1\203\1\0\30\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\u0120\6\0\11\5\1\0"+
    "\2\5\1\42\25\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\6\5\1\u0121\21\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\10\5\1\u0122\1\0\30\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\5\5\1\u0123\22\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\2\5\1\u0124\25\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\1\5\1\u0125"+
    "\26\5\1\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\2\5\1\346\25\5\1\0\2\5\10\43\1\0"+
    "\12\43\1\0\10\43\1\363\6\43\1\0\34\43\36\0"+
    "\1\364\45\0\10\54\1\0\23\54\1\371\6\54\1\0"+
    "\34\54\36\0\1\372\50\0\4\5\5\0\1\5\1\0"+
    "\1\5\7\0\1\5\13\0\2\5\4\0\2\5\3\0"+
    "\1\5\10\0\2\5\4\0\2\5\4\0\3\74\4\13"+
    "\2\74\1\205\2\74\1\13\1\206\1\13\7\74\1\13"+
    "\13\74\2\13\4\74\2\13\3\74\1\13\10\74\2\13"+
    "\4\74\2\13\4\74\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\2\5\1\u0126\25\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\7\5\1\152\1\5\1\0\30\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\3\5"+
    "\2\u0127\23\5\1\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\3\5\2\u0128\23\5\1\0\2\5\1\0"+
    "\6\5\2\0\1\64\1\42\2\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\30\5\1\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\37\6\0\11\5\1\0\30\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\1\203\10\5"+
    "\1\0\30\5\1\0\1\203\1\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\u0129"+
    "\6\0\11\5\1\0\30\5\1\0\2\5\1\0\6\5"+
    "\2\0\1\64\1\u0126\2\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\30\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\10\5\1\221\1\0\30\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\14\5\1\u012a\13\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\7\5\1\221\1\5\1\0\30\5\1\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\10\5\1\u0124\1\0\30\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\7\5\1\u012b"+
    "\1\5\1\0\30\5\1\0\2\5\1\0\6\5\2\0"+
    "\1\64\1\5\1\u012c\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\10\5\1\u012c\17\5"+
    "\1\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\2\5\1\343\25\5\1\0\2\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18612];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };
  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\2\1\1\11\1\1\2\11"+
    "\2\1\1\11\21\1\2\11\7\1\1\11\6\1\1\0"+
    "\1\1\1\0\7\1\1\11\61\1\2\0\1\1\2\0"+
    "\3\1\2\0\1\1\3\0\1\1\1\0\6\1\1\11"+
    "\71\1\2\0\1\1\2\0\3\1\2\0\1\1\3\0"+
    "\44\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0"+
    "\27\1\2\0\1\1\3\0\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;
  /** the current state of the DFA */
  private int zzState;
  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;
  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  /** the current text position in the buffer */
  private int zzCurrentPos;
  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;
  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;
  /** number of newlines encountered up to the start of the matched text */
  private int yyline;
  /** the number of characters up to the start of the matched text */
  private int yychar;
  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;
  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;
  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;
  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public LEGAL3TokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LEGAL3TokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LEGAL3TokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 276) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }
    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */
    if (zzReader != null)
      zzReader.close();
  }
  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }
  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }
  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }
  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }
  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }
  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }
    throw new Error(message);
  } 
  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);
    zzMarkedPos -= number;
  }
  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;
    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;
    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    while (true) {
      zzMarkedPosL = zzMarkedPos;
      zzAction = -1;
      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }
        }
      }
      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 23: break;
        case 13: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1-1, Token.COMMENT_MULTILINE);
          }
        case 24: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 25: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 26: break;
        case 19: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 27: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 28: break;
        case 9: 
          { addToken(Token.RESERVED_WORD);
          }
        case 29: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 30: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 31: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 32: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 33: break;
        case 22: 
          { addToken(Token.DATA_TYPE);
          }
        case 34: break;
        case 16: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 35: break;
        case 21: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 36: break;
        case 20: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 37: break;
        case 15: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 38: break;
        case 5: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 39: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 40: break;
        case 10: 
          { addToken(Token.OPERATOR);
          }
        case 41: break;
        case 7: 
          { start = zzMarkedPos-1; yybegin(MLC);
          }
        case 42: break;
        case 11: 
          { 
          }
        case 43: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 301: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 302: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 303: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }
  
  public boolean getShouldIndentNextLineAfter(Token t) {
		if (t!=null) {
			if (t.length()==1) {
				char ch = t.getTextArray()[t.getTextOffset()];
				return ch=='[';
			}
			if (t.length()>1) {
				return t.getLexeme().equalsIgnoreCase("por favor");
			}
		}
		return false;
	}
}