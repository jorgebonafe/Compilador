/* The following code was generated by JFlex 1.4.1 on 16/10/14 16:14 */

/*
 * Generated on 10/16/14 4:14 PM
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Arquivo de sintaxe da linguagem LEGAL.
 */

public class LEGALALPHA2012TokenMakerEsp extends AbstractJFlexCTokenMaker {
  /** This character denotes the end of file */
  public static final int YYEOF = -1;
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\64\1\31\1\15"+
    "\1\20\1\1\1\31\1\31\1\7\2\30\1\72\1\27\1\31\1\27"+
    "\1\25\1\34\1\4\1\16\1\63\1\63\1\63\1\67\1\67\1\6"+
    "\1\71\1\3\1\46\1\31\1\73\1\72\1\73\1\33\1\32\1\56"+
    "\1\5\1\50\1\60\1\26\1\42\1\51\1\35\1\44\1\70\1\66"+
    "\1\45\1\57\1\55\1\54\1\40\1\65\1\52\1\41\1\36\1\12"+
    "\1\61\1\47\1\24\1\1\1\62\1\30\1\11\1\30\1\17\1\2"+
    "\1\0\1\56\1\14\1\50\1\60\1\26\1\43\1\51\1\74\1\44"+
    "\1\70\1\66\1\45\1\57\1\13\1\54\1\40\1\65\1\53\1\41"+
    "\1\37\1\12\1\61\1\75\1\24\1\1\1\62\1\22\1\17\1\23"+
    "\1\31\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\2\1\1\11\7\1\1\12\4\1"+
    "\1\12\1\1\2\12\1\13\1\14\1\15\7\13\1\16"+
    "\6\13\1\0\1\17\1\0\2\17\4\1\2\4\1\20"+
    "\1\21\13\1\1\12\4\1\1\12\5\1\1\12\4\1"+
    "\1\12\1\0\13\1\1\12\3\1\1\12\2\1\3\13"+
    "\2\0\1\13\2\0\3\13\2\0\1\13\3\0\1\21"+
    "\1\0\1\22\3\1\1\4\1\23\1\4\17\1\1\12"+
    "\2\1\1\12\1\0\20\1\1\0\24\1\3\13\2\0"+
    "\1\13\2\0\3\13\2\0\1\13\3\0\3\1\1\4"+
    "\13\1\1\0\4\1\1\0\3\1\1\0\11\1\1\0"+
    "\21\1\2\13\1\0\1\13\1\24\1\0\2\13\1\0"+
    "\1\13\1\25\2\0\1\1\1\4\1\1\1\0\7\1"+
    "\1\0\3\1\1\12\3\1\1\0\4\1\2\0\3\1"+
    "\1\12\4\1\1\13\2\0\1\13\3\0\1\4\1\0"+
    "\3\1\1\0\2\1\1\0\4\1\1\0\3\1\1\0"+
    "\10\1\5\0\1\1\1\0\1\1\1\0\3\1\4\0"+
    "\1\1\1\0\2\1\1\26\3\0\2\1\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\272\0\u01f0\0\u022e\0\272\0\u026c\0\272\0\272\0\u02aa"+
    "\0\u02e8\0\272\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c"+
    "\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c"+
    "\0\u068a\0\370\0\u06c8\0\272\0\272\0\u0706\0\u0744\0\u0782"+
    "\0\u07c0\0\u07fe\0\u083c\0\u087a\0\272\0\u08b8\0\u08f6\0\u0934"+
    "\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u02aa\0\u0aa8\0\u0ae6"+
    "\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\272\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88"+
    "\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078"+
    "\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268"+
    "\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458"+
    "\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648"+
    "\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838"+
    "\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28"+
    "\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18"+
    "\0\u1c56\0\u1c94\0\u0ae6\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\272"+
    "\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c"+
    "\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c"+
    "\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c"+
    "\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c"+
    "\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c"+
    "\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c"+
    "\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c"+
    "\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c"+
    "\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc"+
    "\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec"+
    "\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc"+
    "\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc"+
    "\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc"+
    "\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac"+
    "\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c"+
    "\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c"+
    "\0\u3cca\0\u3d08\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c"+
    "\0\u3eba\0\u3ef8\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c"+
    "\0\u40aa\0\u40e8\0\u4126\0\u4164\0\u41a2\0\u41e0\0\u421e\0\u425c"+
    "\0\u429a\0\u42d8\0\u4316\0\272\0\u4354\0\u4392\0\u43d0\0\u440e"+
    "\0\u444c\0\u448a\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe"+
    "\0\u463c\0\u2b1c\0\u467a\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0"+
    "\0\u3d84\0\u47ee\0\u482c\0\u3ef8\0\u486a\0\u48a8\0\u48e6\0\u4924"+
    "\0\u4962\0\u49a0\0\u49de\0\u4a1c\0\u4a5a\0\u4a98\0\u4ad6\0\u4b14"+
    "\0\u4b52\0\u4b90\0\u4bce\0\u4c0c\0\u4c4a\0\u4c88\0\u4cc6\0\u4d04"+
    "\0\u4d42\0\u4d80\0\u4dbe\0\u4dfc\0\u4e3a\0\u4e78\0\u4eb6\0\u4ef4"+
    "\0\u4f32\0\u4f70\0\u4fae\0\u4fec\0\u502a\0\u5068\0\u50a6\0\u50e4"+
    "\0\u5122\0\u5160\0\u519e\0\u51dc\0\u521a\0\u5258\0\u5296\0\u52d4"+
    "\0\u5312\0\u5350\0\u538e\0\370\0\u53cc\0\u540a\0\u5448\0\u5486"+
    "\0\u54c4\0\u5502\0\u5540\0\u557e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\6\1\4\1\11"+
    "\1\4\1\5\1\12\1\10\1\13\1\6\1\4\1\14"+
    "\1\15\1\16\1\17\1\5\1\20\1\21\1\22\1\17"+
    "\3\4\1\22\1\23\2\24\1\25\1\26\2\27\1\30"+
    "\1\31\1\4\1\5\1\32\1\33\2\34\1\35\1\12"+
    "\1\36\1\37\1\40\1\41\1\5\1\6\1\15\1\5"+
    "\1\42\1\6\1\5\1\6\2\22\1\23\1\5\10\43"+
    "\1\44\12\43\1\45\11\43\1\46\4\43\1\47\1\50"+
    "\3\43\1\51\24\43\1\52\1\53\10\54\1\55\24\54"+
    "\1\56\4\54\1\57\1\60\3\54\1\61\24\54\1\62"+
    "\1\63\77\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\15\5"+
    "\1\0\5\5\2\0\2\5\3\65\2\6\1\65\1\6"+
    "\2\0\4\65\1\0\1\6\1\0\1\65\3\0\1\65"+
    "\1\66\1\67\3\0\1\65\2\0\11\65\1\0\14\65"+
    "\1\6\1\0\2\65\1\6\1\65\1\6\2\0\5\65"+
    "\2\6\1\65\1\6\2\0\4\65\1\0\1\6\1\0"+
    "\1\65\3\0\1\70\1\66\1\67\3\0\1\65\2\0"+
    "\11\65\1\0\14\65\1\6\1\0\2\65\1\6\1\65"+
    "\1\6\2\0\2\65\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\1\5"+
    "\2\71\5\5\1\72\1\0\15\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\73\6\0\11\5\1\0\5\5"+
    "\1\74\7\5\1\0\5\5\2\0\2\5\10\13\1\75"+
    "\1\76\3\13\1\77\60\13\21\0\1\15\42\0\1\15"+
    "\14\0\2\100\1\0\1\100\7\0\1\100\44\0\1\100"+
    "\3\0\1\100\1\0\1\100\5\0\6\5\2\0\1\64"+
    "\1\5\1\101\1\5\1\0\1\5\5\0\1\102\1\0"+
    "\1\5\6\0\4\5\1\103\4\5\1\0\6\5\1\101"+
    "\3\5\1\104\2\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\7\5\1\105\5\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\3\5\2\106\10\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\1\107\2\5\1\0"+
    "\1\42\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\5\5\1\110\1\5\1\111\4\5\1\42\1\0\2\5"+
    "\1\42\2\5\2\0\2\5\1\0\5\5\1\42\2\0"+
    "\1\64\1\112\2\5\1\0\1\42\5\0\1\5\1\0"+
    "\1\113\6\0\7\5\1\114\1\5\1\0\5\5\1\115"+
    "\1\5\1\116\4\5\1\42\1\0\2\5\1\42\1\5"+
    "\1\42\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\117\6\0\7\5"+
    "\1\120\1\5\1\0\7\5\1\121\5\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\1\5\1\122"+
    "\1\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\6\5\1\122\4\5\1\123\1\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\1\124"+
    "\2\5\1\0\1\42\5\0\1\42\1\0\1\125\6\0"+
    "\7\5\1\126\1\5\1\0\7\5\1\127\4\5\1\42"+
    "\1\0\2\5\1\42\2\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\10\5\1\130\1\0\5\5\1\131\7\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\7\5\1\132\1\5\1\0\3\5\2\133\10\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\134\4\0\1\135"+
    "\1\0\11\5\1\0\5\5\1\136\7\5\1\0\5\5"+
    "\2\0\2\5\1\0\4\5\1\137\1\5\2\0\1\64"+
    "\2\5\1\137\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\1\140\3\5\1\141\4\5\1\0\15\5\1\0"+
    "\5\5\2\0\1\140\1\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\1\5\2\142\1\143\4\5\1\144\1\0\1\5\1\145"+
    "\6\5\1\146\1\147\1\5\1\150\1\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\42\6\0\7\5\1\151"+
    "\1\5\1\0\5\5\1\152\3\5\1\42\3\5\1\0"+
    "\5\5\2\0\2\5\1\0\4\5\1\42\1\5\2\0"+
    "\1\64\2\5\1\42\1\0\1\5\5\0\1\5\1\0"+
    "\1\153\6\0\7\5\1\154\1\5\1\0\5\5\1\155"+
    "\7\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\156"+
    "\6\0\11\5\1\0\7\5\1\157\5\5\1\0\5\5"+
    "\2\0\2\5\10\43\1\0\12\43\1\0\17\43\1\0"+
    "\30\43\2\0\10\43\1\0\12\43\1\0\12\43\2\160"+
    "\3\43\1\0\30\43\2\0\10\43\1\0\12\43\1\0"+
    "\12\43\2\161\3\43\1\0\1\162\27\43\40\0\2\163"+
    "\4\0\1\164\31\0\10\43\1\0\12\43\1\0\17\43"+
    "\1\0\3\43\1\165\24\43\1\0\1\166\36\0\2\167"+
    "\105\0\1\166\25\0\1\166\10\54\1\0\32\54\1\0"+
    "\30\54\2\0\10\54\1\0\25\54\2\170\3\54\1\0"+
    "\30\54\2\0\10\54\1\0\25\54\2\171\3\54\1\0"+
    "\1\172\27\54\40\0\2\173\4\0\1\174\31\0\10\54"+
    "\1\0\32\54\1\0\3\54\1\175\24\54\1\0\1\176"+
    "\36\0\2\177\105\0\1\176\25\0\1\176\12\0\1\200"+
    "\63\0\7\65\2\0\4\65\1\0\1\65\1\0\1\65"+
    "\3\0\1\65\1\0\1\65\3\0\1\65\2\0\11\65"+
    "\1\0\15\65\1\0\5\65\2\0\5\65\2\201\1\65"+
    "\1\201\2\0\4\65\1\0\1\201\1\0\1\65\3\0"+
    "\1\65\1\0\1\65\1\202\2\0\1\65\2\0\11\65"+
    "\1\0\14\65\1\201\1\0\2\65\1\201\1\65\1\201"+
    "\2\0\5\65\4\203\2\0\3\65\1\203\1\0\1\203"+
    "\1\0\1\65\3\0\1\65\1\0\1\203\3\0\1\65"+
    "\2\0\5\65\2\203\2\65\1\0\1\65\1\203\5\65"+
    "\1\203\1\65\1\203\2\65\1\203\1\0\2\65\1\203"+
    "\1\65\1\203\2\0\2\65\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\204\6\0"+
    "\11\5\1\0\15\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\7\5\1\205\5\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\2\5\1\132\12\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\3\5"+
    "\2\206\10\5\1\0\5\5\2\0\2\5\11\75\1\207"+
    "\3\75\1\210\64\75\1\13\1\75\2\13\1\0\1\13"+
    "\1\211\4\13\20\75\1\13\3\75\1\13\7\75\1\13"+
    "\7\75\1\13\3\75\1\13\6\75\3\65\2\100\1\65"+
    "\1\100\2\0\4\65\1\0\1\100\1\0\1\65\3\0"+
    "\1\65\1\0\1\67\3\0\1\65\2\0\11\65\1\0"+
    "\14\65\1\100\1\0\2\65\1\100\1\65\1\100\2\0"+
    "\2\65\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\1\5\2\212\1\5"+
    "\1\213\4\5\1\0\1\5\1\214\10\5\1\215\2\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\3\5\1\216\5\5\1\0\15\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\3\5\1\217\5\5"+
    "\1\0\1\5\1\220\13\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\221\6\0\11\5\1\0\15\5\1\0"+
    "\5\5\2\0\2\5\1\0\4\5\1\222\1\5\2\0"+
    "\1\64\2\5\1\222\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\4\5\1\223\4\5\1\0\15\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\7\5"+
    "\1\224\1\5\1\0\15\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\225\6\0\11\5\1\0\15\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\3\5\2\226\10\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\3\5\2\227"+
    "\10\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\1\5\1\230\13\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\2\5\1\231\2\232\10\5\1\0\5\5\2\0\2\5"+
    "\1\0\4\5\1\42\1\5\2\0\1\64\2\5\1\42"+
    "\1\0\1\5\5\0\1\5\1\0\1\233\6\0\11\5"+
    "\1\0\14\5\1\234\1\235\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\1\5\1\236\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\10\5\1\127\1\0"+
    "\6\5\1\236\6\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\10\5\1\237\1\0\15\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\10\5"+
    "\1\240\1\0\15\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\10\5\1\241\4\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\10\5\1\242\1\0\14\5\1\42\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\1\5\2\243\6\5"+
    "\1\0\12\5\1\244\2\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\15\5\1\0"+
    "\1\245\4\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\13\5\1\42\1\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\1\5\1\246\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\6\5\1\246\6\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\1\5\1\247\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\6\5\1\247\6\5\1\0\5\5\2\0\2\5\1\0"+
    "\4\5\1\42\1\5\2\0\1\64\2\5\1\42\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\14\5\1\234\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\7\5\1\250\5\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\10\5"+
    "\1\251\1\0\15\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\3\5\2\252\10\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\7\5\1\253\5\5\1\0\5\5\2\0"+
    "\2\5\1\0\4\5\1\42\1\5\2\0\1\64\2\5"+
    "\1\42\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\3\5\1\254\5\5\1\0\1\5\1\255\12\5\1\234"+
    "\1\0\5\5\2\0\2\5\40\0\1\256\36\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\15\5\1\0\3\5\1\252"+
    "\1\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\4\5"+
    "\1\257\4\5\1\0\15\5\1\0\3\5\1\260\1\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\10\5\1\42\4\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\1\5\1\261\13\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\3\5\2\262\10\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\7\5"+
    "\1\263\5\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\7\5\1\264\5\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\1\5"+
    "\2\265\6\5\1\0\15\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\7\5\1\266"+
    "\5\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\267"+
    "\6\0\11\5\1\0\12\5\1\270\2\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\1\271\2\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\15\5\1\0\5\5\2\0\2\5\1\0\4\5"+
    "\1\42\1\5\2\0\1\64\1\5\2\42\1\0\1\5"+
    "\5\0\1\5\1\0\1\272\6\0\11\5\1\0\6\5"+
    "\1\42\5\5\1\234\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\1\5\2\273\6\5\1\0\15\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\4\5\1\274\4\5\1\0\3\5\2\275\10\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\4\5"+
    "\1\276\4\5\1\0\15\5\1\0\5\5\2\0\2\5"+
    "\1\0\4\5\1\277\1\5\2\0\1\64\2\5\1\277"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\14\5\1\42\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\1\5\1\300\1\5"+
    "\2\301\10\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\3\5\2\302\10\5\1\0"+
    "\5\5\2\0\2\5\10\43\1\0\12\43\1\0\12\43"+
    "\2\303\3\43\1\0\30\43\2\0\10\43\1\0\12\43"+
    "\1\0\14\43\1\304\2\43\1\0\30\43\2\0\10\43"+
    "\1\0\12\43\1\0\17\43\1\0\1\43\1\305\26\43"+
    "\42\0\1\306\102\0\1\307\30\0\10\43\1\0\12\43"+
    "\1\0\17\43\1\0\3\43\1\310\24\43\1\0\1\311"+
    "\47\0\1\311\25\0\1\311\36\0\2\312\36\0\10\54"+
    "\1\0\25\54\2\313\3\54\1\0\30\54\2\0\10\54"+
    "\1\0\27\54\1\314\2\54\1\0\30\54\2\0\10\54"+
    "\1\0\32\54\1\0\1\54\1\315\26\54\42\0\1\316"+
    "\102\0\1\317\30\0\10\54\1\0\32\54\1\0\3\54"+
    "\1\320\24\54\1\0\1\321\47\0\1\321\25\0\1\321"+
    "\36\0\2\322\41\0\4\323\5\0\1\323\1\0\1\323"+
    "\7\0\1\323\13\0\2\323\4\0\1\323\5\0\1\323"+
    "\1\0\1\323\2\0\1\323\3\0\1\323\1\0\1\323"+
    "\4\0\3\65\2\201\1\65\1\201\2\0\4\65\1\0"+
    "\1\201\1\0\1\65\3\0\1\65\1\0\1\65\3\0"+
    "\1\65\2\0\11\65\1\0\14\65\1\201\1\0\2\65"+
    "\1\201\1\65\1\201\2\0\2\65\3\0\2\201\1\0"+
    "\1\201\7\0\1\201\44\0\1\201\3\0\1\201\1\0"+
    "\1\201\5\0\6\5\2\0\1\64\1\5\1\324\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\6\5\1\324\6\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\1\5\1\325\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\6\5\1\325\6\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\10\5\1\326\4\5"+
    "\1\0\5\5\2\0\2\5\10\75\1\0\70\75\4\327"+
    "\2\75\1\207\2\75\1\327\1\210\1\327\7\75\1\327"+
    "\13\75\2\327\4\75\1\327\5\75\1\327\1\75\1\327"+
    "\2\75\1\327\3\75\1\327\1\75\1\327\4\75\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\5\5\1\330\7\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\331\6\0"+
    "\11\5\1\0\15\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\332\6\0\11\5\1\0\15\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\7\5\1\333"+
    "\1\5\1\0\15\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\10\5\1\334\1\0\15\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\111\6\0\11\5"+
    "\1\0\15\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\7\5\1\335\5\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\1\5"+
    "\1\336\1\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\6\5\1\336\6\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\7\5\1\337"+
    "\1\5\1\0\15\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\1\5\2\340\6\5\1\0\15\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\4\5\1\341\4\5\1\0\15\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\3\5"+
    "\2\342\10\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\15\5\1\343\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\7\5"+
    "\1\344\5\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\242\6\0\11\5\1\0\15\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\1\345\2\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\15\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\12\5\1\346\2\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\10\5\1\347\4\5\1\0\5\5\2\0\2\5\1\0"+
    "\4\5\1\42\1\5\2\0\1\64\2\5\1\42\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\15\5\1\0\5\5\2\0\2\5\13\0\1\350\41\0"+
    "\1\350\21\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\7\5\1\351\1\5"+
    "\1\0\15\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\7\5\1\352\1\5\1\0\15\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\7\5"+
    "\1\353\1\5\1\0\15\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\15\5\1\354"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\4\5"+
    "\1\252\4\5\1\0\15\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\355\6\0\11\5\1\0\15\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\356\6\0\11\5"+
    "\1\0\15\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\1\357\2\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\15\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\1\5\2\360"+
    "\6\5\1\0\15\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\361\6\0\11\5\1\0\15\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\3\5\2\361\10\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\362\6\0\11\5\1\0\5\5\1\344\7\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\5\5\1\42\7\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\1\5"+
    "\1\363\13\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\364\6\0\11\5\1\0\15\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\365\6\0\11\5\1\0\15\5"+
    "\1\0\5\5\2\0\2\5\44\0\1\366\32\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\1\5\2\367\6\5\1\0\15\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\336\6\0\11\5"+
    "\1\0\15\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\1\250\2\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\15\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\7\5\1\370\5\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\2\5\1\371\12\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\3\5\2\372\10\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\7\5\1\373\1\5"+
    "\1\0\15\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\3\5\2\374\10\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\10\5"+
    "\1\375\1\0\15\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\376\6\0\11\5\1\0\15\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\10\5\1\42"+
    "\1\0\15\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\1\5\1\377\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\6\5\1\377"+
    "\6\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\5\5\1\u0100\7\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\1\5\1\u0101\5\5\1\u0102\5\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\u0103\6\0\11\5\1\0\15\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\3\5\1\u0104\5\5\1\0\15\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\10\5\1\u0105\1\0"+
    "\15\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\370"+
    "\6\0\11\5\1\0\15\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\11\5\1\u0106"+
    "\3\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\7\5\1\u0107\1\5\1\0\15\5\1\0\5\5"+
    "\2\0\2\5\10\43\1\0\12\43\1\0\14\43\1\u0108"+
    "\2\43\1\0\30\43\2\0\10\43\1\0\12\43\1\0"+
    "\17\43\1\0\2\43\1\u0109\25\43\2\0\10\43\1\0"+
    "\12\43\1\0\2\43\1\304\14\43\1\0\30\43\50\0"+
    "\1\u010a\55\0\1\306\47\0\10\43\1\0\12\43\1\0"+
    "\1\43\1\u010b\15\43\1\0\30\43\27\0\1\u010c\110\0"+
    "\1\u010d\35\0\10\54\1\0\27\54\1\u010e\2\54\1\0"+
    "\30\54\2\0\10\54\1\0\32\54\1\0\2\54\1\u010f"+
    "\25\54\2\0\10\54\1\0\15\54\1\314\14\54\1\0"+
    "\30\54\50\0\1\u0110\55\0\1\316\47\0\10\54\1\0"+
    "\14\54\1\u0111\15\54\1\0\30\54\27\0\1\u0112\110\0"+
    "\1\u0113\40\0\4\u0114\5\0\1\u0114\1\0\1\u0114\7\0"+
    "\1\u0114\13\0\2\u0114\4\0\1\u0114\5\0\1\u0114\1\0"+
    "\1\u0114\2\0\1\u0114\3\0\1\u0114\1\0\1\u0114\5\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\1\5\2\u0115\6\5\1\0\15\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\1\5\1\252\13\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\7\5"+
    "\1\271\5\5\1\0\5\5\2\0\2\5\3\75\4\u0116"+
    "\2\75\1\207\2\75\1\u0116\1\210\1\u0116\7\75\1\u0116"+
    "\13\75\2\u0116\4\75\1\u0116\5\75\1\u0116\1\75\1\u0116"+
    "\2\75\1\u0116\3\75\1\u0116\1\75\1\u0116\4\75\1\0"+
    "\6\5\2\0\1\64\1\5\1\u0117\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\6\5"+
    "\1\u0117\6\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\4\0\1\u0118\1\0\11\5\1\0\15\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\1\5"+
    "\1\u0119\1\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\6\5\1\u0119\6\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\42\6\0\11\5\1\0"+
    "\15\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\5\5\1\u011a\7\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\3\5\1\u011b"+
    "\5\5\1\0\15\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\1\5\2\252\6\5\1\0\15\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\10\5\1\u011c\1\0\15\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\7\5\1\u011d"+
    "\5\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\1\5\2\u011e\6\5\1\0\15\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\1\5\2\u011f"+
    "\6\5\1\0\15\5\1\0\5\5\2\0\2\5\42\0"+
    "\2\u0120\33\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\3\5"+
    "\2\42\10\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\7\5\1\u0121\1\5\1\0\15\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\5\5\1\u0122\7\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\3\5\1\u0123\5\5\1\0"+
    "\15\5\1\0\5\5\2\0\2\5\54\0\1\u0124\22\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\11\5\1\u0125\3\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\11\5\1\u0126\3\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\1\5"+
    "\1\u0127\13\5\1\0\5\5\2\0\2\5\60\0\1\u0128"+
    "\16\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\3\5\2\u0129"+
    "\10\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\3\5\2\364\10\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\7\5\1\u012a"+
    "\1\5\1\0\15\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\5\5\1\42\1\5"+
    "\1\42\5\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\7\5\1\42\5\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\1\5"+
    "\2\227\6\5\1\0\15\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\7\5\1\262\1\5\1\0"+
    "\15\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\1\5\2\u012b\6\5\1\0\15\5\1\0\5\5"+
    "\2\0\2\5\1\0\4\5\1\u012c\1\5\2\0\1\64"+
    "\2\5\1\u012c\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\15\5\1\0\5\5\2\0\2\5"+
    "\60\0\1\u012d\16\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\4\0\1\u012e\1\0"+
    "\11\5\1\0\15\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\4\5\1\42\4\5\1\0\15\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\1\333\2\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\7\5\1\344\5\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\10\5\1\361\4\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\0\12\5\1\227\2\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\7\5\1\u012f\1\5\1\0\15\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\7\5"+
    "\1\u0130\5\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\3\5\2\u0131\10\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\1\5"+
    "\2\142\6\5\1\0\15\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\3\5\2\u0132"+
    "\10\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\5\5\1\u0133\7\5\1\0\5\5"+
    "\2\0\2\5\1\0\4\5\1\222\1\5\2\0\1\64"+
    "\2\5\1\222\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\15\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\1\5\1\u0134"+
    "\13\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\7\5\1\132\5\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\7\5\1\u0121\5\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\42\6\0\11\5\1\0\7\5\1\u0135\5\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\7\5\1\u0136\5\5\1\0\5\5\2\0"+
    "\2\5\10\43\1\0\12\43\1\0\15\43\1\304\1\43"+
    "\1\0\2\43\1\u0109\25\43\2\0\10\43\1\0\12\43"+
    "\1\0\10\43\1\u0137\6\43\1\0\30\43\36\0\1\u0138"+
    "\41\0\1\43\7\u010b\1\0\1\43\3\u010b\1\43\1\u010b"+
    "\1\43\1\u010b\2\43\1\0\17\u010b\1\u010c\20\u010b\1\43"+
    "\6\u010b\1\43\2\u010c\1\0\1\u010c\1\u0139\4\u010c\1\u0139"+
    "\2\0\3\u010c\1\0\1\u010c\1\0\1\u0139\3\0\1\u010c"+
    "\1\u0139\1\u010c\5\u0139\12\u010c\1\u0139\15\u010c\1\0\5\u010c"+
    "\1\u0139\1\0\2\u010c\41\0\1\306\4\0\1\u010a\27\0"+
    "\10\54\1\0\30\54\1\314\1\54\1\0\2\54\1\u010f"+
    "\25\54\2\0\10\54\1\0\23\54\1\u013a\6\54\1\0"+
    "\30\54\36\0\1\u013b\41\0\1\54\7\u0111\1\0\1\54"+
    "\3\u0111\1\54\1\u0111\1\54\1\u0111\3\54\17\u0111\1\u0112"+
    "\20\u0111\1\54\6\u0111\1\54\2\u0112\1\0\1\u0112\1\u013c"+
    "\4\u0112\1\u013c\2\0\3\u0112\1\0\1\u0112\1\0\1\u013c"+
    "\3\0\1\u0112\1\u013c\1\u0112\5\u013c\12\u0112\1\u013c\15\u0112"+
    "\1\0\5\u0112\1\u013c\1\0\2\u0112\41\0\1\316\4\0"+
    "\1\u0110\32\0\4\u013d\5\0\1\u013d\1\0\1\u013d\7\0"+
    "\1\u013d\13\0\2\u013d\4\0\1\u013d\5\0\1\u013d\1\0"+
    "\1\u013d\2\0\1\u013d\3\0\1\u013d\1\0\1\u013d\5\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\344\6\0\11\5\1\0\15\5\1\0\5\5"+
    "\2\0\2\5\3\75\4\u013e\2\75\1\207\2\75\1\u013e"+
    "\1\210\1\u013e\7\75\1\u013e\13\75\2\u013e\4\75\1\u013e"+
    "\5\75\1\u013e\1\75\1\u013e\2\75\1\u013e\3\75\1\u013e"+
    "\1\75\1\u013e\4\75\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\1\5\1\300\13\5\1\0\5\5\2\0\2\5"+
    "\56\0\1\u013f\20\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\11\5\1\u0140\3\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\6\0\4\5\1\u0141\4\5\1\0\15\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\7\5\1\u0142\5\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\7\5\1\362\1\5"+
    "\1\0\15\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\15\5\1\u0143\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\u0144\6\0\11\5\1\0\15\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\5\5\1\u0145\7\5\1\0\5\5\2\0"+
    "\2\5\56\0\1\u0146\20\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\3\5\2\u0147\10\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\42\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\14\5\1\42"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\3\5\2\333\10\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\5\5"+
    "\1\u0148\7\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\7\5\1\u0149\5\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\7\5"+
    "\1\u014a\1\5\1\0\15\5\1\0\5\5\2\0\2\5"+
    "\56\0\1\u014b\20\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\12\5\1\u014c\2\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\u014d\6\0\11\5\1\0\15\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\7\5\1\344"+
    "\1\5\1\0\15\5\1\0\5\5\2\0\2\5\1\0"+
    "\6\5\2\0\1\64\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\u014e\6\0\11\5\1\0\7\5\1\42\5\5"+
    "\1\0\5\5\2\0\2\5\54\0\1\u0124\1\0\1\u0124"+
    "\67\0\1\u014f\26\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\10\5\1\u0150"+
    "\1\0\15\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\1\5\1\u0151\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\6\5\1\u0151"+
    "\6\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\1\5\2\u0152\6\5\1\0\15\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\1\5\1\u0153"+
    "\1\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\6\5\1\u0153\6\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\1\361\10\5\1\0"+
    "\15\5\1\0\5\5\2\0\1\361\1\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\11\5\1\u0154\3\5\1\0"+
    "\5\5\2\0\2\5\1\0\4\5\1\u0155\1\5\2\0"+
    "\1\64\2\5\1\u0155\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\15\5\1\0\5\5\2\0"+
    "\2\5\10\43\1\0\12\43\1\0\10\43\1\u010b\6\43"+
    "\1\0\30\43\36\0\1\u010c\41\0\10\54\1\0\23\54"+
    "\1\u0111\6\54\1\0\30\54\36\0\1\u0112\44\0\4\5"+
    "\5\0\1\5\1\0\1\5\7\0\1\5\13\0\2\5"+
    "\4\0\1\5\5\0\1\5\1\0\1\5\2\0\1\5"+
    "\3\0\1\5\1\0\1\5\4\0\3\75\4\13\2\75"+
    "\1\207\2\75\1\13\1\210\1\13\7\75\1\13\13\75"+
    "\2\13\4\75\1\13\5\75\1\13\1\75\1\13\2\75"+
    "\1\13\3\75\1\13\1\75\1\13\4\75\52\0\2\u0124"+
    "\23\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\344\6\0\11\5\1\0\7\5\1\42"+
    "\5\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\7\5\1\u0156\1\5\1\0\15\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\3\5\2\u0157\10\5\1\0\5\5\2\0\2\5\26\0"+
    "\1\u0158\50\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\13\5"+
    "\1\361\1\5\1\0\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\15\5\1\u0159\5\5\2\0"+
    "\2\5\61\0\1\u015a\15\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\15\5\1\u015b\5\5\2\0\2\5\1\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\15\5\1\u015c\5\5\2\0"+
    "\2\5\1\0\5\5\1\42\2\0\1\64\3\5\1\0"+
    "\1\42\5\0\1\5\1\0\1\5\6\0\11\5\1\0"+
    "\14\5\1\42\1\0\2\5\1\42\1\5\1\42\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\11\5"+
    "\1\u015d\3\5\1\0\5\5\2\0\2\5\64\0\1\u015e"+
    "\12\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\11\5\1\0\7\5\1\u0150"+
    "\5\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\3\5\2\u015f\10\5\1\0\5\5"+
    "\2\0\2\5\1\0\6\5\2\0\1\64\1\42\2\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\15\5\1\0\5\5\2\0\2\5\12\0\1\u0160"+
    "\64\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\6\0\10\5\1\252\1\0\15\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\1\5\2\333\6\5\1\0\15\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\u0161\6\0\11\5\1\0\15\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\5\5\1\u0162\7\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\132\6\0\11\5\1\0\15\5"+
    "\1\0\5\5\2\0\2\5\1\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\10\5\1\u0163\1\0\15\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\4\0\1\u0164\1\0\11\5\1\0"+
    "\15\5\1\0\5\5\2\0\2\5\1\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\15\5\1\u0165\5\5\2\0\2\5"+
    "\45\0\1\u0124\46\0\1\u0124\44\0\1\u0124\3\0\1\u0124"+
    "\62\0\1\u013f\77\0\1\u0166\77\0\1\u0167\16\0\6\5"+
    "\2\0\1\64\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\7\5\1\u0168\5\5\1\0"+
    "\5\5\2\0\2\5\50\0\1\u0169\26\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\11\5\1\361\3\5\1\0\5\5"+
    "\2\0\2\5\45\0\1\350\31\0\6\5\2\0\1\64"+
    "\1\5\1\u016a\1\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\0\6\5\1\u016a\6\5\1\0"+
    "\5\5\2\0\2\5\1\0\6\5\2\0\1\64\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\6\0\11\5"+
    "\1\0\1\5\1\u016b\13\5\1\0\5\5\2\0\2\5"+
    "\1\0\6\5\2\0\1\64\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\u016c\6\0\11\5\1\0\15\5\1\0"+
    "\5\5\2\0\2\5\13\0\1\u0124\41\0\1\u0124\100\0"+
    "\1\u016d\101\0\1\u016e\37\0\1\u0124\50\0\6\5\2\0"+
    "\1\64\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\0\11\5\1\42\3\5\1\0\5\5"+
    "\2\0\2\5\54\0\1\u016f\22\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\0\1\5\1\u0170\13\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\7\5\1\u0171\1\5"+
    "\1\0\15\5\1\0\5\5\2\0\2\5\26\0\1\u0166"+
    "\114\0\1\u0172\75\0\1\u0173\31\0\6\5\2\0\1\64"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\6\0"+
    "\7\5\1\361\1\5\1\0\15\5\1\0\5\5\2\0"+
    "\2\5\1\0\6\5\2\0\1\64\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\6\0\11\5\1\0\11\5"+
    "\1\252\3\5\1\0\5\5\2\0\2\5\56\0\1\u0124"+
    "\45\0\1\u0174\105\0\2\u0172\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21948];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };
  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\2\1\1\11\1\1\2\11"+
    "\2\1\1\11\21\1\2\11\7\1\1\11\6\1\1\0"+
    "\1\1\1\0\10\1\1\11\35\1\1\0\25\1\2\0"+
    "\1\1\2\0\3\1\2\0\1\1\3\0\1\1\1\0"+
    "\5\1\1\11\24\1\1\0\20\1\1\0\27\1\2\0"+
    "\1\1\2\0\3\1\2\0\1\1\3\0\17\1\1\0"+
    "\4\1\1\0\3\1\1\0\11\1\1\0\23\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\2\0\3\1\1\0"+
    "\7\1\1\0\3\1\1\11\3\1\1\0\4\1\2\0"+
    "\11\1\2\0\1\1\3\0\1\1\1\0\3\1\1\0"+
    "\2\1\1\0\4\1\1\0\3\1\1\0\10\1\5\0"+
    "\1\1\1\0\1\1\1\0\3\1\4\0\1\1\1\0"+
    "\3\1\3\0\2\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;
  /** the current state of the DFA */
  private int zzState;
  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;
  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  /** the current text position in the buffer */
  private int zzCurrentPos;
  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;
  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;
  /** number of newlines encountered up to the start of the matched text */
  private int yyline;
  /** the number of characters up to the start of the matched text */
  private int yychar;
  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;
  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;
  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;
  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public LEGALALPHA2012TokenMakerEsp() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LEGALALPHA2012TokenMakerEsp(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LEGALALPHA2012TokenMakerEsp(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */
    if (zzReader != null)
      zzReader.close();
  }
  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }
  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }
  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }
  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }
  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }
  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }
    throw new Error(message);
  } 
  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);
    zzMarkedPos -= number;
  }
  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;
    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;
    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    while (true) {
      zzMarkedPosL = zzMarkedPos;
      zzAction = -1;
      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }
        }
      }
      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 23: break;
        case 13: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1-1, Token.COMMENT_MULTILINE);
          }
        case 24: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 25: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 26: break;
        case 19: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 27: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 28: break;
        case 10: 
          { addToken(Token.RESERVED_WORD);
          }
        case 29: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 30: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 31: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 32: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 33: break;
        case 22: 
          { addToken(Token.DATA_TYPE);
          }
        case 34: break;
        case 16: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 35: break;
        case 21: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 36: break;
        case 20: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 37: break;
        case 15: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 38: break;
        case 5: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 39: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 40: break;
        case 9: 
          { addToken(Token.OPERATOR);
          }
        case 41: break;
        case 7: 
          { start = zzMarkedPos-1; yybegin(MLC);
          }
        case 42: break;
        case 11: 
          { 
          }
        case 43: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 373: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 374: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 375: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }
  
  public boolean getShouldIndentNextLineAfter(Token t) {
		if (t!=null) {
			if (t.length()==1) {
				char ch = t.getTextArray()[t.getTextOffset()];
				return ch=='[';
			}
			if (t.length()>1) {
				return t.getLexeme().equalsIgnoreCase("por favor");
			}
		}
		return false;
	}
}