/* Generated By:JavaCC: Do not edit this line. JASON.java */
package testJJ;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;

public class JASON implements JASONConstants {
        int errorCode = 0;
        String result = "";
        String errorMessage = "";
        int currentLevel;
        SymbolTableManager STManager;
        ArrayList<String> errorParams;
        HashMap<String,String> definitions;
        int offset = 0;

        public int getErrorCode()
        {
                return errorCode;
        }

        public String getErrorMessage()
        {
                return errorMessage;
        }

        public HashMap<String,String> preProcess(InputStream is, int[] charPos) {
                result = "";
                int currentLevel = 0;
                STManager = new SymbolTableManager();
                definitions = new HashMap<String,String>();
                try {
                        this.PreProcess();
                        charPos[0] = offset;
                }
                catch (Exception e) {}
                return definitions;
        }

        public String testParser(InputStream is)        {
                ReInit(is);
                result = "";
                errorCode = 0;
                int currentLevel = 0;
                STManager = new SymbolTableManager();

                try {
                        this.Program();
                        result += "OK.\u005cn";
                } catch (ParseException e) {
                        switch (errorCode)
                        {
                                case ErrorConstants.ERR_DUPLICATE_IDENTIFIER:
                                        errorMessage = "Identificador duplicado ("+
                                        errorParams.get(0)+
                                        ") na linha " + e.currentToken.beginLine + ", coluna "
                                        + e.currentToken.beginColumn;
                                        break;
                                case ErrorConstants.ERR_IDENTIFIER_NOT_DECLARED:
                                        errorMessage = "Identificador n\u00e3o declarado ("+
                                        errorParams.get(0)+
                                        ") na linha " + e.currentToken.beginLine + ", coluna "
                                        + e.currentToken.beginColumn;
                                        break;
                                default:
                                        errorCode = -1;
                                        errorMessage += e.getMessage() + "\u005cn";
                        }

                        ReInit(is);
                }
                catch (Exception e) {
                        errorCode = -1;
                        errorMessage += e.getMessage() + "\u005cn";
                        ReInit(is);
                } catch (Error e) {
                        errorCode = -1;
                        errorMessage += e.getMessage() + "\u005cn";
                }

/*
		Token t = null;
		Token previousT = null;
		Token lastStringT = null;
		Token lastCommentT = null;
		outerloop:
		while (true)
		{
			try
			{
				t = getNextToken();
				String tokenName = "";
				if (t.kind != 0)
				{
					int spaces = 0;
					spaces = 4 - new Integer(t.beginLine).toString().length();
					if (spaces<0)
						spaces = 0;
					int spaces2 = 3 - new Integer(t.beginColumn).toString().length();
					if (spaces2 < 0)
						spaces2 = 0;

					result = result + "(";
					for (int i=0;i<spaces;i++)
						result = result + " ";
					result = result + t.beginLine + ",";
					for (int i=0;i<spaces2;i++)
						result = result + " ";
					result = result + t.beginColumn + ")   ";
				}
				switch (t.kind)
				{
					case ARRAY : 
					tokenName = "ARRAY";
					break;
					case BEGIN : 
					tokenName = "BEGIN";
					break;
					case CALL : 
					tokenName = "CALL";
					break;
					case DO : 
					tokenName = "DO";
					break;
					case ELSE : 
					tokenName = "ELSE";
					break;
					case END : 
					tokenName = "END";
					break;
					case ENDIF : 
					tokenName = "ENDIF";
					break;
					case ENDUNTIL : 
					tokenName = "ENDUNTIL";
					break;
					case ENDWHILE : 
					tokenName = "ENDWHILE";
					break;
					case FUNCTION : 
					tokenName = "FUNCTION";
					break;
					case IF : 
					tokenName = "IF";
					break;
					case INTEGER : 
					tokenName = "INTEGER";
					break;
					case PARAMETERS : 
					tokenName = "PARAMETERS";
					break;
					case PROCEDURE : 
					tokenName = "PROCEDURE";
					break;
					case RETURNS : 
					tokenName = "RETURNS";
					break;
					case PROGRAM : 
					tokenName = "PROGRAM";
					break;
					case READ : 
					tokenName = "READ";
					break;
					case REAL : 
					tokenName = "REAL";
					break;
					case RECORD : 
					tokenName = "RECORD";
					break;
					case RETURN : 
					tokenName = "RETURN";
					break;
					case SET : 
					tokenName = "SET";
					break;
					case STRING : 
					tokenName = "STRING";
					break;
					case THEN : 
					tokenName = "THEN";
					break;
					case TYPES : 
					tokenName = "TYPES";
					break;
					case UNTIL : 
					tokenName = "UNTIL";
					break;
					case VAR : 
					tokenName = "VAR";
					break;
					case VARIABLES : 
					tokenName = "VARIABLES";
					break;
					case WHILE : 
					tokenName = "WHILE";
					break;
					case WRITE : 
					tokenName = "WRITE";
					break;
					case BOOLEAN : 
					tokenName = "BOOLEAN";
					break;
					case TRUE : 
					tokenName = "TRUE";
					break;
					case FALSE : 
					tokenName = "FALSE";
					break;
					case DEFINE : 
					tokenName = "DEFINE";
					break;
					case OP_ADD : 
					tokenName = "OP_ADD";
					break;
					case OP_SUB : 
					tokenName = "OP_SUB";
					break;
					case OP_MULT : 
					tokenName = "OP_MULT";
					break;
					case OP_DIV : 
					tokenName = "OP_DIV";
					break;
					case OP_MOD : 
					tokenName = "OP_MOD";
					break;
					case OP_EQUALS : 
					tokenName = "OP_EQUALS";
					break;
					case OP_LESS : 
					tokenName = "OP_LESS";
					break;
					case OP_GREATER : 
					tokenName = "OP_GREATER";
					break;
					case OP_LESS_OR_EQUAL : 
					tokenName = "OP_LESS_OR_EQUAL";
					break;
					case OP_GREATER_OR_EQUAL : 
					tokenName = "OP_GREATER_OR_EQUAL";
					break;
					case OP_DIFFERENT : 
					tokenName = "OP_DIFFERENT";
					break;
					case BRACKET_OPEN : 
					tokenName = "BRACKET_OPEN";
					break;
					case BRACKET_CLOSE : 
					tokenName = "BRACKET_CLOSE";
					break;
					case PARETHESIS_OPEN : 
					tokenName = "PARETHESIS_OPEN";
					break;
					case PARETHESIS_CLOSE : 
					tokenName = "PARETHESIS_CLOSE";
					break;
					case COMMA : 
					tokenName = "COMMA";
					break;
					case DOT : 
					tokenName = "DOT";
					break;
					case SEMICOLON : 
					tokenName = "SEMICOLON";
					break;
					case AND : 
					tokenName = "AND";
					break;
					case OR : 
					tokenName = "OR";
					break;
					case NOT : 
					tokenName = "NOT";
					break;
					case INTEGER_CONST : 
					tokenName = "INTEGER_CONST";
					break;
					case REAL_CONST : 
					tokenName = "REAL_CONST";
					break;
					case IDENTIFIER : 
					tokenName = "IDENTIFIER";
					break;
					case COMMENT_CORE : 
					lastCommentT = t.specialToken;
					case STRING_CORE : 
					lastStringT = t.specialToken;
					break;
					case STRING_CONST : 
					tokenName = "STRING_CONST";
					break;
					case EOF :
						if (previousT != null && previousT.kind == COMMENT_CORE) {
								errorCode = 2;
							errorMessage = "Comentário de bloco na linha "+
							lastCommentT.beginLine + ", coluna "+lastCommentT.beginColumn + " nunca foi fechado.";
						}					
						if (t.specialToken != null &&
							t.specialToken.kind == COMMENT_INNER) {
								errorCode = 2;
							errorMessage = "Comentário de bloco na linha "+
							t.beginLine + ", coluna "+t.beginColumn + " nunca foi fechado.";
						}
						else if (previousT != null && previousT.kind == STRING_CORE) {
								errorCode = 3;
							errorMessage = "String na linha "+
							lastStringT.beginLine + ", coluna "+lastStringT.beginColumn + " nunca foi fechada.";
						}
						else if (t.specialToken != null &&
							t.specialToken.kind == STRING_START) {
								errorCode = 3;
							errorMessage = "String na linha "+
							t.specialToken.beginLine + ", coluna "+t.specialToken.beginColumn + " nunca foi fechada.";
						}
						
					break outerloop;
					case IDENTIFIER_ERR : 
					errorCode = 1;
					errorMessage = "Identificador muito longo na linha " +
						t.beginLine + ", coluna "+t.beginColumn +
						". Tamanho máximo é 63 caracteres.";
					break outerloop;
					default:
					break outerloop;
				}
				previousT = t;

				int spaces = 0;
				spaces = 16 - tokenName.length();

				for (int i=0;i<spaces;i++)
					result = result + " ";

				result = result + tokenName + ": " + t.image + "\n";
			}
			catch (Exception e)
			{}
			catch (TokenMgrError e)
			{
				errorCode = 1;
				errorMessage = e.getMessage();
				break;
			}
		}

		*/
                return result;
        }

  final public void PreProcess() throws ParseException {
    Header();
    PreDeclSec();
    SkipRest();
  }

  final public void PreDeclSec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFINE:
      PreDefineDeclSec();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  final public void PreDefineDeclSec() throws ParseException {
                          Token t; String v;
    jj_consume_token(DEFINE);
    label_1:
    while (true) {
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(OP_EQUALS);
      v = Values();
                definitions.put(t.image,v);
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  final public void SkipRest() throws ParseException {
                  Token t;
                t = getToken(0);
                offset = t.absoluteBeginColumn;
                while (t.kind!=0) {
                        t = getNextToken();
                }
  }

  final public void Program() throws ParseException {
    Header();
    DeclSec();
    Block();
    jj_consume_token(DOT);
  }

  final public void Header() throws ParseException {
    jj_consume_token(PROGRAM);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
  }

  final public void Block() throws ParseException {
    jj_consume_token(BEGIN);
    Statements();
    jj_consume_token(END);
  }

//Declarações
  final public void DeclSec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFINE:
      DefineDeclSec();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPES:
      TypeDeclSec();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLES:
      VarDeclSec();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
    case PROCEDURE:
      SubProgramDecls();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void DefineDeclSec() throws ParseException {
    jj_consume_token(DEFINE);
    label_2:
    while (true) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(OP_EQUALS);
      Values();
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
    }
  }

  final public String Values() throws ParseException {
                  Token t1 = null; Token t2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_SUB:
    case INTEGER_CONST:
    case REAL_CONST:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_SUB:
        t1 = jj_consume_token(OP_SUB);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_CONST:
        t2 = jj_consume_token(INTEGER_CONST);
        break;
      case REAL_CONST:
        t2 = jj_consume_token(REAL_CONST);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case STRING_CONST:
      t2 = jj_consume_token(STRING_CONST);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                String s = "";
                if (t1 != null)
                        s = s+t1.image.toUpperCase();
                s = s+t2.image.toUpperCase();
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void TypeDeclSec() throws ParseException {
    jj_consume_token(TYPES);
    label_3:
    while (true) {
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
        ArraySpecification();
        break;
      case RECORD:
        RecordSpecification();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
    }
  }

  final public void ArraySpecification() throws ParseException {
    jj_consume_token(ARRAY);
    DataType();
    jj_consume_token(BRACKET_OPEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_CONST:
      jj_consume_token(INTEGER_CONST);
      break;
    case REAL_CONST:
      jj_consume_token(REAL_CONST);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(BRACKET_CLOSE);
  }

  final public void RecordSpecification() throws ParseException {
    jj_consume_token(RECORD);
    VarDecls();
    jj_consume_token(END);
  }

  final public void VarDeclSec() throws ParseException {
    jj_consume_token(VARIABLES);
    VarDecls();
  }

  final public void VarDecls() throws ParseException {
                  int dt;
    label_4:
    while (true) {
      dt = DataType();
      IdList(dt);
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case REAL:
      case STRING:
      case BOOLEAN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
    }
  }

  final public int DataType() throws ParseException {
                 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL:
      t = jj_consume_token(REAL);
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case STRING:
      t = jj_consume_token(STRING);
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.kind;}
    throw new Error("Missing return statement in function");
  }

  final public void IdList(int dt) throws ParseException {
                      ArrayList<Identifier> idList; Token t;
                idList = new ArrayList<Identifier>();
    t = jj_consume_token(IDENTIFIER);
                Identifier id = new Identifier();
                id.setID(t.image.toUpperCase());
                id.setLevel(currentLevel);
                id.setType(dt);
                id.setCategory(SymbolTableManager.CATEGORY_VAR);
                idList.add(id);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(IDENTIFIER);
                id = new Identifier();
                id.setID(t.image.toUpperCase());
                id.setLevel(currentLevel);
                id.setType(dt);
                id.setCategory(SymbolTableManager.CATEGORY_VAR);
                idList.add(id);
    }
                for (Identifier identifier : idList) {
                        if (STManager.addSymbol(identifier))
                        {
                                result += "ID:"+identifier.getID()+"\u005cn";
                                result += "Tipo:"+identifier.getTypeName()+"\u005cn";
                                result += "N\u00edvel:"+currentLevel+"\u005cn";
                                result += "Categoria:"+identifier.getCategoryName()+"\u005cn";
                                result += "----------------------"+"\u005cn";
                        }
                        else
                        {
                                errorCode = ErrorConstants.ERR_DUPLICATE_IDENTIFIER;
                                errorParams = new ArrayList<String>();
                                errorParams.add(id.getID());
                                {if (true) throw generateParseException();}
                        }
                }
  }

  final public void SubProgramDecls() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROCEDURE:
        ProcDecl();
        break;
      case FUNCTION:
        FunctionDecl();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case PROCEDURE:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
    }
  }

  final public void ProcDecl() throws ParseException {
    ProcHeader();
                currentLevel++;
    SubProgramDeclSec();
    Block();
                STManager.removeLevel(currentLevel);
                currentLevel--;
    jj_consume_token(SEMICOLON);
  }

  final public void ProcHeader() throws ParseException {
                    Token t;
    jj_consume_token(PROCEDURE);
    t = jj_consume_token(IDENTIFIER);
                Identifier id = new Identifier();
                id.setID(t.image.toUpperCase());
                id.setLevel(currentLevel);
                id.setCategory(SymbolTableManager.CATEGORY_PROCEDURE);
                if (STManager.addSymbol(id))
                {
                        result += "ID:"+id.getID()+"\u005cn";
                        result += "N\u00edvel:"+id.getLevel()+"\u005cn";
                        result += "Categoria:"+id.getCategoryName()+"\u005cn";
                        result += "----------------------"+"\u005cn";
                }
                else
                {
                        errorCode = ErrorConstants.ERR_DUPLICATE_IDENTIFIER;
                        errorParams = new ArrayList<String>();
                        errorParams.add(id.getID());
                        {if (true) throw generateParseException();}
                }
    jj_consume_token(SEMICOLON);
  }

  final public void SubProgramDeclSec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAMETERS:
      ParamDeclSec();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    DeclSec();
  }

  final public void ParamDeclSec() throws ParseException {
                      int dt;Token t;Token tTransf = null;
                ArrayList<Identifier> idList = new ArrayList<Identifier>();
                Identifier id;
    jj_consume_token(PARAMETERS);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        tTransf = jj_consume_token(VAR);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      dt = DataType();
      t = jj_consume_token(IDENTIFIER);
                id = new Identifier();
                id.setID(t.image.toUpperCase());
                id.setLevel(currentLevel);
                id.setType(dt);
                id.setCategory(SymbolTableManager.CATEGORY_PARAM);
                if (tTransf==null) {
                        id.setTransferType(SymbolTableManager.TRANSFER_VALUE);
                }
                else {
                        id.setTransferType(SymbolTableManager.TRANSFER_REF);
                }
                idList.add(id);
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case REAL:
      case STRING:
      case VAR:
      case BOOLEAN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
    }
                for (Identifier identifier : idList) {
                        if (STManager.addSymbol(identifier))
                        {
                                result += "ID:"+identifier.getID()+"\u005cn";
                                result += "Tipo:"+identifier.getTypeName()+"\u005cn";
                                result += "N\u00edvel:"+currentLevel+"\u005cn";
                                result += "Categoria:"+identifier.getCategoryName()+"\u005cn";
                                result += "Transfer\u00eancia:"+identifier.getTransferTypeName()+"\u005cn";
                                result += "----------------------"+"\u005cn";
                        }
                        else
                        {
                                errorCode = ErrorConstants.ERR_DUPLICATE_IDENTIFIER;
                                errorParams = new ArrayList<String>();
                                errorParams.add(id.getID());
                                {if (true) throw generateParseException();}
                        }
                }
  }

  final public void FunctionDecl() throws ParseException {
    FunctionHeader();
                currentLevel++;
    SubProgramDeclSec();
    FunctionBlock();
                STManager.removeLevel(currentLevel);
                currentLevel--;
    jj_consume_token(SEMICOLON);
  }

  final public void FunctionHeader() throws ParseException {
                        Token t;int dt;
    jj_consume_token(FUNCTION);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(RETURNS);
    dt = DataType();
                Identifier id = new Identifier();
                id.setID(t.image.toUpperCase());
                id.setLevel(currentLevel);
                id.setType(dt);
                id.setCategory(SymbolTableManager.CATEGORY_FUNCTION);
                if (STManager.addSymbol(id))
                {
                        result += "ID:"+id.getID()+"\u005cn";
                        result += "N\u00edvel:"+id.getLevel()+"\u005cn";
                        result += "Categoria:"+id.getCategoryName()+"\u005cn";
                        result += "Retorno:"+id.getTypeName()+"\u005cn";
                        result += "----------------------"+"\u005cn";
                }
                else
                {
                        errorCode = ErrorConstants.ERR_DUPLICATE_IDENTIFIER;
                        errorParams = new ArrayList<String>();
                        errorParams.add(id.getID());
                        {if (true) throw generateParseException();}
                }
    jj_consume_token(SEMICOLON);
  }

  final public void FunctionBlock() throws ParseException {
    jj_consume_token(BEGIN);
    label_8:
    while (true) {
      Statement();
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CALL:
      case IF:
      case READ:
      case SET:
      case UNTIL:
      case WHILE:
      case WRITE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
    }
    jj_consume_token(RETURN);
    jj_consume_token(PARETHESIS_OPEN);
    Condition();
    jj_consume_token(PARETHESIS_CLOSE);
    jj_consume_token(END);
  }

//Comandos
  final public void Statements() throws ParseException {
    Statement();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_9;
      }
      jj_consume_token(SEMICOLON);
      Statement();
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALL:
    case IF:
    case READ:
    case SET:
    case UNTIL:
    case WHILE:
    case WRITE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case READ:
        jj_consume_token(READ);
        Variable();
        break;
      case SET:
        jj_consume_token(SET);
        Variable();
        jj_consume_token(OP_EQUALS);
        Expression();
        break;
      case WRITE:
        jj_consume_token(WRITE);
        Variable();
        break;
      case IF:
        jj_consume_token(IF);
        Condition();
        jj_consume_token(THEN);
        Statements();
        ElseClause();
        break;
      case WHILE:
        jj_consume_token(WHILE);
        Condition();
        jj_consume_token(DO);
        Statements();
        jj_consume_token(ENDWHILE);
        break;
      case UNTIL:
        jj_consume_token(UNTIL);
        Condition();
        jj_consume_token(DO);
        Statements();
        jj_consume_token(ENDUNTIL);
        break;
      case CALL:
        jj_consume_token(CALL);
        jj_consume_token(IDENTIFIER);
        ArgList();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  final public void ElseClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Statements();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
  }

  final public void ArgList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARETHESIS_OPEN:
      jj_consume_token(PARETHESIS_OPEN);
      Arguments();
      jj_consume_token(PARETHESIS_CLOSE);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

  final public void Arguments() throws ParseException {
    Condition();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      Condition();
    }
  }

//Expressões
  final public void Condition() throws ParseException {
    CompoundCondition();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_11;
      }
      jj_consume_token(OR);
      CompoundCondition();
    }
  }

  final public void CompoundCondition() throws ParseException {
    SimpleCondition();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_12;
      }
      jj_consume_token(AND);
      SimpleCondition();
    }
  }

  final public void SimpleCondition() throws ParseException {
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_EQUALS:
    case OP_LESS:
    case OP_GREATER:
    case OP_LESS_OR_EQUAL:
    case OP_GREATER_OR_EQUAL:
    case OP_DIFFERENT:
      RelOp();
      Expression();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  final public void Expression() throws ParseException {
    Term();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ADD:
      case OP_SUB:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_13;
      }
      AddOp();
      Term();
    }
  }

  final public void Term() throws ParseException {
    Unary();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_MULT:
      case OP_DIV:
      case OP_MOD:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_14;
      }
      MultOp();
      Unary();
    }
  }

  final public void Unary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_ADD:
    case OP_SUB:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ADD:
        jj_consume_token(OP_ADD);
        break;
      case OP_SUB:
        jj_consume_token(OP_SUB);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    Factor();
  }

  final public void Factor() throws ParseException {
                Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
      Bool();
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                Identifier id = STManager.getIdentifier(t.image);
                if (id==null)
                {
                        errorCode = ErrorConstants.ERR_IDENTIFIER_NOT_DECLARED;
                        errorParams = new ArrayList<String>();
                        errorParams.add(t.image.toUpperCase());
                        {if (true) throw generateParseException();}
                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARETHESIS_OPEN:
        jj_consume_token(PARETHESIS_OPEN);
        Arguments();
        jj_consume_token(PARETHESIS_CLOSE);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      VariableAux();
      break;
    case INTEGER_CONST:
    case REAL_CONST:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_CONST:
        jj_consume_token(INTEGER_CONST);
        break;
      case REAL_CONST:
        jj_consume_token(REAL_CONST);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case STRING_CONST:
      jj_consume_token(STRING_CONST);
      break;
    case NOT:
      jj_consume_token(NOT);
      Factor();
      break;
    case PARETHESIS_OPEN:
      jj_consume_token(PARETHESIS_OPEN);
      Condition();
      jj_consume_token(PARETHESIS_CLOSE);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Bool() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Variable() throws ParseException {
                  Token t;
    t = jj_consume_token(IDENTIFIER);
                Identifier id = STManager.getIdentifier(t.image);
                if (id==null)
                {
                        errorCode = ErrorConstants.ERR_IDENTIFIER_NOT_DECLARED;
                        errorParams = new ArrayList<String>();
                        errorParams.add(t.image.toUpperCase());
                        {if (true) throw generateParseException();}
                }
    VariableAux();
  }

  final public void VariableAux() throws ParseException {
                     Token t;
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BRACKET_OPEN:
      case DOT:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
        break;
      case BRACKET_OPEN:
        jj_consume_token(BRACKET_OPEN);
        Expression();
        jj_consume_token(BRACKET_CLOSE);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void RelOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_EQUALS:
      jj_consume_token(OP_EQUALS);
      break;
    case OP_DIFFERENT:
      jj_consume_token(OP_DIFFERENT);
      break;
    case OP_GREATER_OR_EQUAL:
      jj_consume_token(OP_GREATER_OR_EQUAL);
      break;
    case OP_LESS_OR_EQUAL:
      jj_consume_token(OP_LESS_OR_EQUAL);
      break;
    case OP_LESS:
      jj_consume_token(OP_LESS);
      break;
    case OP_GREATER:
      jj_consume_token(OP_GREATER);
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AddOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_ADD:
      jj_consume_token(OP_ADD);
      break;
    case OP_SUB:
      jj_consume_token(OP_SUB);
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MultOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_MULT:
      jj_consume_token(OP_MULT);
      break;
    case OP_DIV:
      jj_consume_token(OP_DIV);
      break;
    case OP_MOD:
      jj_consume_token(OP_MOD);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Argument() throws ParseException {
    Condition();
  }

  /** Generated Token Manager. */
  public JASONTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x880000,0x0,0x0,0x0,0x0,0x10000400,0x0,0x0,0x88200000,0x88200000,0x0,0x880000,0x880000,0x400000,0x0,0x88200000,0x44101000,0x0,0x44101000,0x44101000,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x400,0x0,0x400,0x2,0x10,0x0,0x0,0x1000,0x0,0x1000,0x0,0x0,0x0,0x80,0x80,0x4000000,0x0,0x0,0x0,0x8,0x88,0x10000064,0x10000000,0x64,0x64,0x0,0x1000000,0x4000000,0x40000000,0x20000000,0x3f0000,0x1800,0xe000,0x1800,0x1800,0x1000000,0x0,0x81000300,0x300,0x8400000,0x8400000,0x3f0000,0x1800,0xe000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x8,0x0,0x0,0x0,0x0,0x8,0x0,0x3,0x83,0x0,0x8,0x3,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x8b,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public JASON(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JASON(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JASONTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JASON(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JASONTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JASON(JASONTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JASONTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[72];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 72; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
