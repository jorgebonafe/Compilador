/* Generated By:JavaCC: Do not edit this line. JASON.java */
package testJJ;

import java.io.InputStream;

public class JASON implements JASONConstants {
        int errorCode = 0;
        String errorMessage = null;

        public int getErrorCode()
        {
                return errorCode;
        }

        public String getErrorMessage()
        {
                return errorMessage;
        }

        public String testParser(InputStream is)        {
                String result = "";
                errorCode = 0;

                System.out.println("ENTRADA DE TESTE :\u005cn");

                Token t = null;
                Token previousT = null;
                Token lastStringT = null;
                Token lastCommentT = null;
                outerloop:
                while (true)
                {
                        try
                        {
                                t = getNextToken();
                                String tokenName = "";
                                if (t.kind != 0)
                                {
                                        int spaces = 0;
                                        spaces = 4 - new Integer(t.beginLine).toString().length();
                                        if (spaces<0)
                                                spaces = 0;
                                        int spaces2 = 3 - new Integer(t.beginColumn).toString().length();
                                        if (spaces2 < 0)
                                                spaces2 = 0;

                                        result = result + "(";
                                        for (int i=0;i<spaces;i++)
                                                result = result + " ";
                                        result = result + t.beginLine + ",";
                                        for (int i=0;i<spaces2;i++)
                                                result = result + " ";
                                        result = result + t.beginColumn + ")   ";
                                }
                                switch (t.kind)
                                {
                                        case ARRAY :
                                        tokenName = "ARRAY";
                                        break;
                                        case BEGIN :
                                        tokenName = "BEGIN";
                                        break;
                                        case CALL :
                                        tokenName = "CALL";
                                        break;
                                        case DO :
                                        tokenName = "DO";
                                        break;
                                        case ELSE :
                                        tokenName = "ELSE";
                                        break;
                                        case END :
                                        tokenName = "END";
                                        break;
                                        case ENDIF :
                                        tokenName = "ENDIF";
                                        break;
                                        case ENDUNTIL :
                                        tokenName = "ENDUNTIL";
                                        break;
                                        case ENDWHILE :
                                        tokenName = "ENDWHILE";
                                        break;
                                        case FUNCTION :
                                        tokenName = "FUNCTION";
                                        break;
                                        case IF :
                                        tokenName = "IF";
                                        break;
                                        case INTEGER :
                                        tokenName = "INTEGER";
                                        break;
                                        case PARAMETERS :
                                        tokenName = "PARAMETERS";
                                        break;
                                        case PROCEDURE :
                                        tokenName = "PROCEDURE";
                                        break;
                                        case RETURNS :
                                        tokenName = "RETURNS";
                                        break;
                                        case PROGRAM :
                                        tokenName = "PROGRAM";
                                        break;
                                        case READ :
                                        tokenName = "READ";
                                        break;
                                        case REAL :
                                        tokenName = "REAL";
                                        break;
                                        case RECORD :
                                        tokenName = "RECORD";
                                        break;
                                        case RETURN :
                                        tokenName = "RETURN";
                                        break;
                                        case SET :
                                        tokenName = "SET";
                                        break;
                                        case STRING :
                                        tokenName = "STRING";
                                        break;
                                        case THEN :
                                        tokenName = "THEN";
                                        break;
                                        case TYPES :
                                        tokenName = "TYPES";
                                        break;
                                        case UNTIL :
                                        tokenName = "UNTIL";
                                        break;
                                        case VAR :
                                        tokenName = "VAR";
                                        break;
                                        case VARIABLES :
                                        tokenName = "VARIABLES";
                                        break;
                                        case WHILE :
                                        tokenName = "WHILE";
                                        break;
                                        case WRITE :
                                        tokenName = "WRITE";
                                        break;
                                        case BOOLEAN :
                                        tokenName = "BOOLEAN";
                                        break;
                                        case TRUE :
                                        tokenName = "TRUE";
                                        break;
                                        case FALSE :
                                        tokenName = "FALSE";
                                        break;
                                        case DEFINE :
                                        tokenName = "DEFINE";
                                        break;
                                        case OP_ADD :
                                        tokenName = "OP_ADD";
                                        break;
                                        case OP_MULT :
                                        tokenName = "OP_MULT";
                                        break;
                                        case OP_REL :
                                        tokenName = "OP_REL";
                                        break;
                                        case BRACKET_OPEN :
                                        tokenName = "BRACKET_OPEN";
                                        break;
                                        case BRACKET_CLOSE :
                                        tokenName = "BRACKET_CLOSE";
                                        break;
                                        case PARETHESIS_OPEN :
                                        tokenName = "PARETHESIS_OPEN";
                                        break;
                                        case PARETHESIS_CLOSE :
                                        tokenName = "PARETHESIS_CLOSE";
                                        break;
                                        case COMMA :
                                        tokenName = "COMMA";
                                        break;
                                        case DOT :
                                        tokenName = "DOT";
                                        break;
                                        case SEMICOLON :
                                        tokenName = "SEMICOLON";
                                        break;
                                        case AND :
                                        tokenName = "AND";
                                        break;
                                        case OR :
                                        tokenName = "OR";
                                        break;
                                        case NOT :
                                        tokenName = "NOT";
                                        break;
                                        case INTEGER_CONST :
                                        tokenName = "INTEGER_CONST";
                                        break;
                                        case REAL_CONST :
                                        tokenName = "REAL_CONST";
                                        break;
                                        case IDENTIFIER :
                                        tokenName = "IDENTIFIER";
                                        break;
                                        case COMMENT_CORE :
                                        lastCommentT = t.specialToken;
                                        case STRING_CORE :
                                        lastStringT = t.specialToken;
                                        break;
                                        case STRING_CONST :
                                        tokenName = "STRING_CONST";
                                        break;
                                        case EOF :
                                                if (previousT != null && previousT.kind == COMMENT_CORE) {
                                                                errorCode = 2;
                                                        errorMessage = "Coment\u00e1rio de bloco na linha "+
                                                        lastCommentT.beginLine + ", coluna "+lastCommentT.beginColumn + " nunca foi fechado.";
                                                }
                                                if (t.specialToken != null &&
                                                        t.specialToken.kind == COMMENT_INNER) {
                                                                errorCode = 2;
                                                        errorMessage = "Coment\u00e1rio de bloco na linha "+
                                                        t.beginLine + ", coluna "+t.beginColumn + " nunca foi fechado.";
                                                }
                                                else if (previousT != null && previousT.kind == STRING_CORE) {
                                                                errorCode = 3;
                                                        errorMessage = "String na linha "+
                                                        lastStringT.beginLine + ", coluna "+lastStringT.beginColumn + " nunca foi fechada.";
                                                }
                                                else if (t.specialToken != null &&
                                                        t.specialToken.kind == STRING_START) {
                                                                errorCode = 3;
                                                        errorMessage = "String na linha "+
                                                        t.specialToken.beginLine + ", coluna "+t.specialToken.beginColumn + " nunca foi fechada.";
                                                }

                                        break outerloop;
                                        case IDENTIFIER_ERR :
                                        errorCode = 1;
                                        errorMessage = "Identificador muito longo na linha " +
                                                t.beginLine + ", coluna "+t.beginColumn;
                                        break outerloop;
                                        default:
                                        break outerloop;
                                }
                                previousT = t;

                                int spaces = 0;
                                spaces = 16 - tokenName.length();

                                for (int i=0;i<spaces;i++)
                                        result = result + " ";

                                result = result + tokenName + ": " + t.image + "\u005cn";
                        }
                        catch (Exception e)
                        {}
                        catch (TokenMgrError e)
                        {
                                errorCode = 1;
                                errorMessage = e.getMessage();
                                break;
                        }
                }
                return result;
        }

  /** Generated Token Manager. */
  public JASONTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }

  /** Constructor with InputStream. */
  public JASON(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JASON(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JASONTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JASON(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JASONTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JASON(JASONTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JASONTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
