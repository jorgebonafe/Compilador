/**
 ** -  JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options {
  static = false;
  ERROR_REPORTING = true;
  TRACK_TOKENS =true;
  TOKEN_EXTENDS ="BaseToken"; 
  COMMON_TOKEN_ACTION=true;
//  DEBUG_PARSER = true;
}

PARSER_BEGIN(JASON)
package testJJ;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;

public class JASON {
	int errorCode = 0;
	String result = "";
	String errorMessage = "";
	int currentLevel;
	SymbolTableManager STManager;
	ArrayList<String> errorParams;
	HashMap<String,String> definitions;
	int offset = 0;

	public Identifier r0(Token t) throws ParseException {
		Identifier id = new Identifier();
		id.setID(t.image.toUpperCase());
		id.setLevel(currentLevel);
		
		if (!STManager.addSymbol(id))
		{
			errorCode = ErrorConstants.ERR_DUPLICATE_IDENTIFIER;
			errorParams = new ArrayList<String>();
			errorParams.add(id.getID());
			throw generateParseException();
		}
		return id;
	}

	public void r0a(Identifier id, int cat, int type, String value) {
		id.setCategory(cat);
		id.setType(type);		id.setValue(value);
	}

	public void r1() {
		
//		1: Se declarado(TS,s,nivelcorr) então erro(‘id já declarado’);//		insere(TS, s, ref);//		permissão_tipo_array := true;
	}
	
	public void r2(){}

	public void r2a(){}
	
	public void r3(){}
	
	public void r4(){}

	public void r4a(){}
	
	public void r5(){}
	
	public void r6(){}
	
	public void r7(){}
	
	public void r8(){}
	
	public void r9(){}
	
	public void r10(){}

	public void r10a(){}
	
	public void r11(){}
	
	public void r12(){}
	
	public void r13(){}
	
	public void r14(){}
	
	public void r15(){}
	
	public void r16(){}
	
	public void r17(){}
	
	public void r18(){}
	
	public void r19(){}
	
	public void r20(){}
	
	public void r21(){}
	
	public void r22(){}

	public void r22a(){}
	
	public void r23(){}
	
	public void r24(){}
	
	public void r25(){}

	public void r25a(){}
	
	public void r26(){}
	
	public int getErrorCode()
	{
		return errorCode;
	}

	public String getErrorMessage()
	{
		return errorMessage;
	}

	public String testParser(InputStream is)	{
		ReInit(is);
		result = "";
		errorCode = 0;
		int currentLevel = 0;
		STManager = new SymbolTableManager();
		
		try {
			this.Program();
			result += "OK.\u005cn";
		} catch (ParseException e) {
			switch (errorCode)
			{
				case ErrorConstants.ERR_DUPLICATE_IDENTIFIER: 
					errorMessage = "Identificador duplicado ("+
					errorParams.get(0)+
					") na linha " + e.currentToken.beginLine + ", coluna "
					+ e.currentToken.beginColumn;
					break;
				case ErrorConstants.ERR_IDENTIFIER_NOT_DECLARED: 
					errorMessage = "Identificador não declarado ("+
					errorParams.get(0)+
					") na linha " + e.currentToken.beginLine + ", coluna "
					+ e.currentToken.beginColumn;
					break;
				case ErrorConstants.ERR_CONSTANT_NOT_DEFINED: 
					errorMessage = "Constante não definida ("+
					errorParams.get(0)+
					") na linha " + e.currentToken.beginLine + ", coluna "
					+ e.currentToken.beginColumn;
					break;
				default:
					errorCode = -1;
					errorMessage += e.getMessage() + "\u005cn";
			}

			ReInit(is);
		}
		catch (Exception e) {
			errorCode = -1;
			errorMessage += e.getMessage() + "\u005cn";
			ReInit(is);
		} catch (Error e) {
			errorCode = -1;
			errorMessage += e.getMessage() + "\u005cn";
		}

/*
		Token t = null;
		Token previousT = null;
		Token lastStringT = null;
		Token lastCommentT = null;
		outerloop:
		while (true)
		{
			try
			{
				t = getNextToken();
				String tokenName = "";
				if (t.kind != 0)
				{
					int spaces = 0;
					spaces = 4 - new Integer(t.beginLine).toString().length();
					if (spaces<0)
						spaces = 0;
					int spaces2 = 3 - new Integer(t.beginColumn).toString().length();
					if (spaces2 < 0)
						spaces2 = 0;

					result = result + "(";
					for (int i=0;i<spaces;i++)
						result = result + " ";
					result = result + t.beginLine + ",";
					for (int i=0;i<spaces2;i++)
						result = result + " ";
					result = result + t.beginColumn + ")   ";
				}
				switch (t.kind)
				{
					case ARRAY : 
					tokenName = "ARRAY";
					break;
					case BEGIN : 
					tokenName = "BEGIN";
					break;
					case CALL : 
					tokenName = "CALL";
					break;
					case DO : 
					tokenName = "DO";
					break;
					case ELSE : 
					tokenName = "ELSE";
					break;
					case END : 
					tokenName = "END";
					break;
					case ENDIF : 
					tokenName = "ENDIF";
					break;
					case ENDUNTIL : 
					tokenName = "ENDUNTIL";
					break;
					case ENDWHILE : 
					tokenName = "ENDWHILE";
					break;
					case FUNCTION : 
					tokenName = "FUNCTION";
					break;
					case IF : 
					tokenName = "IF";
					break;
					case INTEGER : 
					tokenName = "INTEGER";
					break;
					case PARAMETERS : 
					tokenName = "PARAMETERS";
					break;
					case PROCEDURE : 
					tokenName = "PROCEDURE";
					break;
					case RETURNS : 
					tokenName = "RETURNS";
					break;
					case PROGRAM : 
					tokenName = "PROGRAM";
					break;
					case READ : 
					tokenName = "READ";
					break;
					case REAL : 
					tokenName = "REAL";
					break;
					case RECORD : 
					tokenName = "RECORD";
					break;
					case RETURN : 
					tokenName = "RETURN";
					break;
					case SET : 
					tokenName = "SET";
					break;
					case STRING : 
					tokenName = "STRING";
					break;
					case THEN : 
					tokenName = "THEN";
					break;
					case TYPES : 
					tokenName = "TYPES";
					break;
					case UNTIL : 
					tokenName = "UNTIL";
					break;
					case VAR : 
					tokenName = "VAR";
					break;
					case VARIABLES : 
					tokenName = "VARIABLES";
					break;
					case WHILE : 
					tokenName = "WHILE";
					break;
					case WRITE : 
					tokenName = "WRITE";
					break;
					case BOOLEAN : 
					tokenName = "BOOLEAN";
					break;
					case TRUE : 
					tokenName = "TRUE";
					break;
					case FALSE : 
					tokenName = "FALSE";
					break;
					case DEFINE : 
					tokenName = "DEFINE";
					break;
					case OP_ADD : 
					tokenName = "OP_ADD";
					break;
					case OP_SUB : 
					tokenName = "OP_SUB";
					break;
					case OP_MULT : 
					tokenName = "OP_MULT";
					break;
					case OP_DIV : 
					tokenName = "OP_DIV";
					break;
					case OP_MOD : 
					tokenName = "OP_MOD";
					break;
					case OP_EQUALS : 
					tokenName = "OP_EQUALS";
					break;
					case OP_LESS : 
					tokenName = "OP_LESS";
					break;
					case OP_GREATER : 
					tokenName = "OP_GREATER";
					break;
					case OP_LESS_OR_EQUAL : 
					tokenName = "OP_LESS_OR_EQUAL";
					break;
					case OP_GREATER_OR_EQUAL : 
					tokenName = "OP_GREATER_OR_EQUAL";
					break;
					case OP_DIFFERENT : 
					tokenName = "OP_DIFFERENT";
					break;
					case BRACKET_OPEN : 
					tokenName = "BRACKET_OPEN";
					break;
					case BRACKET_CLOSE : 
					tokenName = "BRACKET_CLOSE";
					break;
					case PARETHESIS_OPEN : 
					tokenName = "PARETHESIS_OPEN";
					break;
					case PARETHESIS_CLOSE : 
					tokenName = "PARETHESIS_CLOSE";
					break;
					case COMMA : 
					tokenName = "COMMA";
					break;
					case DOT : 
					tokenName = "DOT";
					break;
					case SEMICOLON : 
					tokenName = "SEMICOLON";
					break;
					case AND : 
					tokenName = "AND";
					break;
					case OR : 
					tokenName = "OR";
					break;
					case NOT : 
					tokenName = "NOT";
					break;
					case INTEGER_CONST : 
					tokenName = "INTEGER_CONST";
					break;
					case REAL_CONST : 
					tokenName = "REAL_CONST";
					break;
					case IDENTIFIER : 
					tokenName = "IDENTIFIER";
					break;
					case COMMENT_CORE : 
					lastCommentT = t.specialToken;
					case STRING_CORE : 
					lastStringT = t.specialToken;
					break;
					case STRING_CONST : 
					tokenName = "STRING_CONST";
					break;
					case EOF :
						if (previousT != null && previousT.kind == COMMENT_CORE) {
								errorCode = 2;
							errorMessage = "Comentário de bloco na linha "+
							lastCommentT.beginLine + ", coluna "+lastCommentT.beginColumn + " nunca foi fechado.";
						}					
						if (t.specialToken != null &&
							t.specialToken.kind == COMMENT_INNER) {
								errorCode = 2;
							errorMessage = "Comentário de bloco na linha "+
							t.beginLine + ", coluna "+t.beginColumn + " nunca foi fechado.";
						}
						else if (previousT != null && previousT.kind == STRING_CORE) {
								errorCode = 3;
							errorMessage = "String na linha "+
							lastStringT.beginLine + ", coluna "+lastStringT.beginColumn + " nunca foi fechada.";
						}
						else if (t.specialToken != null &&
							t.specialToken.kind == STRING_START) {
								errorCode = 3;
							errorMessage = "String na linha "+
							t.specialToken.beginLine + ", coluna "+t.specialToken.beginColumn + " nunca foi fechada.";
						}
						
					break outerloop;
					case IDENTIFIER_ERR : 
					errorCode = 1;
					errorMessage = "Identificador muito longo na linha " +
						t.beginLine + ", coluna "+t.beginColumn +
						". Tamanho máximo é 63 caracteres.";
					break outerloop;
					default:
					break outerloop;
				}
				previousT = t;

				int spaces = 0;
				spaces = 16 - tokenName.length();

				for (int i=0;i<spaces;i++)
					result = result + " ";

				result = result + tokenName + ": " + t.image + "\n";
			}
			catch (Exception e)
			{}
			catch (TokenMgrError e)
			{
				errorCode = 1;
				errorMessage = e.getMessage();
				break;
			}
		}

		*/
		return result;
	}
}

PARSER_END(JASON)

SKIP :
{
  " "
| "\r"
| "\r\n"
| "\t"
| "\n"
}

SPECIAL_TOKEN:
{
  <COMMENT_LINE: "#" (~["\n","\r","\r"])* >
| < COMMENT_INNER : "{" >: IN_COMMENT
| < COMMENT_BLOCK : "{" (~["}"])* "}" >
}


< IN_COMMENT > TOKEN : {
  < COMMENT_CORE: (~["}"])* > : DEFAULT
}

TOKEN [IGNORE_CASE] : /* RESERVED WORDS */
{
  < ARRAY : "ARRAY" >
| < BEGIN : "BEGIN" >
| < CALL : "CALL" >
| < DO : "DO" >
| < ELSE : "ELSE" >
| < END : "END" >
| < ENDIF : "ENDIF" >
| < ENDUNTIL : "ENDUNTIL" >
| < ENDWHILE : "ENDWHILE" >
| < FUNCTION : "FUNCTION" >
| < IF : "IF" >
| < INTEGER : "INTEGER" >
| < PARAMETERS : "PARAMETERS" >
| < PROCEDURE : "PROCEDURE" >
| < RETURNS : "RETURNS" >
| < PROGRAM : "PROGRAM" >
| < READ : "READ" >
| < REAL : "REAL" >
| < RECORD : "RECORD" >
| < RETURN : "RETURN" >
| < SET : "SET" >
| < STRING : "STRING" >
| < THEN : "THEN" >
| < TYPES : "TYPES" >
| < UNTIL : "UNTIL" >
| < VAR : "VAR" >
| < VARIABLES : "VARIABLES" >
| < WHILE : "WHILE" >
| < WRITE : "WRITE" >
| < BOOLEAN : "BOOLEAN" >
| < TRUE : "TRUE" >
| < FALSE : "FALSE" >
| < DEFINE : "DEFINE" >
}

TOKEN : /* OPERATORS */
{
  < OP_ADD : "+" >
| < OP_SUB : "-" >
| < OP_MULT : "*" >
| < OP_DIV : "/" >
| < OP_MOD : "%" >
| < OP_EQUALS: "=" >
| < OP_LESS: "<" >
| < OP_GREATER: ">" >
| < OP_LESS_OR_EQUAL: "<=" >
| < OP_GREATER_OR_EQUAL: ">=" >
| < OP_DIFFERENT: "!" >
}

TOKEN : /* SYMBOLS */
{
  < BRACKET_OPEN : "[" >
| < BRACKET_CLOSE : "]" >
| < PARETHESIS_OPEN : "(" >
| < PARETHESIS_CLOSE: ")" >
| < COMMA : "," >
| < DOT : "." >
| < SEMICOLON  : ";" >
| < AND : "&" >
| < OR : "\\" >
| < NOT : "~" >
}

TOKEN :
{
  < INTEGER_CONST : (< DIGIT >)+ >
| < REAL_CONST : (< DIGIT >)+"."(< DIGIT >)* | "."(< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN [IGNORE_CASE]:
{
  < IDENTIFIER : [ "a"-"z", "_" ]([ "a"-"z" , "0"-"9", "_"]){0,62} >
  | < IDENTIFIER_ERR : [ "a"-"z", "_" ]([ "a"-"z" , "0"-"9", "_"]){63,} >
}

SPECIAL_TOKEN:
{
  < STRING_START : "\"" >: IN_STRING
}

< IN_STRING > TOKEN :
{
  < STRING_CORE:  (~["\""])* > : DEFAULT 
}

TOKEN [IGNORE_CASE]:
{
  < STRING_CONST : "\"" (~["\""])*  "\"" > 
}


void Program(): {} { Header() DeclSec() Block() <DOT> }
void Header(): {} { <PROGRAM> <IDENTIFIER> <SEMICOLON> }
void Block(): {} { <BEGIN> Statements() <END> }





//Declarações

void DeclSec(): {} { 
	(DefineDeclSec())? (TypeDeclSec())? (VarDeclSec())? (SubProgramDecls())? 
}

void DefineDeclSec():
	{
		Token t;
		int type[] = new int[1];
		String value[] = new String[1];
	} { 
	<DEFINE> ( t = <IDENTIFIER> { Identifier id = r0(t);}
	<OP_EQUALS> Values(id, type,value)
	<SEMICOLON> {r0a(id,SymbolTableManager.CATEGORY_CONST,type[0],value[0]);})+ 
}

String Values(Identifier id, int type[], String value[]): {Token t1 = null; Token t2;} {
	( ( t1 = <OP_SUB> )?
	(  t2 = <INTEGER_CONST> {type[0]=JASONConstants.INTEGER;value[0]=t2.image;}
	 | t2 = <REAL_CONST>    {type[0]=JASONConstants.REAL;value[0]=t2.image;})
	 | t2 = <STRING_CONST>  {type[0]=JASONConstants.STRING;value[0]=t2.image;})
	{
		String s = "";
		if (t1 != null)
			s = s+t1.image.toUpperCase();
		s = s+t2.image.toUpperCase();
		return s;
	}
}

void TypeDeclSec(): {} { 
	<TYPES> ( <IDENTIFIER> {r1();} ( ArraySpecification() {r2();} | RecordSpecification() {r2a();}) <SEMICOLON> )+ 
}

void ArraySpecification(): {} { 
	<ARRAY> {r10();} DataType() <BRACKET_OPEN> (<INTEGER_CONST> | <REAL_CONST>) {r12();} <BRACKET_CLOSE> 
}

void RecordSpecification(): {} { 
	<RECORD> {r10a();} VarDeclsRecord() <END>
}

void VarDeclsRecord(): {int dt;} {
	( dt = DataType() {r4a();} IdList(dt) {r3();} <SEMICOLON> )+
}

void VarDeclSec(): {} { 
	<VARIABLES> VarDecls() 
}

void VarDecls(): {int dt;} {
	( dt = DataType() {r4();} IdList(dt) {r3();} <SEMICOLON> )+
}

int DataType(): {Token t;} {
	( t = <REAL> | t = <INTEGER> |
	  t = <IDENTIFIER> | t = <STRING> | t = <BOOLEAN> )
	{
		return t.kind;
	}
}

void IdList(int dt): {ArrayList<Identifier> idList; Token t;} {
	{
		idList = new ArrayList<Identifier>();
	}
	t = <IDENTIFIER>
	{
		Identifier id = new Identifier();
		id.setID(t.image.toUpperCase());
		id.setLevel(currentLevel);
		id.setType(dt);
		id.setCategory(SymbolTableManager.CATEGORY_VAR);
		idList.add(id);
	}
	( <COMMA> t = <IDENTIFIER>
	{
		id = new Identifier();
		id.setID(t.image.toUpperCase());
		id.setLevel(currentLevel);
		id.setType(dt);
		id.setCategory(SymbolTableManager.CATEGORY_VAR);
		idList.add(id);
	}
	)*
	{
		for (Identifier identifier : idList) {
			if (STManager.addSymbol(identifier))
			{
				result += "ID:"+identifier.getID()+"\n";
				result += "Tipo:"+identifier.getTypeName()+"\n";
				result += "Nível:"+currentLevel+"\n";
				result += "Categoria:"+identifier.getCategoryName()+"\n";
				result += "----------------------"+"\n";
			}
			else
			{
				errorCode = ErrorConstants.ERR_DUPLICATE_IDENTIFIER;
				errorParams = new ArrayList<String>();
				errorParams.add(id.getID());
				throw generateParseException();
			}
		}
	}
}

void SubProgramDecls(): {} { 
	( ProcDecl() | FunctionDecl() )+ 
}

void ProcDecl(): {} {
	ProcHeader() {r5(); r13();}
	{
		currentLevel++;
	}
	SubProgramDeclSec() Block() {r8();}
	{
		STManager.removeLevel(currentLevel);
		currentLevel--;
	}
	<SEMICOLON>
}

void ProcHeader(): {Token t;} {
	<PROCEDURE> t = <IDENTIFIER>
	{
		Identifier id = new Identifier();
		id.setID(t.image.toUpperCase());
		id.setLevel(currentLevel);
		id.setCategory(SymbolTableManager.CATEGORY_PROCEDURE);
		if (STManager.addSymbol(id))
		{
			result += "ID:"+id.getID()+"\n";
			result += "Nível:"+id.getLevel()+"\n";
			result += "Categoria:"+id.getCategoryName()+"\n";
			result += "----------------------"+"\n";
		}
		else
		{
			errorCode = ErrorConstants.ERR_DUPLICATE_IDENTIFIER;
			errorParams = new ArrayList<String>();
			errorParams.add(id.getID());
			throw generateParseException();
		}
	}
	<SEMICOLON>
}

void SubProgramDeclSec(): {} {
	(ParamDeclSec())? DeclSec() 
}

void ParamDeclSec(): {int dt;Token t;Token tTransf = null;} {
	{
		ArrayList<Identifier> idList = new ArrayList<Identifier>();
		Identifier id;
	}
	<PARAMETERS> ( {r14();} (tTransf = <VAR> {r15();})?
	dt = DataType() {r19();}
	t = <IDENTIFIER> {r18();}
	{
		id = new Identifier();
		id.setID(t.image.toUpperCase());
		id.setLevel(currentLevel);
		id.setType(dt);
		id.setCategory(SymbolTableManager.CATEGORY_PARAM);
		if (tTransf==null) {
			id.setTransferType(SymbolTableManager.TRANSFER_VALUE);
		}
		else {
			id.setTransferType(SymbolTableManager.TRANSFER_REF);
		}
		idList.add(id);
	}
	<SEMICOLON> )+ {r20();}
	{
		for (Identifier identifier : idList) {
			if (STManager.addSymbol(identifier))
			{
				result += "ID:"+identifier.getID()+"\n";
				result += "Tipo:"+identifier.getTypeName()+"\n";
				result += "Nível:"+currentLevel+"\n";
				result += "Categoria:"+identifier.getCategoryName()+"\n";
				result += "Transferência:"+identifier.getTransferTypeName()+"\n";
				result += "----------------------"+"\n";
			}
			else
			{
				errorCode = ErrorConstants.ERR_DUPLICATE_IDENTIFIER;
				errorParams = new ArrayList<String>();
				errorParams.add(id.getID());
				throw generateParseException();
			}
		}
	}
} 

void FunctionDecl(): {} {
	FunctionHeader()
	{
		currentLevel++;
	}
	SubProgramDeclSec() FunctionBlock() {r8();}
	{
		STManager.removeLevel(currentLevel);
		currentLevel--;
	}
	<SEMICOLON>
}

void FunctionHeader(): {Token t;int dt;} {
	<FUNCTION> t = <IDENTIFIER> {r6(); r13();}
	<RETURNS> dt = DataType() {r7();}
	{
		Identifier id = new Identifier();
		id.setID(t.image.toUpperCase());
		id.setLevel(currentLevel);
		id.setType(dt);
		id.setCategory(SymbolTableManager.CATEGORY_FUNCTION);
		if (STManager.addSymbol(id))
		{
			result += "ID:"+id.getID()+"\n";
			result += "Nível:"+id.getLevel()+"\n";
			result += "Categoria:"+id.getCategoryName()+"\n";
			result += "Retorno:"+id.getTypeName()+"\n";
			result += "----------------------"+"\n";
		}
		else
		{
			errorCode = ErrorConstants.ERR_DUPLICATE_IDENTIFIER;
			errorParams = new ArrayList<String>();
			errorParams.add(id.getID());
			throw generateParseException();
		}
	}
	<SEMICOLON>
}
void FunctionBlock(): {} { <BEGIN> ( Statement() <SEMICOLON> )+  <RETURN> <PARETHESIS_OPEN> Condition() <PARETHESIS_CLOSE> <END> }

//Comandos

void Statements(): {} { Statement() ( <SEMICOLON> Statement() )* }
void Statement(): {} { 
	( <READ> Variable() {r21();} 
	| <SET> Variable() {r25();} <OP_EQUALS> Expression() {r22a();}
	| <WRITE> Variable() 
	| <IF> Condition() <THEN> Statements() ElseClause() 
	| <WHILE> Condition() <DO> Statements() <ENDWHILE> | <UNTIL> Condition() <DO> Statements() <ENDUNTIL> 
	| <CALL> <IDENTIFIER> {r21(); r25a();} ArgList() )
}

void ElseClause(): {} {
	( <ELSE> Statements() )? <ENDIF> 
}

void ArgList(): {} {
	(  {/* ou de alguma forma */r25();}  <PARETHESIS_OPEN> Arguments() <PARETHESIS_CLOSE>  {r24();} )? 
}

void Arguments(): {} {
	Condition() {r23();} (<COMMA> Condition() {r23();})* 
}


//Expressões
void Condition(): {} { 
	CompoundCondition() ( <OR> CompoundCondition() )* 
}

void CompoundCondition(): {} { 
	SimpleCondition() ( <AND> SimpleCondition() )* 
}

void SimpleCondition(): {} { 
	Expression() (RelOp() Expression())? 
}

void Expression(): {} { 
	Term() ( AddOp() Term() )* 
}

void Term(): {} { 
	Unary() ( MultOp() Unary() )* 
}

void Unary(): {} { 
	( ( <OP_ADD> | <OP_SUB> ) )? Factor() 
}

void Factor(): {Token t;} {
	Bool() |
	t = <IDENTIFIER> {r21(); r22a();}
	{
		Identifier id = STManager.getIdentifier(t.image);
		if (id==null)
		{
			errorCode = ErrorConstants.ERR_IDENTIFIER_NOT_DECLARED;
			errorParams = new ArrayList<String>();
			errorParams.add(t.image.toUpperCase());
			throw generateParseException();
		}
	}
	( <PARETHESIS_OPEN> {/* fazer ou de alguma forma */r22a();} Arguments() {r24();} <PARETHESIS_CLOSE> )? VariableAux() 
	| (<INTEGER_CONST> | <REAL_CONST>) {r26();}
	| <STRING_CONST> 
	| <NOT> Factor() 
	| <PARETHESIS_OPEN> Condition() <PARETHESIS_CLOSE>
}

void Bool(): {} { 
	( <TRUE> | <FALSE> ) 
}

void Variable(): {Token t;} {
	t = <IDENTIFIER> {r21();}
	{
		Identifier id = STManager.getIdentifier(t.image);
		if (id==null)
		{
			errorCode = ErrorConstants.ERR_IDENTIFIER_NOT_DECLARED;
			errorParams = new ArrayList<String>();
			errorParams.add(t.image.toUpperCase());
			throw generateParseException();
		}
	}
	VariableAux()
}

void VariableAux(): {Token t;} {
	( <DOT> t = <IDENTIFIER> {r21();}
	// TODO
	| <BRACKET_OPEN>  Expression() <BRACKET_CLOSE> )*
}
void RelOp(): {} { ( <OP_EQUALS> | <OP_DIFFERENT> | <OP_GREATER_OR_EQUAL> | <OP_LESS_OR_EQUAL> | <OP_LESS> | <OP_GREATER> ) }
void AddOp(): {} { ( <OP_ADD> | <OP_SUB> ) }
void MultOp(): {} { ( <OP_MULT> | <OP_DIV> | <OP_MOD> ) }
void Argument(): {} { Condition() }

TOKEN_MGR_DECLS :
{
	public void CommonTokenAction(Token t)
	{
		t.absoluteBeginColumn = getCurrentTokenAbsolutePosition();
		t.absoluteEndColumn = t.absoluteBeginColumn + t.image.length();
	}

	public int getCurrentTokenAbsolutePosition()
	{
		if (input_stream instanceof SimpleCharStream)
			return ((SimpleCharStream)input_stream).getAbsoluteTokenBengin();
		return -1;
	}
}